[
  {
    "host": {
      "name": "host",
      "type": "str",
      "level": "basic",
      "desc": "local hostname",
      "long_desc": "if blank, ceph assumes the short hostname (hostname -s)",
      "default": "",
      "daemon_default": "",
      "tags": [
        "network"
      ],
      "services": [
        "common"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update"
      ]
    }
  },
  {
    "fsid": {
      "name": "fsid",
      "type": "uuid",
      "level": "basic",
      "desc": "cluster fsid (uuid)",
      "long_desc": "",
      "default": "00000000-0000-0000-0000-000000000000",
      "daemon_default": "",
      "tags": [
        "service"
      ],
      "services": [
        "common"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "public_addr": {
      "name": "public_addr",
      "type": "addr",
      "level": "basic",
      "desc": "public-facing address to bind to",
      "long_desc": "",
      "default": "-",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "mds",
        "osd",
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "public_addrv": {
      "name": "public_addrv",
      "type": "addrvec",
      "level": "basic",
      "desc": "public-facing address to bind to",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "mds",
        "osd",
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "public_bind_addr": {
      "name": "public_bind_addr",
      "type": "addr",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "-",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "cluster_addr": {
      "name": "cluster_addr",
      "type": "addr",
      "level": "basic",
      "desc": "cluster-facing address to bind to",
      "long_desc": "",
      "default": "-",
      "daemon_default": "",
      "tags": [
        "network"
      ],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "public_network": {
      "name": "public_network",
      "type": "str",
      "level": "advanced",
      "desc": "Network(s) from which to choose a public address to bind to",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [
        "network"
      ],
      "services": [
        "mon",
        "mds",
        "osd",
        "mgr"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "public_network_interface": {
      "name": "public_network_interface",
      "type": "str",
      "level": "advanced",
      "desc": "Interface name(s) from which to choose an address from a ``public_network`` to bind to; ``public_network`` must also be specified.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [
        "network"
      ],
      "services": [
        "mon",
        "mds",
        "osd",
        "mgr"
      ],
      "see_also": [
        "public_network"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "cluster_network": {
      "name": "cluster_network",
      "type": "str",
      "level": "advanced",
      "desc": "Network(s) from which to choose a cluster address to bind to",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [
        "network"
      ],
      "services": [
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "cluster_network_interface": {
      "name": "cluster_network_interface",
      "type": "str",
      "level": "advanced",
      "desc": "Interface name(s) from which to choose an address from a ``cluster_network`` to bind to; ``cluster_network`` must also be specified.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [
        "network"
      ],
      "services": [
        "mon",
        "mds",
        "osd",
        "mgr"
      ],
      "see_also": [
        "cluster_network"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "monmap": {
      "name": "monmap",
      "type": "str",
      "level": "advanced",
      "desc": "path to MonMap file",
      "long_desc": "This option is normally used during mkfs, but can also be used to identify which monitors to connect to.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "create"
      ]
    }
  },
  {
    "mon_host": {
      "name": "mon_host",
      "type": "str",
      "level": "basic",
      "desc": "list of hosts or addresses to search for a monitor",
      "long_desc": "This is a list of IP addresses or hostnames that are separated by commas, whitespace, or semicolons. Hostnames are resolved via DNS. All A and AAAA records are included in the search list.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "common"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "mon_host_override": {
      "name": "mon_host_override",
      "type": "str",
      "level": "advanced",
      "desc": "monitor(s) to use overriding the MonMap",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "common"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "mon_dns_srv_name": {
      "name": "mon_dns_srv_name",
      "type": "str",
      "level": "advanced",
      "desc": "name of DNS SRV record to check for monitor addresses",
      "long_desc": "",
      "default": "ceph-mon",
      "daemon_default": "",
      "tags": [
        "network"
      ],
      "services": [
        "common"
      ],
      "see_also": [
        "mon_host"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "container_image": {
      "name": "container_image",
      "type": "str",
      "level": "basic",
      "desc": "container image (used by cephadm orchestrator)",
      "long_desc": "",
      "default": "docker.io/ceph/daemon-base:latest-master-devel",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "no_config_file": {
      "name": "no_config_file",
      "type": "bool",
      "level": "advanced",
      "desc": "signal that we don't require a config file to be present",
      "long_desc": "When specified, we won't be looking for a configuration file, and will instead expect that whatever options or values are required for us to work will be passed as arguments.",
      "default": false,
      "daemon_default": "",
      "tags": [
        "config"
      ],
      "services": [
        "common"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "lockdep": {
      "name": "lockdep",
      "type": "bool",
      "level": "dev",
      "desc": "enable lockdep lock dependency analyzer",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "common"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "lockdep_force_backtrace": {
      "name": "lockdep_force_backtrace",
      "type": "bool",
      "level": "dev",
      "desc": "always gather current backtrace at every lock",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "common"
      ],
      "see_also": [
        "lockdep"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "run_dir": {
      "name": "run_dir",
      "type": "str",
      "level": "advanced",
      "desc": "path for the 'run' directory for storing pid and socket files",
      "long_desc": "",
      "default": "/var/run/ceph",
      "daemon_default": "",
      "tags": [],
      "services": [
        "common"
      ],
      "see_also": [
        "admin_socket"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "admin_socket": {
      "name": "admin_socket",
      "type": "str",
      "level": "advanced",
      "desc": "path for the runtime control socket file, used by the 'ceph daemon' command",
      "long_desc": "",
      "default": "",
      "daemon_default": "$run_dir/$cluster-$name.asok",
      "tags": [],
      "services": [
        "common"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "admin_socket_mode": {
      "name": "admin_socket_mode",
      "type": "str",
      "level": "advanced",
      "desc": "file mode to set for the admin socket file, e.g, '0755'",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "common"
      ],
      "see_also": [
        "admin_socket"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "daemonize": {
      "name": "daemonize",
      "type": "bool",
      "level": "advanced",
      "desc": "whether to daemonize (background) after startup",
      "long_desc": "",
      "default": false,
      "daemon_default": true,
      "tags": [
        "service"
      ],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [
        "pid_file",
        "chdir"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "setuser": {
      "name": "setuser",
      "type": "str",
      "level": "advanced",
      "desc": "uid or user name to switch to on startup",
      "long_desc": "This is normally specified by the systemd unit file.",
      "default": "",
      "daemon_default": "",
      "tags": [
        "service"
      ],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [
        "setgroup"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "setgroup": {
      "name": "setgroup",
      "type": "str",
      "level": "advanced",
      "desc": "gid or group name to switch to on startup",
      "long_desc": "This is normally specified by the systemd unit file.",
      "default": "",
      "daemon_default": "",
      "tags": [
        "service"
      ],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [
        "setuser"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "setuser_match_path": {
      "name": "setuser_match_path",
      "type": "str",
      "level": "advanced",
      "desc": "if set, setuser/setgroup is condition on this path matching ownership",
      "long_desc": "If setuser or setgroup are specified, and this option is non-empty, then the uid/gid of the daemon will only be changed if the file or directory specified by this option has a matching uid and/or gid.  This exists primarily to allow switching to user ceph for OSDs to be conditional on whether the osd data contents have also been chowned after an upgrade.  This is normally specified by the systemd unit file.",
      "default": "",
      "daemon_default": "",
      "tags": [
        "service"
      ],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [
        "setuser",
        "setgroup"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "pid_file": {
      "name": "pid_file",
      "type": "str",
      "level": "advanced",
      "desc": "path to write a pid file (if any)",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [
        "service"
      ],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "chdir": {
      "name": "chdir",
      "type": "str",
      "level": "advanced",
      "desc": "path to chdir(2) to after daemonizing",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [
        "service"
      ],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [
        "daemonize"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "fatal_signal_handlers": {
      "name": "fatal_signal_handlers",
      "type": "bool",
      "level": "advanced",
      "desc": "whether to register signal handlers for SIGABRT etc that dump a stack trace",
      "long_desc": "This is normally true for daemons and values for libraries.",
      "default": true,
      "daemon_default": "",
      "tags": [
        "service"
      ],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "crash_dir": {
      "name": "crash_dir",
      "type": "str",
      "level": "advanced",
      "desc": "Directory where crash reports are archived",
      "long_desc": "",
      "default": "/var/lib/ceph/crash",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "restapi_log_level": {
      "name": "restapi_log_level",
      "type": "str",
      "level": "advanced",
      "desc": "default set by python code",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "restapi_base_url": {
      "name": "restapi_base_url",
      "type": "str",
      "level": "advanced",
      "desc": "default set by python code",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "erasure_code_dir": {
      "name": "erasure_code_dir",
      "type": "str",
      "level": "advanced",
      "desc": "directory where erasure-code plugins can be found",
      "long_desc": "",
      "default": "/usr/lib64/ceph/erasure-code",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "log_file": {
      "name": "log_file",
      "type": "str",
      "level": "basic",
      "desc": "path to log file",
      "long_desc": "",
      "default": "",
      "daemon_default": "/var/log/ceph/$cluster-$name.log",
      "tags": [],
      "services": [],
      "see_also": [
        "log_to_file",
        "log_to_stderr",
        "err_to_stderr",
        "log_to_syslog",
        "err_to_syslog"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "log_max_new": {
      "name": "log_max_new",
      "type": "int",
      "level": "advanced",
      "desc": "max unwritten log entries to allow before waiting to flush to the log",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "log_max_recent"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "log_max_recent": {
      "name": "log_max_recent",
      "type": "int",
      "level": "advanced",
      "desc": "recent log entries to keep in memory to dump in the event of a crash",
      "long_desc": "The purpose of this option is to log at a higher debug level only to the in-memory buffer, and write out the detailed log messages only if there is a crash.  Only log entries below the lower log level will be written unconditionally to the log.  For example, debug_osd=1/5 will write everything <= 1 to the log unconditionally but keep entries at levels 2-5 in memory.  If there is a seg fault or assertion failure, all entries will be dumped to the log.",
      "default": 500,
      "daemon_default": 10000,
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "log_to_file": {
      "name": "log_to_file",
      "type": "bool",
      "level": "basic",
      "desc": "send log lines to a file",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "log_file"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "log_to_stderr": {
      "name": "log_to_stderr",
      "type": "bool",
      "level": "basic",
      "desc": "send log lines to stderr",
      "long_desc": "",
      "default": true,
      "daemon_default": false,
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "err_to_stderr": {
      "name": "err_to_stderr",
      "type": "bool",
      "level": "basic",
      "desc": "send critical error log lines to stderr",
      "long_desc": "",
      "default": false,
      "daemon_default": true,
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "log_stderr_prefix": {
      "name": "log_stderr_prefix",
      "type": "str",
      "level": "advanced",
      "desc": "String to prefix log messages with when sent to stderr",
      "long_desc": "This is useful in container environments when combined with mon_cluster_log_to_stderr.  The mon log prefixes each line with the channel name (e.g., 'default', 'audit'), while log_stderr_prefix can be set to 'debug '.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "mon_cluster_log_to_stderr"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "log_to_syslog": {
      "name": "log_to_syslog",
      "type": "bool",
      "level": "basic",
      "desc": "send log lines to syslog facility",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "err_to_syslog": {
      "name": "err_to_syslog",
      "type": "bool",
      "level": "basic",
      "desc": "send critical error log lines to syslog facility",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "log_flush_on_exit": {
      "name": "log_flush_on_exit",
      "type": "bool",
      "level": "advanced",
      "desc": "set a process exit handler to ensure the log is flushed on exit",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "log_stop_at_utilization": {
      "name": "log_stop_at_utilization",
      "type": "float",
      "level": "basic",
      "desc": "stop writing to the log file when device utilization reaches this ratio",
      "long_desc": "",
      "default": 0.96999999999999997,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "log_file"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "log_to_graylog": {
      "name": "log_to_graylog",
      "type": "bool",
      "level": "basic",
      "desc": "send log lines to remote graylog server",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "err_to_graylog",
        "log_graylog_host",
        "log_graylog_port"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "err_to_graylog": {
      "name": "err_to_graylog",
      "type": "bool",
      "level": "basic",
      "desc": "send critical error log lines to remote graylog server",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "log_to_graylog",
        "log_graylog_host",
        "log_graylog_port"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "log_graylog_host": {
      "name": "log_graylog_host",
      "type": "str",
      "level": "basic",
      "desc": "address or hostname of graylog server to log to",
      "long_desc": "",
      "default": "127.0.0.1",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "log_to_graylog",
        "err_to_graylog",
        "log_graylog_port"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "log_graylog_port": {
      "name": "log_graylog_port",
      "type": "int",
      "level": "basic",
      "desc": "port number for the remote graylog server",
      "long_desc": "",
      "default": 12201,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "log_graylog_host"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "log_to_journald": {
      "name": "log_to_journald",
      "type": "bool",
      "level": "basic",
      "desc": "send log lines to journald",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "err_to_journald"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "err_to_journald": {
      "name": "err_to_journald",
      "type": "bool",
      "level": "basic",
      "desc": "send critical error log lines to journald",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "log_to_journald"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "log_coarse_timestamps": {
      "name": "log_coarse_timestamps",
      "type": "bool",
      "level": "advanced",
      "desc": "timestamp log entries from coarse system clock to improve performance",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [
        "performance",
        "service"
      ],
      "services": [
        "common"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "clog_to_monitors": {
      "name": "clog_to_monitors",
      "type": "str",
      "level": "advanced",
      "desc": "Make daemons send cluster log messages to monitors",
      "long_desc": "",
      "default": "default=true",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "clog_to_syslog": {
      "name": "clog_to_syslog",
      "type": "str",
      "level": "advanced",
      "desc": "Make daemons send cluster log messages to syslog",
      "long_desc": "",
      "default": "false",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "clog_to_syslog_level": {
      "name": "clog_to_syslog_level",
      "type": "str",
      "level": "advanced",
      "desc": "Syslog level for cluster log messages",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [
        "clog_to_syslog"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "clog_to_syslog_facility": {
      "name": "clog_to_syslog_facility",
      "type": "str",
      "level": "advanced",
      "desc": "Syslog facility for cluster log messages",
      "long_desc": "",
      "default": "default=daemon audit=local0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [
        "clog_to_syslog"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "clog_to_graylog": {
      "name": "clog_to_graylog",
      "type": "str",
      "level": "advanced",
      "desc": "Make daemons send cluster log to graylog",
      "long_desc": "",
      "default": "false",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "clog_to_graylog_host": {
      "name": "clog_to_graylog_host",
      "type": "str",
      "level": "advanced",
      "desc": "Graylog host to cluster log messages",
      "long_desc": "",
      "default": "127.0.0.1",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [
        "clog_to_graylog"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "clog_to_graylog_port": {
      "name": "clog_to_graylog_port",
      "type": "str",
      "level": "advanced",
      "desc": "Graylog port number for cluster log messages",
      "long_desc": "",
      "default": "12201",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "mgr",
        "osd",
        "mds"
      ],
      "see_also": [
        "clog_to_graylog"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "enable_experimental_unrecoverable_data_corrupting_features": {
      "name": "enable_experimental_unrecoverable_data_corrupting_features",
      "type": "str",
      "level": "advanced",
      "desc": "Enable named (or all with '*') experimental features that may be untested, dangerous, and/or cause permanent data loss",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "plugin_dir": {
      "name": "plugin_dir",
      "type": "str",
      "level": "advanced",
      "desc": "Base directory for dynamically loaded plugins",
      "long_desc": "",
      "default": "/usr/lib64/ceph",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "compressor_zlib_isal": {
      "name": "compressor_zlib_isal",
      "type": "bool",
      "level": "advanced",
      "desc": "Use Intel ISA-L accelerated zlib implementation if available",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "compressor_zlib_level": {
      "name": "compressor_zlib_level",
      "type": "int",
      "level": "advanced",
      "desc": "Zlib compression level to use",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "compressor_zlib_winsize": {
      "name": "compressor_zlib_winsize",
      "type": "int",
      "level": "advanced",
      "desc": "Zlib compression winsize to use",
      "long_desc": "",
      "default": -15,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": -15,
      "max": 32,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "compressor_zstd_level": {
      "name": "compressor_zstd_level",
      "type": "int",
      "level": "advanced",
      "desc": "Zstd compression level to use",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "qat_compressor_enabled": {
      "name": "qat_compressor_enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable Intel QAT acceleration support for compression if available",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "qat_compressor_session_max_number": {
      "name": "qat_compressor_session_max_number",
      "type": "uint",
      "level": "advanced",
      "desc": "Set the maximum number of session within Qatzip when using QAT compressor",
      "long_desc": "",
      "default": 256,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "qat_compressor_busy_polling": {
      "name": "qat_compressor_busy_polling",
      "type": "bool",
      "level": "advanced",
      "desc": "Set QAT busy bolling to reduce latency at the cost of potentially increasing CPU usage",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "plugin_crypto_accelerator": {
      "name": "plugin_crypto_accelerator",
      "type": "str",
      "level": "advanced",
      "desc": "Crypto accelerator library to use",
      "long_desc": "",
      "default": "crypto_isal",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "openssl_engine_opts": {
      "name": "openssl_engine_opts",
      "type": "str",
      "level": "advanced",
      "desc": "Use engine for specific openssl algorithm",
      "long_desc": "Pass opts in this way: engine_id=engine1,dynamic_path=/some/path/engine1.so,default_algorithms=DIGESTS:engine_id=engine2,dynamic_path=/some/path/engine2.so,default_algorithms=CIPHERS,other_ctrl=other_value",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "mempool_debug": {
      "name": "mempool_debug",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "no_mon_update"
      ]
    }
  },
  {
    "thp": {
      "name": "thp",
      "type": "bool",
      "level": "dev",
      "desc": "enable transparent huge page (THP) support",
      "long_desc": "Ceph is known to suffer from memory fragmentation due to THP use. This is indicated by RSS usage above configured memory targets. Enabling THP is currently discouraged until selective use of THP by Ceph is implemented.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "key": {
      "name": "key",
      "type": "str",
      "level": "advanced",
      "desc": "Authentication key",
      "long_desc": "A CephX authentication key, base64 encoded.  It normally looks something like 'AQAtut9ZdMbNJBAAHz6yBAWyJyz2yYRyeMWDag=='.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "keyfile",
        "keyring"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "keyfile": {
      "name": "keyfile",
      "type": "str",
      "level": "advanced",
      "desc": "Path to a file containing a key",
      "long_desc": "The file should contain a CephX authentication key and optionally a trailing newline, but nothing else.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "key"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "keyring": {
      "name": "keyring",
      "type": "str",
      "level": "advanced",
      "desc": "Path to a keyring file.",
      "long_desc": "A keyring file is an INI-style formatted file where the section names are client or daemon names (e.g., 'osd.0') and each section contains a 'key' property with CephX authentication key as the value.",
      "default": "/etc/ceph/$cluster.$name.keyring,/etc/ceph/$cluster.keyring,/etc/ceph/keyring,/etc/ceph/keyring.bin",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "key",
        "keyfile"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "heartbeat_interval": {
      "name": "heartbeat_interval",
      "type": "int",
      "level": "advanced",
      "desc": "Frequency of internal heartbeat checks (seconds)",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "heartbeat_file": {
      "name": "heartbeat_file",
      "type": "str",
      "level": "advanced",
      "desc": "File to touch on successful internal heartbeat",
      "long_desc": "If set, this file will be touched every time an internal heartbeat check succeeds.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "heartbeat_interval"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "heartbeat_inject_failure": {
      "name": "heartbeat_inject_failure",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "perf": {
      "name": "perf",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable internal performance metrics",
      "long_desc": "If enabled, collect and expose internal health metrics",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_type": {
      "name": "ms_type",
      "type": "str",
      "level": "advanced",
      "desc": "Messenger implementation to use for network communication",
      "long_desc": "",
      "default": "async+posix",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "ms_public_type": {
      "name": "ms_public_type",
      "type": "str",
      "level": "advanced",
      "desc": "Messenger implementation to use for the public network",
      "long_desc": "If not specified, use ms_type",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_type"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "ms_cluster_type": {
      "name": "ms_cluster_type",
      "type": "str",
      "level": "advanced",
      "desc": "Messenger implementation to use for the internal cluster network",
      "long_desc": "If not specified, use ms_type",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_type"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "ms_mon_cluster_mode": {
      "name": "ms_mon_cluster_mode",
      "type": "str",
      "level": "basic",
      "desc": "Connection modes (crc, secure) for intra-mon connections in order of preference",
      "long_desc": "",
      "default": "secure crc",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_mon_service_mode",
        "ms_mon_client_mode",
        "ms_service_mode",
        "ms_cluster_mode",
        "ms_client_mode"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "ms_mon_service_mode": {
      "name": "ms_mon_service_mode",
      "type": "str",
      "level": "basic",
      "desc": "Allowed connection modes (crc, secure) for connections to mons",
      "long_desc": "",
      "default": "secure crc",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_service_mode",
        "ms_mon_cluster_mode",
        "ms_mon_client_mode",
        "ms_cluster_mode",
        "ms_client_mode"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "ms_mon_client_mode": {
      "name": "ms_mon_client_mode",
      "type": "str",
      "level": "basic",
      "desc": "Connection modes (crc, secure) for connections from clients to monitors in order of preference",
      "long_desc": "",
      "default": "secure crc",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_mon_service_mode",
        "ms_mon_cluster_mode",
        "ms_service_mode",
        "ms_cluster_mode",
        "ms_client_mode"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "ms_cluster_mode": {
      "name": "ms_cluster_mode",
      "type": "str",
      "level": "basic",
      "desc": "Connection modes (crc, secure) for intra-cluster connections in order of preference",
      "long_desc": "",
      "default": "crc secure",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_service_mode",
        "ms_client_mode"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "ms_service_mode": {
      "name": "ms_service_mode",
      "type": "str",
      "level": "basic",
      "desc": "Allowed connection modes (crc, secure) for connections to daemons",
      "long_desc": "",
      "default": "crc secure",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_cluster_mode",
        "ms_client_mode"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "ms_client_mode": {
      "name": "ms_client_mode",
      "type": "str",
      "level": "basic",
      "desc": "Connection modes (crc, secure) for connections from clients in order of preference",
      "long_desc": "",
      "default": "crc secure",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_cluster_mode",
        "ms_service_mode"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "ms_osd_compress_mode": {
      "name": "ms_osd_compress_mode",
      "type": "str",
      "level": "advanced",
      "desc": "Compression policy to use in Messenger for communicating with OSD",
      "long_desc": "",
      "default": "none",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "ms_compress_secure"
      ],
      "enum_values": [
        "none",
        "force"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "ms_osd_compress_min_size": {
      "name": "ms_osd_compress_min_size",
      "type": "uint",
      "level": "advanced",
      "desc": "Minimal message size eligable for on-wire compression",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "ms_osd_compress_mode"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "ms_osd_compression_algorithm": {
      "name": "ms_osd_compression_algorithm",
      "type": "str",
      "level": "advanced",
      "desc": "Compression algorithm to use in Messenger when communicating with OSD",
      "long_desc": "Compression algorithm for connections with OSD in order of preference Although the default value is set to snappy, a list (like snappy zlib zstd etc.) is acceptable as well.",
      "default": "snappy",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "ms_osd_compress_mode"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "ms_compress_secure": {
      "name": "ms_compress_secure",
      "type": "bool",
      "level": "advanced",
      "desc": "Allowing compression when on-wire encryption is enabled",
      "long_desc": "Combining encryption with compression reduces the level of security of messages between peers. In case both encryption and compression are enabled, compression setting will be ignored and message will not be compressed. This behaviour can be override using this setting.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_osd_compress_mode"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "ms_learn_addr_from_peer": {
      "name": "ms_learn_addr_from_peer",
      "type": "bool",
      "level": "advanced",
      "desc": "Learn address from what IP our first peer thinks we connect from",
      "long_desc": "Use the IP address our first peer (usually a monitor) sees that we are connecting from.  This is useful if a client is behind some sort of NAT and we want to see it identified by its local (not NATed) address.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_tcp_nodelay": {
      "name": "ms_tcp_nodelay",
      "type": "bool",
      "level": "advanced",
      "desc": "Disable Nagle's algorithm and send queued network traffic immediately",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_tcp_rcvbuf": {
      "name": "ms_tcp_rcvbuf",
      "type": "size",
      "level": "advanced",
      "desc": "Size of TCP socket receive buffer",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_tcp_prefetch_max_size": {
      "name": "ms_tcp_prefetch_max_size",
      "type": "size",
      "level": "advanced",
      "desc": "Maximum amount of data to prefetch out of the socket receive buffer",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_initial_backoff": {
      "name": "ms_initial_backoff",
      "type": "float",
      "level": "advanced",
      "desc": "Initial backoff after a network error is detected (seconds)",
      "long_desc": "",
      "default": 0.20000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_max_backoff": {
      "name": "ms_max_backoff",
      "type": "float",
      "level": "advanced",
      "desc": "Maximum backoff after a network error before retrying (seconds)",
      "long_desc": "",
      "default": 15,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_initial_backoff"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_crc_data": {
      "name": "ms_crc_data",
      "type": "bool",
      "level": "dev",
      "desc": "Set and/or verify crc32c checksum on data payload sent over network",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_crc_header": {
      "name": "ms_crc_header",
      "type": "bool",
      "level": "dev",
      "desc": "Set and/or verify crc32c checksum on header payload sent over network",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_die_on_bad_msg": {
      "name": "ms_die_on_bad_msg",
      "type": "bool",
      "level": "dev",
      "desc": "Induce a daemon crash/exit when a bad network message is received",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_die_on_unhandled_msg": {
      "name": "ms_die_on_unhandled_msg",
      "type": "bool",
      "level": "dev",
      "desc": "Induce a daemon crash/exit when an unrecognized message is received",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_die_on_old_message": {
      "name": "ms_die_on_old_message",
      "type": "bool",
      "level": "dev",
      "desc": "Induce a daemon crash/exit when a old, undecodable message is received",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_die_on_skipped_message": {
      "name": "ms_die_on_skipped_message",
      "type": "bool",
      "level": "dev",
      "desc": "Induce a daemon crash/exit if sender skips a message sequence number",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_die_on_bug": {
      "name": "ms_die_on_bug",
      "type": "bool",
      "level": "dev",
      "desc": "Induce a crash/exit on various bugs (for testing purposes)",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_dispatch_throttle_bytes": {
      "name": "ms_dispatch_throttle_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "Limit messages that are read off the network but still being processed",
      "long_desc": "",
      "default": "104857600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_bind_ipv4": {
      "name": "ms_bind_ipv4",
      "type": "bool",
      "level": "advanced",
      "desc": "Bind servers to IPv4 address(es)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_bind_ipv6"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_bind_ipv6": {
      "name": "ms_bind_ipv6",
      "type": "bool",
      "level": "advanced",
      "desc": "Bind servers to IPv6 address(es)",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_bind_ipv4"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_bind_prefer_ipv4": {
      "name": "ms_bind_prefer_ipv4",
      "type": "bool",
      "level": "advanced",
      "desc": "Prefer IPV4 over IPV6 address(es)",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_bind_msgr1": {
      "name": "ms_bind_msgr1",
      "type": "bool",
      "level": "advanced",
      "desc": "Bind servers to msgr1 (legacy) protocol address(es)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_bind_msgr2"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_bind_msgr2": {
      "name": "ms_bind_msgr2",
      "type": "bool",
      "level": "advanced",
      "desc": "Bind servers to msgr2 (nautilus+) protocol address(es)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_bind_msgr1"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_bind_port_min": {
      "name": "ms_bind_port_min",
      "type": "int",
      "level": "advanced",
      "desc": "Lowest port number to bind daemon(s) to",
      "long_desc": "",
      "default": 6800,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_bind_port_max": {
      "name": "ms_bind_port_max",
      "type": "int",
      "level": "advanced",
      "desc": "Highest port number to bind daemon(s) to",
      "long_desc": "",
      "default": 7568,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_bind_retry_count": {
      "name": "ms_bind_retry_count",
      "type": "int",
      "level": "advanced",
      "desc": "Number of attempts to make while bind(2)ing to a port",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_bind_retry_delay": {
      "name": "ms_bind_retry_delay",
      "type": "int",
      "level": "advanced",
      "desc": "Delay between bind(2) attempts (seconds)",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_bind_before_connect": {
      "name": "ms_bind_before_connect",
      "type": "bool",
      "level": "advanced",
      "desc": "Call bind(2) on client sockets",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_tcp_listen_backlog": {
      "name": "ms_tcp_listen_backlog",
      "type": "int",
      "level": "advanced",
      "desc": "Size of queue of incoming connections for accept(2)",
      "long_desc": "",
      "default": 512,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_connection_ready_timeout": {
      "name": "ms_connection_ready_timeout",
      "type": "uint",
      "level": "advanced",
      "desc": "Time before we declare a not yet ready connection as dead (seconds)",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_connection_idle_timeout": {
      "name": "ms_connection_idle_timeout",
      "type": "uint",
      "level": "advanced",
      "desc": "Time before an idle connection is closed (seconds)",
      "long_desc": "",
      "default": 900,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_pq_max_tokens_per_priority": {
      "name": "ms_pq_max_tokens_per_priority",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 16777216,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_pq_min_cost": {
      "name": "ms_pq_min_cost",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_inject_socket_failures": {
      "name": "ms_inject_socket_failures",
      "type": "uint",
      "level": "dev",
      "desc": "Inject a socket failure every Nth socket operation",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_inject_delay_type": {
      "name": "ms_inject_delay_type",
      "type": "str",
      "level": "dev",
      "desc": "Entity type to inject delays for",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "ms_inject_delay_max": {
      "name": "ms_inject_delay_max",
      "type": "float",
      "level": "dev",
      "desc": "Max delay to inject",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_inject_delay_probability": {
      "name": "ms_inject_delay_probability",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_inject_internal_delays": {
      "name": "ms_inject_internal_delays",
      "type": "float",
      "level": "dev",
      "desc": "Inject various internal delays to induce races (seconds)",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_inject_network_congestion": {
      "name": "ms_inject_network_congestion",
      "type": "uint",
      "level": "dev",
      "desc": "Inject a network congestions that stuck with N times operations",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_blackhole_osd": {
      "name": "ms_blackhole_osd",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_blackhole_mon": {
      "name": "ms_blackhole_mon",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_blackhole_mds": {
      "name": "ms_blackhole_mds",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_blackhole_mgr": {
      "name": "ms_blackhole_mgr",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_blackhole_client": {
      "name": "ms_blackhole_client",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_dump_on_send": {
      "name": "ms_dump_on_send",
      "type": "bool",
      "level": "advanced",
      "desc": "Hexdump message to debug log on message send",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_dump_corrupt_message_level": {
      "name": "ms_dump_corrupt_message_level",
      "type": "int",
      "level": "advanced",
      "desc": "Log level at which to hexdump corrupt messages we receive",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_op_threads": {
      "name": "ms_async_op_threads",
      "type": "uint",
      "level": "advanced",
      "desc": "Threadpool size for AsyncMessenger (ms_type=async)",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 1,
      "max": 24,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_reap_threshold": {
      "name": "ms_async_reap_threshold",
      "type": "uint",
      "level": "dev",
      "desc": "number of deleted connections before we reap",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_device_name": {
      "name": "ms_async_rdma_device_name",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_async_rdma_enable_hugepage": {
      "name": "ms_async_rdma_enable_hugepage",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_buffer_size": {
      "name": "ms_async_rdma_buffer_size",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "131072",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_send_buffers": {
      "name": "ms_async_rdma_send_buffers",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_receive_buffers": {
      "name": "ms_async_rdma_receive_buffers",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 32768,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_receive_queue_len": {
      "name": "ms_async_rdma_receive_queue_len",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 4096,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_support_srq": {
      "name": "ms_async_rdma_support_srq",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_port_num": {
      "name": "ms_async_rdma_port_num",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_polling_us": {
      "name": "ms_async_rdma_polling_us",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_gid_idx": {
      "name": "ms_async_rdma_gid_idx",
      "type": "int",
      "level": "advanced",
      "desc": "use gid_idx to select GID for choosing RoCEv1 or RoCEv2",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_local_gid": {
      "name": "ms_async_rdma_local_gid",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_async_rdma_roce_ver": {
      "name": "ms_async_rdma_roce_ver",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_sl": {
      "name": "ms_async_rdma_sl",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_dscp": {
      "name": "ms_async_rdma_dscp",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 96,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_max_accept_failures": {
      "name": "ms_max_accept_failures",
      "type": "int",
      "level": "advanced",
      "desc": "The maximum number of consecutive failed accept() calls before considering the daemon is misconfigured and abort it.",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_cm": {
      "name": "ms_async_rdma_cm",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_async_rdma_type": {
      "name": "ms_async_rdma_type",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "ib",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_dpdk_port_id": {
      "name": "ms_dpdk_port_id",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_dpdk_coremask": {
      "name": "ms_dpdk_coremask",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "0xF",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "ms_async_op_threads"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_dpdk_memory_channel": {
      "name": "ms_dpdk_memory_channel",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "4",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_dpdk_hugepages": {
      "name": "ms_dpdk_hugepages",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_dpdk_pmd": {
      "name": "ms_dpdk_pmd",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_dpdk_devs_allowlist": {
      "name": "ms_dpdk_devs_allowlist",
      "type": "str",
      "level": "advanced",
      "desc": "NIC's PCIe address are allowed to use",
      "long_desc": "for a single NIC use ms_dpdk_devs_allowlist=-a 0000:7d:010 or --allow=0000:7d:010; for a bond nics use ms_dpdk_devs_allowlist=--allow=0000:7d:01.0 --allow=0000:7d:02.6 --vdev=net_bonding0,mode=2,slave=0000:7d:01.0,slave=0000:7d:02.6.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_dpdk_host_ipv4_addr": {
      "name": "ms_dpdk_host_ipv4_addr",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_dpdk_gateway_ipv4_addr": {
      "name": "ms_dpdk_gateway_ipv4_addr",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_dpdk_netmask_ipv4_addr": {
      "name": "ms_dpdk_netmask_ipv4_addr",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "ms_dpdk_lro": {
      "name": "ms_dpdk_lro",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_dpdk_enable_tso": {
      "name": "ms_dpdk_enable_tso",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_dpdk_hw_flow_control": {
      "name": "ms_dpdk_hw_flow_control",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_dpdk_hw_queue_weight": {
      "name": "ms_dpdk_hw_queue_weight",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_dpdk_debug_allow_loopback": {
      "name": "ms_dpdk_debug_allow_loopback",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "ms_dpdk_rx_buffer_count_per_core": {
      "name": "ms_dpdk_rx_buffer_count_per_core",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 8192,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "inject_early_sigterm": {
      "name": "inject_early_sigterm",
      "type": "bool",
      "level": "dev",
      "desc": "send ourselves a SIGTERM early during startup",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_initial_members": {
      "name": "mon_initial_members",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "cluster_create"
      ]
    }
  },
  {
    "mon_max_pg_per_osd": {
      "name": "mon_max_pg_per_osd",
      "type": "uint",
      "level": "advanced",
      "desc": "Max number of PGs per OSD the cluster will allow",
      "long_desc": "If the number of PGs per OSD exceeds this, a health warning will be visible in `ceph status`.  This is also used in automated PG management, as the threshold at which some pools' pg_num may be shrunk in order to enable increasing the pg_num of others.",
      "default": 250,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr",
        "mon"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_osd_full_ratio": {
      "name": "mon_osd_full_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "full ratio of OSDs to be set during initial creation of the cluster",
      "long_desc": "",
      "default": 0.94999999999999996,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "cluster_create"
      ]
    }
  },
  {
    "mon_osd_backfillfull_ratio": {
      "name": "mon_osd_backfillfull_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0.90000000000000002,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "cluster_create"
      ]
    }
  },
  {
    "mon_osd_nearfull_ratio": {
      "name": "mon_osd_nearfull_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "nearfull ratio for OSDs to be set during initial creation of cluster",
      "long_desc": "",
      "default": 0.84999999999999998,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "cluster_create"
      ]
    }
  },
  {
    "mon_osd_initial_require_min_compat_client": {
      "name": "mon_osd_initial_require_min_compat_client",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "luminous",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "cluster_create"
      ]
    }
  },
  {
    "mon_allow_pool_delete": {
      "name": "mon_allow_pool_delete",
      "type": "bool",
      "level": "advanced",
      "desc": "allow pool deletions",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_fake_pool_delete": {
      "name": "mon_fake_pool_delete",
      "type": "bool",
      "level": "advanced",
      "desc": "fake pool deletions by renaming the rados pool",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_globalid_prealloc": {
      "name": "mon_globalid_prealloc",
      "type": "uint",
      "level": "advanced",
      "desc": "number of globalid values to preallocate",
      "long_desc": "This setting caps how many new clients can authenticate with the cluster before the monitors have to perform a write to preallocate more.  Large values burn through the 64-bit ID space more quickly.",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_report_timeout": {
      "name": "mon_osd_report_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "time before OSDs who do not report to the mons are marked down (seconds)",
      "long_desc": "",
      "default": 900,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_insecure_global_id_reclaim": {
      "name": "mon_warn_on_insecure_global_id_reclaim",
      "type": "bool",
      "level": "advanced",
      "desc": "issue AUTH_INSECURE_GLOBAL_ID_RECLAIM health warning if any connected clients are insecurely reclaiming global_id",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_warn_on_insecure_global_id_reclaim_allowed",
        "auth_allow_insecure_global_id_reclaim",
        "auth_expose_insecure_global_id_reclaim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_insecure_global_id_reclaim_allowed": {
      "name": "mon_warn_on_insecure_global_id_reclaim_allowed",
      "type": "bool",
      "level": "advanced",
      "desc": "issue AUTH_INSECURE_GLOBAL_ID_RECLAIM_ALLOWED health warning if insecure global_id reclaim is allowed",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_warn_on_insecure_global_id_reclaim",
        "auth_allow_insecure_global_id_reclaim",
        "auth_expose_insecure_global_id_reclaim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_msgr2_not_enabled": {
      "name": "mon_warn_on_msgr2_not_enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "issue MON_MSGR2_NOT_ENABLED health warning if monitors are all running Nautilus but not all binding to a msgr2 port",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "ms_bind_msgr2"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_slow_ping_time": {
      "name": "mon_warn_on_slow_ping_time",
      "type": "float",
      "level": "advanced",
      "desc": "Override mon_warn_on_slow_ping_ratio with specified threshold in milliseconds",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr",
        "osd"
      ],
      "see_also": [
        "mon_warn_on_slow_ping_ratio"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_slow_ping_ratio": {
      "name": "mon_warn_on_slow_ping_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "Issue a health warning if heartbeat ping longer than percentage of osd_heartbeat_grace",
      "long_desc": "",
      "default": 0.050000000000000003,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr",
        "osd"
      ],
      "see_also": [
        "osd_heartbeat_grace",
        "mon_warn_on_slow_ping_time"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_max_snap_prune_per_epoch": {
      "name": "mon_max_snap_prune_per_epoch",
      "type": "uint",
      "level": "advanced",
      "desc": "max number of pruned snaps we will process in a single OSDMap epoch",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_min_osdmap_epochs": {
      "name": "mon_min_osdmap_epochs",
      "type": "int",
      "level": "advanced",
      "desc": "min number of OSDMaps to store",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_max_log_epochs": {
      "name": "mon_max_log_epochs",
      "type": "int",
      "level": "advanced",
      "desc": "max number of past cluster log epochs to store",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_max_mdsmap_epochs": {
      "name": "mon_max_mdsmap_epochs",
      "type": "int",
      "level": "advanced",
      "desc": "max number of FSMaps/MDSMaps to store",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_max_mgrmap_epochs": {
      "name": "mon_max_mgrmap_epochs",
      "type": "int",
      "level": "advanced",
      "desc": "max number of MgrMaps to store",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_max_osd": {
      "name": "mon_max_osd",
      "type": "int",
      "level": "advanced",
      "desc": "max number of OSDs in a cluster",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_probe_timeout": {
      "name": "mon_probe_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "timeout for querying other mons during bootstrap pre-election phase (seconds)",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_bytes": {
      "name": "mon_client_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "max bytes of outstanding client messages mon will read off the network",
      "long_desc": "",
      "default": "104857600",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_pg_not_scrubbed_ratio": {
      "name": "mon_warn_pg_not_scrubbed_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "Percentage of the scrub max interval past the scrub max interval to warn",
      "long_desc": "",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "osd_scrub_max_interval"
      ],
      "min": 0,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_pg_not_deep_scrubbed_ratio": {
      "name": "mon_warn_pg_not_deep_scrubbed_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "Percentage of the deep scrub interval past the deep scrub interval to warn",
      "long_desc": "",
      "default": 0.75,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "osd_deep_scrub_interval"
      ],
      "min": 0,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_scrub_interval": {
      "name": "mon_scrub_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "frequency for scrubbing mon database",
      "long_desc": "",
      "default": "86400",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_scrub_timeout": {
      "name": "mon_scrub_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "timeout to restart scrub of mon quorum participant does not respond for the latest chunk",
      "long_desc": "",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_scrub_max_keys": {
      "name": "mon_scrub_max_keys",
      "type": "int",
      "level": "advanced",
      "desc": "max keys per on scrub chunk/step",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_scrub_inject_crc_mismatch": {
      "name": "mon_scrub_inject_crc_mismatch",
      "type": "float",
      "level": "dev",
      "desc": "probability for injecting crc mismatches into mon scrub",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_scrub_inject_missing_keys": {
      "name": "mon_scrub_inject_missing_keys",
      "type": "float",
      "level": "dev",
      "desc": "probability for injecting missing keys into mon scrub",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_config_key_max_entry_size": {
      "name": "mon_config_key_max_entry_size",
      "type": "size",
      "level": "advanced",
      "desc": "Defines the number of bytes allowed to be held in a single config-key entry",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_sync_timeout": {
      "name": "mon_sync_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "timeout before canceling sync if syncing mon does not respond",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_sync_max_payload_size": {
      "name": "mon_sync_max_payload_size",
      "type": "size",
      "level": "advanced",
      "desc": "target max message payload for mon sync",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_sync_max_payload_keys": {
      "name": "mon_sync_max_payload_keys",
      "type": "int",
      "level": "advanced",
      "desc": "target max keys in message payload for mon sync",
      "long_desc": "",
      "default": 2000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_sync_debug": {
      "name": "mon_sync_debug",
      "type": "bool",
      "level": "dev",
      "desc": "enable extra debugging during mon sync",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_inject_sync_get_chunk_delay": {
      "name": "mon_inject_sync_get_chunk_delay",
      "type": "float",
      "level": "dev",
      "desc": "inject delay during sync (seconds)",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_min_down_reporters": {
      "name": "mon_osd_min_down_reporters",
      "type": "uint",
      "level": "advanced",
      "desc": "number of OSDs from different subtrees who need to report a down OSD for it to count",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osd_reporter_subtree_level"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_reporter_subtree_level": {
      "name": "mon_osd_reporter_subtree_level",
      "type": "str",
      "level": "advanced",
      "desc": "in which level of parent bucket the reporters are counted",
      "long_desc": "",
      "default": "host",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_osd_snap_trim_queue_warn_on": {
      "name": "mon_osd_snap_trim_queue_warn_on",
      "type": "int",
      "level": "advanced",
      "desc": "Warn when snap trim queue is that large (or larger).",
      "long_desc": "Warn when snap trim queue length for at least one PG crosses this value, as this is indicator of snap trimmer not keeping up, wasting disk space",
      "default": 32768,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_force_trim_to": {
      "name": "mon_osd_force_trim_to",
      "type": "int",
      "level": "dev",
      "desc": "force mons to trim osdmaps through this epoch",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_debug_extra_checks": {
      "name": "mon_debug_extra_checks",
      "type": "bool",
      "level": "dev",
      "desc": "Enable some additional monitor checks",
      "long_desc": "Enable some additional monitor checks that would be too expensive to run on production systems, or would only be relevant while testing or debugging.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_debug_block_osdmap_trim": {
      "name": "mon_debug_block_osdmap_trim",
      "type": "bool",
      "level": "dev",
      "desc": "Block OSDMap trimming while the option is enabled.",
      "long_desc": "Blocking OSDMap trimming may be quite helpful to easily reproduce states in which the monitor keeps (hundreds of) thousands of osdmaps.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_debug_deprecated_as_obsolete": {
      "name": "mon_debug_deprecated_as_obsolete",
      "type": "bool",
      "level": "dev",
      "desc": "treat deprecated mon commands as obsolete",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_debug_dump_transactions": {
      "name": "mon_debug_dump_transactions",
      "type": "bool",
      "level": "dev",
      "desc": "dump paxos transactions to log",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_debug_dump_location"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_debug_dump_json": {
      "name": "mon_debug_dump_json",
      "type": "bool",
      "level": "dev",
      "desc": "dump paxos transasctions to log as json",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_debug_dump_transactions"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_debug_dump_location": {
      "name": "mon_debug_dump_location",
      "type": "str",
      "level": "dev",
      "desc": "file to dump paxos transactions to",
      "long_desc": "",
      "default": "/var/log/ceph/$cluster-$name.tdump",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_debug_dump_transactions"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mon_debug_no_require_reef": {
      "name": "mon_debug_no_require_reef",
      "type": "bool",
      "level": "dev",
      "desc": "do not set reef feature for new mon clusters",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "cluster_create"
      ]
    }
  },
  {
    "mon_debug_no_require_squid": {
      "name": "mon_debug_no_require_squid",
      "type": "bool",
      "level": "dev",
      "desc": "do not set squid feature for new mon clusters",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "cluster_create"
      ]
    }
  },
  {
    "mon_debug_no_require_bluestore_for_ec_overwrites": {
      "name": "mon_debug_no_require_bluestore_for_ec_overwrites",
      "type": "bool",
      "level": "dev",
      "desc": "do not require bluestore OSDs to enable EC overwrites on a rados pool",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_debug_no_initial_persistent_features": {
      "name": "mon_debug_no_initial_persistent_features",
      "type": "bool",
      "level": "dev",
      "desc": "do not set any monmap features for new mon clusters",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "cluster_create"
      ]
    }
  },
  {
    "mon_inject_transaction_delay_max": {
      "name": "mon_inject_transaction_delay_max",
      "type": "float",
      "level": "dev",
      "desc": "max duration of injected delay in paxos",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_inject_transaction_delay_probability": {
      "name": "mon_inject_transaction_delay_probability",
      "type": "float",
      "level": "dev",
      "desc": "probability of injecting a delay in paxos",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_inject_pg_merge_bounce_probability": {
      "name": "mon_inject_pg_merge_bounce_probability",
      "type": "float",
      "level": "dev",
      "desc": "probability of failing and reverting a pg_num decrement",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_sync_provider_kill_at": {
      "name": "mon_sync_provider_kill_at",
      "type": "int",
      "level": "dev",
      "desc": "kill mon sync requester at specific point",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_sync_requester_kill_at": {
      "name": "mon_sync_requester_kill_at",
      "type": "int",
      "level": "dev",
      "desc": "kill mon sync requestor at specific point",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_force_quorum_join": {
      "name": "mon_force_quorum_join",
      "type": "bool",
      "level": "advanced",
      "desc": "force mon to rejoin quorum even though it was just removed",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_keyvaluedb": {
      "name": "mon_keyvaluedb",
      "type": "str",
      "level": "advanced",
      "desc": "database backend to use for the mon database",
      "long_desc": "",
      "default": "rocksdb",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [
        "rocksdb"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "mon_debug_unsafe_allow_tier_with_nonempty_snaps": {
      "name": "mon_debug_unsafe_allow_tier_with_nonempty_snaps",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "auth_cluster_required": {
      "name": "auth_cluster_required",
      "type": "str",
      "level": "advanced",
      "desc": "authentication methods required by the cluster",
      "long_desc": "",
      "default": "cephx",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "auth_service_required": {
      "name": "auth_service_required",
      "type": "str",
      "level": "advanced",
      "desc": "authentication methods required by service daemons",
      "long_desc": "",
      "default": "cephx",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "auth_client_required": {
      "name": "auth_client_required",
      "type": "str",
      "level": "advanced",
      "desc": "authentication methods allowed by clients",
      "long_desc": "",
      "default": "cephx, none",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "auth_supported": {
      "name": "auth_supported",
      "type": "str",
      "level": "advanced",
      "desc": "authentication methods required (deprecated)",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "max_rotating_auth_attempts": {
      "name": "max_rotating_auth_attempts",
      "type": "int",
      "level": "advanced",
      "desc": "number of attempts to initialize rotating keys before giving up",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rotating_keys_bootstrap_timeout": {
      "name": "rotating_keys_bootstrap_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "timeout for obtaining rotating keys during bootstrap phase (seconds)",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rotating_keys_renewal_timeout": {
      "name": "rotating_keys_renewal_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "timeout for updating rotating keys (seconds)",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephx_require_signatures": {
      "name": "cephx_require_signatures",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephx_require_version": {
      "name": "cephx_require_version",
      "type": "int",
      "level": "advanced",
      "desc": "Cephx version required (1 = pre-mimic, 2 = mimic+)",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephx_cluster_require_signatures": {
      "name": "cephx_cluster_require_signatures",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephx_cluster_require_version": {
      "name": "cephx_cluster_require_version",
      "type": "int",
      "level": "advanced",
      "desc": "Cephx version required by the cluster from clients (1 = pre-mimic, 2 = mimic+)",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephx_service_require_signatures": {
      "name": "cephx_service_require_signatures",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephx_service_require_version": {
      "name": "cephx_service_require_version",
      "type": "int",
      "level": "advanced",
      "desc": "Cephx version required from ceph services (1 = pre-mimic, 2 = mimic+)",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephx_sign_messages": {
      "name": "cephx_sign_messages",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "auth_mon_ticket_ttl": {
      "name": "auth_mon_ticket_ttl",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 259200,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "auth_service_ticket_ttl": {
      "name": "auth_service_ticket_ttl",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 3600,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "auth_allow_insecure_global_id_reclaim": {
      "name": "auth_allow_insecure_global_id_reclaim",
      "type": "bool",
      "level": "advanced",
      "desc": "Allow reclaiming global_id without presenting a valid ticket proving previous possession of that global_id",
      "long_desc": "Allowing unauthorized global_id (re)use poses a security risk. Unfortunately, older clients may omit their ticket on reconnects and therefore rely on this being allowed for preserving their global_id for the lifetime of the client instance. Setting this value to false would immediately prevent new connections from those clients (assuming auth_expose_insecure_global_id_reclaim set to true) and eventually break existing sessions as well (regardless of auth_expose_insecure_global_id_reclaim setting).",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "mon_warn_on_insecure_global_id_reclaim",
        "mon_warn_on_insecure_global_id_reclaim_allowed",
        "auth_expose_insecure_global_id_reclaim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "auth_expose_insecure_global_id_reclaim": {
      "name": "auth_expose_insecure_global_id_reclaim",
      "type": "bool",
      "level": "advanced",
      "desc": "Force older clients that may omit their ticket on reconnects to reconnect as part of establishing a session",
      "long_desc": "In permissive mode (auth_allow_insecure_global_id_reclaim set to true), this helps with identifying clients that are not patched. In enforcing mode (auth_allow_insecure_global_id_reclaim set to false), this is a fail-fast mechanism: don't establish a session that will almost inevitably be broken later.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "mon_warn_on_insecure_global_id_reclaim",
        "mon_warn_on_insecure_global_id_reclaim_allowed",
        "auth_allow_insecure_global_id_reclaim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "auth_debug": {
      "name": "auth_debug",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_hunt_parallel": {
      "name": "mon_client_hunt_parallel",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_target_rank": {
      "name": "mon_client_target_rank",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": -1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_client_hunt_interval": {
      "name": "mon_client_hunt_interval",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_log_interval": {
      "name": "mon_client_log_interval",
      "type": "float",
      "level": "advanced",
      "desc": "How frequently we send queued cluster log messages to mon",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_ping_interval": {
      "name": "mon_client_ping_interval",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_ping_timeout": {
      "name": "mon_client_ping_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_hunt_interval_backoff": {
      "name": "mon_client_hunt_interval_backoff",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1.5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_hunt_interval_min_multiple": {
      "name": "mon_client_hunt_interval_min_multiple",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_hunt_interval_max_multiple": {
      "name": "mon_client_hunt_interval_max_multiple",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_max_log_entries_per_message": {
      "name": "mon_client_max_log_entries_per_message",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_client_directed_command_retry": {
      "name": "mon_client_directed_command_retry",
      "type": "int",
      "level": "dev",
      "desc": "Number of times to try sending a command directed at a specific monitor",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "crush_location": {
      "name": "crush_location",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "crush_location_hook": {
      "name": "crush_location_hook",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "crush_location_hook_timeout": {
      "name": "crush_location_hook_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "objecter_tick_interval": {
      "name": "objecter_tick_interval",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "objecter_timeout": {
      "name": "objecter_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "Seconds before in-flight op is considered 'laggy' and we query mon for the latest OSDMap",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "objecter_inflight_op_bytes": {
      "name": "objecter_inflight_op_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "Max in-flight data in bytes (both directions)",
      "long_desc": "",
      "default": "104857600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "objecter_inflight_ops": {
      "name": "objecter_inflight_ops",
      "type": "uint",
      "level": "advanced",
      "desc": "Max in-flight operations",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "objecter_completion_locks_per_session": {
      "name": "objecter_completion_locks_per_session",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "objecter_inject_no_watch_ping": {
      "name": "objecter_inject_no_watch_ping",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "objecter_retry_writes_after_first_reply": {
      "name": "objecter_retry_writes_after_first_reply",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "objecter_debug_inject_relock_delay": {
      "name": "objecter_debug_inject_relock_delay",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filer_max_purge_ops": {
      "name": "filer_max_purge_ops",
      "type": "uint",
      "level": "advanced",
      "desc": "Max in-flight operations for purging a striped range (e.g., MDS journal)",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filer_max_truncate_ops": {
      "name": "filer_max_truncate_ops",
      "type": "uint",
      "level": "advanced",
      "desc": "Max in-flight operations for truncating/deleting a striped sequence (e.g., MDS journal)",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journaler_write_head_interval": {
      "name": "journaler_write_head_interval",
      "type": "int",
      "level": "advanced",
      "desc": "Interval in seconds between journal header updates (to help bound replay time)",
      "long_desc": "",
      "default": 15,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journaler_prefetch_periods": {
      "name": "journaler_prefetch_periods",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of striping periods to prefetch while reading MDS journal",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 2,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journaler_prezero_periods": {
      "name": "journaler_prezero_periods",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of striping periods to zero head of MDS journal write position",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 2,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_calc_pg_upmaps_aggressively": {
      "name": "osd_calc_pg_upmaps_aggressively",
      "type": "bool",
      "level": "advanced",
      "desc": "try to calculate PG upmaps more aggressively, e.g., by doing a fairly exhaustive search of existing PGs that can be unmapped or upmapped",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_calc_pg_upmaps_aggressively_fast": {
      "name": "osd_calc_pg_upmaps_aggressively_fast",
      "type": "bool",
      "level": "advanced",
      "desc": "Prevent very long (>10 minutes) calculations in some extreme cases (applicable only to aggressive mode)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_calc_pg_upmaps_local_fallback_retries": {
      "name": "osd_calc_pg_upmaps_local_fallback_retries",
      "type": "uint",
      "level": "advanced",
      "desc": "Maximum number of PGs we can attempt to unmap or upmap for a specific overfull or underfull osd per iteration ",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_crush_chooseleaf_type": {
      "name": "osd_crush_chooseleaf_type",
      "type": "int",
      "level": "dev",
      "desc": "default chooseleaf type for osdmaptool --create",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "cluster_create"
      ]
    }
  },
  {
    "osd_pool_use_gmt_hitset": {
      "name": "osd_pool_use_gmt_hitset",
      "type": "bool",
      "level": "dev",
      "desc": "use UTC for hitset timestamps",
      "long_desc": "This setting only exists for compatibility with hammer (and older) clusters.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_ec_fast_read": {
      "name": "osd_pool_default_ec_fast_read",
      "type": "bool",
      "level": "advanced",
      "desc": "set ec_fast_read for new erasure-coded pools",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_crush_rule": {
      "name": "osd_pool_default_crush_rule",
      "type": "int",
      "level": "advanced",
      "desc": "CRUSH rule for newly created pools",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_size": {
      "name": "osd_pool_default_size",
      "type": "uint",
      "level": "advanced",
      "desc": "the number of copies of an object for new replicated pools",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 0,
      "max": 10,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_pool_default_min_size": {
      "name": "osd_pool_default_min_size",
      "type": "uint",
      "level": "advanced",
      "desc": "the minimal number of copies allowed to write to a degraded pool for new replicated pools",
      "long_desc": "0 means no specific default; ceph will use size-size/2",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "osd_pool_default_size"
      ],
      "min": 0,
      "max": 255,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_pool_default_pg_num": {
      "name": "osd_pool_default_pg_num",
      "type": "uint",
      "level": "advanced",
      "desc": "number of PGs for new pools",
      "long_desc": "With default value of `osd_pool_default_pg_autoscale_mode` being `on` the number of PGs for new pools will start out with 1 pg, unless the user specifies the pg_num.",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "osd_pool_default_pg_autoscale_mode"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_pool_default_pgp_num": {
      "name": "osd_pool_default_pgp_num",
      "type": "uint",
      "level": "advanced",
      "desc": "number of PGs for placement purposes (0 to match pg_num)",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "osd_pool_default_pg_num",
        "osd_pool_default_pg_autoscale_mode"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_pool_default_type": {
      "name": "osd_pool_default_type",
      "type": "str",
      "level": "advanced",
      "desc": "default type of pool to create",
      "long_desc": "",
      "default": "replicated",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [
        "replicated",
        "erasure"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_pool_default_erasure_code_profile": {
      "name": "osd_pool_default_erasure_code_profile",
      "type": "str",
      "level": "advanced",
      "desc": "default erasure code profile for new erasure-coded pools",
      "long_desc": "",
      "default": "plugin=jerasure technique=reed_sol_van k=2 m=2",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_pool_default_read_ratio": {
      "name": "osd_pool_default_read_ratio",
      "type": "uint",
      "level": "advanced",
      "desc": "Default read ratio (the percent of read IOs out of all IOs) for a pool.",
      "long_desc": "Default read ratio (the percent of read IOs out of all IOs) for a pool. applicable to replicated pools only. This value is used to improve read balancing when OSDs have different weights.",
      "default": 70,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_erasure_code_plugins": {
      "name": "osd_erasure_code_plugins",
      "type": "str",
      "level": "advanced",
      "desc": "erasure code plugins to load",
      "long_desc": "",
      "default": "jerasure lrc",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_pool_default_flags": {
      "name": "osd_pool_default_flags",
      "type": "int",
      "level": "dev",
      "desc": "(integer) flags to set on new pools",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_flag_hashpspool": {
      "name": "osd_pool_default_flag_hashpspool",
      "type": "bool",
      "level": "advanced",
      "desc": "set hashpspool (better hashing scheme) flag on new pools",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_flag_nodelete": {
      "name": "osd_pool_default_flag_nodelete",
      "type": "bool",
      "level": "advanced",
      "desc": "set nodelete flag on new pools",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_flag_nopgchange": {
      "name": "osd_pool_default_flag_nopgchange",
      "type": "bool",
      "level": "advanced",
      "desc": "set nopgchange flag on new pools",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_flag_nosizechange": {
      "name": "osd_pool_default_flag_nosizechange",
      "type": "bool",
      "level": "advanced",
      "desc": "set nosizechange flag on new pools",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_flag_bulk": {
      "name": "osd_pool_default_flag_bulk",
      "type": "bool",
      "level": "advanced",
      "desc": "set bulk flag on new pools",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_hit_set_bloom_fpp": {
      "name": "osd_pool_default_hit_set_bloom_fpp",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0.050000000000000003,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "osd_tier_default_cache_hit_set_type"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_cache_target_dirty_ratio": {
      "name": "osd_pool_default_cache_target_dirty_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0.40000000000000002,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_cache_target_dirty_high_ratio": {
      "name": "osd_pool_default_cache_target_dirty_high_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0.59999999999999998,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_cache_target_full_ratio": {
      "name": "osd_pool_default_cache_target_full_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0.80000000000000004,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_cache_min_flush_age": {
      "name": "osd_pool_default_cache_min_flush_age",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_cache_min_evict_age": {
      "name": "osd_pool_default_cache_min_evict_age",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_cache_max_evict_check_size": {
      "name": "osd_pool_default_cache_max_evict_check_size",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_pg_autoscale_mode": {
      "name": "osd_pool_default_pg_autoscale_mode",
      "type": "str",
      "level": "advanced",
      "desc": "Default PG autoscaling behavior for new pools",
      "long_desc": "With default value `on`, the autoscaler starts a new pool with 1 pg, unless the user specifies the pg_num.",
      "default": "on",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "off",
        "warn",
        "on"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_pool_default_read_lease_ratio": {
      "name": "osd_pool_default_read_lease_ratio",
      "type": "float",
      "level": "dev",
      "desc": "Default read_lease_ratio for a pool, as a multiple of osd_heartbeat_grace",
      "long_desc": "This should be <= 1.0 so that the read lease will have expired by the time we decide to mark a peer OSD down.",
      "default": 0.80000000000000004,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "osd_heartbeat_grace"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_hit_set_min_size": {
      "name": "osd_hit_set_min_size",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_hit_set_max_size": {
      "name": "osd_hit_set_max_size",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 100000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_hit_set_namespace": {
      "name": "osd_hit_set_namespace",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": ".ceph-internal",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "osd_tier_promote_max_objects_sec": {
      "name": "osd_tier_promote_max_objects_sec",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 25,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_tier_promote_max_bytes_sec": {
      "name": "osd_tier_promote_max_bytes_sec",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "5242880",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_tier_default_cache_mode": {
      "name": "osd_tier_default_cache_mode",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "writeback",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "none",
        "writeback",
        "forward",
        "readonly",
        "readforward",
        "readproxy",
        "proxy"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_tier_default_cache_hit_set_count": {
      "name": "osd_tier_default_cache_hit_set_count",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_tier_default_cache_hit_set_period": {
      "name": "osd_tier_default_cache_hit_set_period",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1200,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_tier_default_cache_hit_set_type": {
      "name": "osd_tier_default_cache_hit_set_type",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "bloom",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "bloom",
        "explicit_hash",
        "explicit_object"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_tier_default_cache_min_read_recency_for_promote": {
      "name": "osd_tier_default_cache_min_read_recency_for_promote",
      "type": "uint",
      "level": "advanced",
      "desc": "number of recent HitSets the object must appear in to be promoted (on read)",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_tier_default_cache_min_write_recency_for_promote": {
      "name": "osd_tier_default_cache_min_write_recency_for_promote",
      "type": "uint",
      "level": "advanced",
      "desc": "number of recent HitSets the object must appear in to be promoted (on write)",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_tier_default_cache_hit_set_grade_decay_rate": {
      "name": "osd_tier_default_cache_hit_set_grade_decay_rate",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_tier_default_cache_hit_set_search_last_n": {
      "name": "osd_tier_default_cache_hit_set_search_last_n",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_objecter_finishers": {
      "name": "osd_objecter_finishers",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_map_dedup": {
      "name": "osd_map_dedup",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_map_message_max": {
      "name": "osd_map_message_max",
      "type": "int",
      "level": "advanced",
      "desc": "maximum number of OSDMaps to include in a single message",
      "long_desc": "",
      "default": 40,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd",
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_map_message_max_bytes": {
      "name": "osd_map_message_max_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "maximum number of bytes worth of OSDMaps to include in a single message",
      "long_desc": "",
      "default": "10485760",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd",
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_ignore_stale_divergent_priors": {
      "name": "osd_ignore_stale_divergent_priors",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_heartbeat_interval": {
      "name": "osd_heartbeat_interval",
      "type": "int",
      "level": "dev",
      "desc": "Interval (in seconds) between peer pings",
      "long_desc": "",
      "default": 6,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 1,
      "max": 60,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_heartbeat_grace": {
      "name": "osd_heartbeat_grace",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_heartbeat_stale": {
      "name": "osd_heartbeat_stale",
      "type": "int",
      "level": "advanced",
      "desc": "Interval (in seconds) we mark an unresponsive heartbeat peer as stale.",
      "long_desc": "Automatically mark unresponsive heartbeat sessions as stale and tear them down. The primary benefit is that OSD doesn't need to keep a flood of blocked heartbeat messages around in memory.",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_heartbeat_use_min_delay_socket": {
      "name": "osd_heartbeat_use_min_delay_socket",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_heartbeat_min_size": {
      "name": "osd_heartbeat_min_size",
      "type": "size",
      "level": "advanced",
      "desc": "Minimum heartbeat packet size in bytes. Will add dummy payload if heartbeat packet is smaller than this.",
      "long_desc": "",
      "default": "2000",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_max_concurrent_snap_trims": {
      "name": "osd_pg_max_concurrent_snap_trims",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_trimming_pgs": {
      "name": "osd_max_trimming_pgs",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_heartbeat_min_healthy_ratio": {
      "name": "osd_heartbeat_min_healthy_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0.33000000000000002,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mon_heartbeat_interval": {
      "name": "osd_mon_heartbeat_interval",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mon_heartbeat_stat_stale": {
      "name": "osd_mon_heartbeat_stat_stale",
      "type": "int",
      "level": "advanced",
      "desc": "Stop reporting on heartbeat ping times not updated for this many seconds.",
      "long_desc": "Stop reporting on old heartbeat information unless this is set to zero",
      "default": 3600,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mon_report_interval": {
      "name": "osd_mon_report_interval",
      "type": "int",
      "level": "advanced",
      "desc": "Frequency of OSD reports to mon for peer failures, fullness status changes",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mon_report_max_in_flight": {
      "name": "osd_mon_report_max_in_flight",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_beacon_report_interval": {
      "name": "osd_beacon_report_interval",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_stat_report_interval_max_seconds": {
      "name": "osd_pg_stat_report_interval_max_seconds",
      "type": "int",
      "level": "advanced",
      "desc": "How often (in seconds) should PGs stats be collected.",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_stat_report_interval_max_epochs": {
      "name": "osd_pg_stat_report_interval_max_epochs",
      "type": "int",
      "level": "advanced",
      "desc": "The maximum number of epochs allowed to pass before PG stats are collected.",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_snap_prune_intervals_per_epoch": {
      "name": "osd_max_snap_prune_intervals_per_epoch",
      "type": "uint",
      "level": "dev",
      "desc": "Max number of snap intervals to report to mgr in pg_stat_t",
      "long_desc": "",
      "default": 512,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_default_data_pool_replay_window": {
      "name": "osd_default_data_pool_replay_window",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 45,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_auto_mark_unfound_lost": {
      "name": "osd_auto_mark_unfound_lost",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_check_for_log_corruption": {
      "name": "osd_check_for_log_corruption",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_use_stale_snap": {
      "name": "osd_use_stale_snap",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_rollback_to_cluster_snap": {
      "name": "osd_rollback_to_cluster_snap",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "osd_default_notify_timeout": {
      "name": "osd_default_notify_timeout",
      "type": "uint",
      "level": "advanced",
      "desc": "default number of seconds after which notify propagation times out. used if a client has not specified other value",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_kill_backfill_at": {
      "name": "osd_kill_backfill_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_epoch_persisted_max_stale": {
      "name": "osd_pg_epoch_persisted_max_stale",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 40,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_target_pg_log_entries_per_osd": {
      "name": "osd_target_pg_log_entries_per_osd",
      "type": "uint",
      "level": "dev",
      "desc": "target number of PG entries total on an OSD - limited per pg by the min and max options below",
      "long_desc": "",
      "default": 300000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "osd_max_pg_log_entries",
        "osd_min_pg_log_entries"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_min_pg_log_entries": {
      "name": "osd_min_pg_log_entries",
      "type": "uint",
      "level": "dev",
      "desc": "minimum number of entries to maintain in the PG log",
      "long_desc": "",
      "default": 250,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_max_pg_log_entries",
        "osd_pg_log_dups_tracked",
        "osd_target_pg_log_entries_per_osd"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_pg_log_entries": {
      "name": "osd_max_pg_log_entries",
      "type": "uint",
      "level": "dev",
      "desc": "maximum number of entries to maintain in the PG log",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_min_pg_log_entries",
        "osd_pg_log_dups_tracked",
        "osd_target_pg_log_entries_per_osd"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_log_dups_tracked": {
      "name": "osd_pg_log_dups_tracked",
      "type": "uint",
      "level": "dev",
      "desc": "how many versions back to track in order to detect duplicate ops; this is combined with both the regular pg log entries and additional minimal dup detection entries",
      "long_desc": "",
      "default": 3000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_min_pg_log_entries",
        "osd_max_pg_log_entries"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_object_clean_region_max_num_intervals": {
      "name": "osd_object_clean_region_max_num_intervals",
      "type": "int",
      "level": "dev",
      "desc": "number of intervals in clean_offsets",
      "long_desc": "partial recovery uses multiple intervals to record the clean part of the objectwhen the number of intervals is greater than osd_object_clean_region_max_num_intervals, minimum interval will be trimmed(0 will recovery the entire object data interval)",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_force_recovery_pg_log_entries_factor": {
      "name": "osd_force_recovery_pg_log_entries_factor",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1.3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_log_trim_min": {
      "name": "osd_pg_log_trim_min",
      "type": "uint",
      "level": "dev",
      "desc": "Minimum number of log entries to trim at once. This lets us trim in larger batches rather than with each write.",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "osd_max_pg_log_entries",
        "osd_min_pg_log_entries"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_force_auth_primary_missing_objects": {
      "name": "osd_force_auth_primary_missing_objects",
      "type": "uint",
      "level": "advanced",
      "desc": "Approximate missing objects above which to force auth_log_shard to be primary temporarily",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_async_recovery_min_cost": {
      "name": "osd_async_recovery_min_cost",
      "type": "uint",
      "level": "advanced",
      "desc": "A mixture measure of number of current log entries difference and historical missing objects,  above which we switch to use asynchronous recovery when appropriate",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_max_pg_per_osd_hard_ratio": {
      "name": "osd_max_pg_per_osd_hard_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "Maximum number of PG per OSD, a factor of 'mon_max_pg_per_osd'",
      "long_desc": "OSD will refuse to instantiate PG if the number of PG it serves exceeds this number.",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "mon_max_pg_per_osd"
      ],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_log_trim_max": {
      "name": "osd_pg_log_trim_max",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of entries to remove at once from the PG log",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_min_pg_log_entries",
        "osd_max_pg_log_entries"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_complaint_time": {
      "name": "osd_op_complaint_time",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_command_max_records": {
      "name": "osd_command_max_records",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 256,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_pg_blocked_by": {
      "name": "osd_max_pg_blocked_by",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 16,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_log_threshold": {
      "name": "osd_op_log_threshold",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_backoff_on_unfound": {
      "name": "osd_backoff_on_unfound",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_backoff_on_degraded": {
      "name": "osd_backoff_on_degraded",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_backoff_on_peering": {
      "name": "osd_backoff_on_peering",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_shutdown": {
      "name": "osd_debug_shutdown",
      "type": "bool",
      "level": "dev",
      "desc": "Turn up debug levels during shutdown",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_crash_on_ignored_backoff": {
      "name": "osd_debug_crash_on_ignored_backoff",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_inject_dispatch_delay_probability": {
      "name": "osd_debug_inject_dispatch_delay_probability",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_inject_dispatch_delay_duration": {
      "name": "osd_debug_inject_dispatch_delay_duration",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0.10000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_drop_ping_probability": {
      "name": "osd_debug_drop_ping_probability",
      "type": "float",
      "level": "dev",
      "desc": "N/A",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_drop_ping_duration": {
      "name": "osd_debug_drop_ping_duration",
      "type": "int",
      "level": "dev",
      "desc": "N/A",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_op_order": {
      "name": "osd_debug_op_order",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_verify_missing_on_start": {
      "name": "osd_debug_verify_missing_on_start",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_verify_snaps": {
      "name": "osd_debug_verify_snaps",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_verify_stray_on_activate": {
      "name": "osd_debug_verify_stray_on_activate",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_skip_full_check_in_backfill_reservation": {
      "name": "osd_debug_skip_full_check_in_backfill_reservation",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_reject_backfill_probability": {
      "name": "osd_debug_reject_backfill_probability",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_inject_copyfrom_error": {
      "name": "osd_debug_inject_copyfrom_error",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_misdirected_ops": {
      "name": "osd_debug_misdirected_ops",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_skip_full_check_in_recovery": {
      "name": "osd_debug_skip_full_check_in_recovery",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_random_push_read_error": {
      "name": "osd_debug_random_push_read_error",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_verify_cached_snaps": {
      "name": "osd_debug_verify_cached_snaps",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_deep_scrub_sleep": {
      "name": "osd_debug_deep_scrub_sleep",
      "type": "float",
      "level": "dev",
      "desc": "Inject an expensive sleep during deep scrub IO to make it easier to induce preemption",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_no_acting_change": {
      "name": "osd_debug_no_acting_change",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_no_purge_strays": {
      "name": "osd_debug_no_purge_strays",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_pretend_recovery_active": {
      "name": "osd_debug_pretend_recovery_active",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_enable_op_tracker": {
      "name": "osd_enable_op_tracker",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_num_op_tracker_shard": {
      "name": "osd_num_op_tracker_shard",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_history_size": {
      "name": "osd_op_history_size",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_history_duration": {
      "name": "osd_op_history_duration",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_history_slow_op_size": {
      "name": "osd_op_history_slow_op_size",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_history_slow_op_threshold": {
      "name": "osd_op_history_slow_op_threshold",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_target_transaction_size": {
      "name": "osd_target_transaction_size",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_failsafe_full_ratio": {
      "name": "osd_failsafe_full_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0.96999999999999997,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_fast_shutdown": {
      "name": "osd_fast_shutdown",
      "type": "bool",
      "level": "advanced",
      "desc": "Fast, immediate shutdown",
      "long_desc": "Setting this to false makes the OSD do a slower teardown of all state when it receives a SIGINT or SIGTERM or when shutting down for any other reason.  That slow shutdown is primarilyy useful for doing memory leak checking with valgrind.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_fast_shutdown_timeout": {
      "name": "osd_fast_shutdown_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "timeout in seconds for osd fast-shutdown (0 is unlimited)",
      "long_desc": "",
      "default": 15,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 0,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_fast_shutdown_notify_mon": {
      "name": "osd_fast_shutdown_notify_mon",
      "type": "bool",
      "level": "advanced",
      "desc": "Tell mon about OSD shutdown on immediate shutdown",
      "long_desc": "Tell the monitor the OSD is shutting down on immediate shutdown. This helps with cluster log messages from other OSDs reporting it immediately failed.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "osd_fast_shutdown",
        "osd_mon_shutdown_timeout"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_fast_fail_on_connection_refused": {
      "name": "osd_fast_fail_on_connection_refused",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_object_context_cache_count": {
      "name": "osd_pg_object_context_cache_count",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 64,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_tracing": {
      "name": "osd_tracing",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_function_tracing": {
      "name": "osd_function_tracing",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_fast_info": {
      "name": "osd_fast_info",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_pg_log_writeout": {
      "name": "osd_debug_pg_log_writeout",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_loop_before_reset_tphandle": {
      "name": "osd_loop_before_reset_tphandle",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 64,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "threadpool_default_timeout": {
      "name": "threadpool_default_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "threadpool_empty_queue_max_wait": {
      "name": "threadpool_empty_queue_max_wait",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_log_to_ceph_log": {
      "name": "rocksdb_log_to_ceph_log",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_cache_size": {
      "name": "rocksdb_cache_size",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "536870912",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "rocksdb_cache_row_ratio": {
      "name": "rocksdb_cache_row_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_cache_shard_bits": {
      "name": "rocksdb_cache_shard_bits",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_cache_type": {
      "name": "rocksdb_cache_type",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "binned_lru",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rocksdb_block_size": {
      "name": "rocksdb_block_size",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_perf": {
      "name": "rocksdb_perf",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_collect_compaction_stats": {
      "name": "rocksdb_collect_compaction_stats",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_collect_extended_stats": {
      "name": "rocksdb_collect_extended_stats",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_collect_memory_stats": {
      "name": "rocksdb_collect_memory_stats",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_delete_range_threshold": {
      "name": "rocksdb_delete_range_threshold",
      "type": "uint",
      "level": "advanced",
      "desc": "The number of keys required to invoke DeleteRange when deleting muliple keys.",
      "long_desc": "",
      "default": 1048576,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_bloom_bits_per_key": {
      "name": "rocksdb_bloom_bits_per_key",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of bits per key to use for RocksDB's bloom filters.",
      "long_desc": "RocksDB bloom filters can be used to quickly answer the question of whether or not a key may exist or definitely does not exist in a given RocksDB SST file without having to read all keys into memory.  Using a higher bit value decreases the likelihood of false positives at the expense of additional disk space and memory consumption when the filter is loaded into RAM.  The current default value of 20 was found to provide significant performance gains when getattr calls are made (such as during new object creation in bluestore) without significant memory overhead or cache pollution when combined with rocksdb partitioned index filters.  See: https://github.com/facebook/rocksdb/wiki/Partitioned-Index-Filters for more information.",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_cache_index_and_filter_blocks": {
      "name": "rocksdb_cache_index_and_filter_blocks",
      "type": "bool",
      "level": "dev",
      "desc": "Whether to cache indices and filters in block cache",
      "long_desc": "By default RocksDB will load an SST file's index and bloom filters into memory when it is opened and remove them from memory when an SST file is closed.  Thus, memory consumption by indices and bloom filters is directly tied to the number of concurrent SST files allowed to be kept open.  This option instead stores cached indicies and filters in the block cache where they directly compete with other cached data.  By default we set this option to true to better account for and bound rocksdb memory usage and keep filters in memory even when an SST file is closed.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_cache_index_and_filter_blocks_with_high_priority": {
      "name": "rocksdb_cache_index_and_filter_blocks_with_high_priority",
      "type": "bool",
      "level": "dev",
      "desc": "Whether to cache indices and filters in the block cache with high priority",
      "long_desc": "A downside of setting rocksdb_cache_index_and_filter_blocks to true is that regular data can push indices and filters out of memory.  Setting this option to true means they are cached with higher priority than other data and should typically stay in the block cache.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_pin_l0_filter_and_index_blocks_in_cache": {
      "name": "rocksdb_pin_l0_filter_and_index_blocks_in_cache",
      "type": "bool",
      "level": "dev",
      "desc": "Whether to pin Level 0 indices and bloom filters in the block cache",
      "long_desc": "A downside of setting rocksdb_cache_index_and_filter_blocks to true is that regular data can push indices and filters out of memory.  Setting this option to true means that level 0 SST files will always have their indices and filters pinned in the block cache.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_index_type": {
      "name": "rocksdb_index_type",
      "type": "str",
      "level": "dev",
      "desc": "Type of index for SST files: binary_search, hash_search, two_level",
      "long_desc": "This option controls the table index type.  binary_search is a space efficient index block that is optimized for block-search-based index. hash_search may improve prefix lookup performance at the expense of higher disk and memory usage and potentially slower compactions.  two_level is an experimental index type that uses two binary search indexes and works in conjunction with partition filters.  See: http://rocksdb.org/blog/2017/05/12/partitioned-index-filter.html",
      "default": "binary_search",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rocksdb_partition_filters": {
      "name": "rocksdb_partition_filters",
      "type": "bool",
      "level": "dev",
      "desc": "(experimental) partition SST index/filters into smaller blocks",
      "long_desc": "This is an experimental option for rocksdb that works in conjunction with two_level indices to avoid having to keep the entire filter/index in cache when cache_index_and_filter_blocks is true.  The idea is to keep a much smaller top-level index in heap/cache and then opportunistically cache the lower level indices.  See: https://github.com/facebook/rocksdb/wiki/Partitioned-Index-Filters",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_metadata_block_size": {
      "name": "rocksdb_metadata_block_size",
      "type": "size",
      "level": "dev",
      "desc": "The block size for index partitions. (0 = rocksdb default)",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_cf_compact_on_deletion": {
      "name": "rocksdb_cf_compact_on_deletion",
      "type": "bool",
      "level": "dev",
      "desc": "Compact the column family when a certain number of tombstones are observed within a given window.",
      "long_desc": "This setting instructs RocksDB to compact a column family when a certain number of tombstones are observed during iteration within a certain sliding window. For instance if rocksdb_cf_compact_on_deletion_sliding_window is 8192 and rocksdb_cf_compact_on_deletion_trigger is 4096,  then once 4096 tombstones are observed after iteration over 8192 entries, the column family will be compacted.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "rocksdb_cf_compact_on_deletion_sliding_window",
        "rocksdb_cf_compact_on_deletion_trigger"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_cf_compact_on_deletion_sliding_window": {
      "name": "rocksdb_cf_compact_on_deletion_sliding_window",
      "type": "int",
      "level": "dev",
      "desc": "The sliding window to use when rocksdb_cf_compact_on_deletion is enabled.",
      "long_desc": "",
      "default": 32768,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "rocksdb_cf_compact_on_deletion"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rocksdb_cf_compact_on_deletion_trigger": {
      "name": "rocksdb_cf_compact_on_deletion_trigger",
      "type": "int",
      "level": "dev",
      "desc": "The trigger to use when rocksdb_cf_compact_on_deletion is enabled.",
      "long_desc": "",
      "default": 16384,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "rocksdb_cf_compact_on_deletion"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_client_op_priority": {
      "name": "osd_client_op_priority",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 63,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recovery_op_priority": {
      "name": "osd_recovery_op_priority",
      "type": "uint",
      "level": "advanced",
      "desc": "Priority to use for recovery operations if not specified for the pool",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_peering_op_priority": {
      "name": "osd_peering_op_priority",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 255,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_snap_trim_priority": {
      "name": "osd_snap_trim_priority",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_snap_trim_cost": {
      "name": "osd_snap_trim_cost",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_delete_priority": {
      "name": "osd_pg_delete_priority",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_delete_cost": {
      "name": "osd_pg_delete_cost",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_priority": {
      "name": "osd_scrub_priority",
      "type": "uint",
      "level": "advanced",
      "desc": "Priority for scrub operations in work queue",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_cost": {
      "name": "osd_scrub_cost",
      "type": "size",
      "level": "advanced",
      "desc": "Cost for scrub operations in work queue",
      "long_desc": "",
      "default": "52428800",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_event_cost": {
      "name": "osd_scrub_event_cost",
      "type": "size",
      "level": "advanced",
      "desc": "Cost for each scrub operation, used when osd_op_queue=mclock_scheduler",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_requested_scrub_priority": {
      "name": "osd_requested_scrub_priority",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 120,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recovery_priority": {
      "name": "osd_recovery_priority",
      "type": "uint",
      "level": "advanced",
      "desc": "Priority of recovery in the work queue",
      "long_desc": "Not related to a pool's recovery_priority",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recovery_cost": {
      "name": "osd_recovery_cost",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "20971520",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recovery_op_warn_multiple": {
      "name": "osd_recovery_op_warn_multiple",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 16,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mon_shutdown_timeout": {
      "name": "osd_mon_shutdown_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_shutdown_pgref_assert": {
      "name": "osd_shutdown_pgref_assert",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_object_size": {
      "name": "osd_max_object_size",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "134217728",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_object_name_len": {
      "name": "osd_max_object_name_len",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 2048,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_object_namespace_len": {
      "name": "osd_max_object_namespace_len",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 256,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_attr_name_len": {
      "name": "osd_max_attr_name_len",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_attr_size": {
      "name": "osd_max_attr_size",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_omap_entries_per_request": {
      "name": "osd_max_omap_entries_per_request",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_omap_bytes_per_request": {
      "name": "osd_max_omap_bytes_per_request",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "1073741824",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_write_op_reply_len": {
      "name": "osd_max_write_op_reply_len",
      "type": "size",
      "level": "advanced",
      "desc": "Max size of the per-op payload for requests with the RETURNVEC flag set",
      "long_desc": "This value caps the amount of data (per op; a request may have many ops) that will be sent back to the client and recorded in the PG log.",
      "default": "64",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_objectstore": {
      "name": "osd_objectstore",
      "type": "str",
      "level": "advanced",
      "desc": "backend type for an OSD (like filestore or bluestore)",
      "long_desc": "",
      "default": "bluestore",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "bluestore",
        "filestore",
        "memstore",
        "kstore",
        "seastore",
        "cyanstore"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "osd_objectstore_tracing": {
      "name": "osd_objectstore_tracing",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_objectstore_fuse": {
      "name": "osd_objectstore_fuse",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_bench_small_size_max_iops": {
      "name": "osd_bench_small_size_max_iops",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_bench_large_size_max_throughput": {
      "name": "osd_bench_large_size_max_throughput",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "104857600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_bench_max_block_size": {
      "name": "osd_bench_max_block_size",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "67108864",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_bench_duration": {
      "name": "osd_bench_duration",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_blkin_trace_all": {
      "name": "osd_blkin_trace_all",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osdc_blkin_trace_all": {
      "name": "osdc_blkin_trace_all",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_discard_disconnected_ops": {
      "name": "osd_discard_disconnected_ops",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_memory_target": {
      "name": "osd_memory_target",
      "type": "size",
      "level": "basic",
      "desc": "When tcmalloc and cache autotuning is enabled, try to keep this many bytes mapped in memory.",
      "long_desc": "The minimum value must be at least equal to osd_memory_base + osd_memory_cache_min.",
      "default": "4294967296",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_autotune",
        "osd_memory_cache_min",
        "osd_memory_base",
        "osd_memory_target_autotune"
      ],
      "min": "939524096",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_memory_target_autotune": {
      "name": "osd_memory_target_autotune",
      "type": "bool",
      "level": "advanced",
      "desc": "If enabled, allow orchestrator to automatically tune osd_memory_target",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "osd_memory_target"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_memory_target_cgroup_limit_ratio": {
      "name": "osd_memory_target_cgroup_limit_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "Set the default value for osd_memory_target to the cgroup memory limit (if set) times this value",
      "long_desc": "A value of 0 disables this feature.",
      "default": 0.80000000000000004,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "osd_memory_target"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_memory_base": {
      "name": "osd_memory_base",
      "type": "size",
      "level": "dev",
      "desc": "When tcmalloc and cache autotuning is enabled, estimate the minimum amount of memory in bytes the OSD will need.",
      "long_desc": "",
      "default": "805306368",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_autotune"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_memory_expected_fragmentation": {
      "name": "osd_memory_expected_fragmentation",
      "type": "float",
      "level": "dev",
      "desc": "When tcmalloc and cache autotuning is enabled, estimate the percent of memory fragmentation.",
      "long_desc": "",
      "default": 0.14999999999999999,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_autotune"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_memory_cache_min": {
      "name": "osd_memory_cache_min",
      "type": "size",
      "level": "dev",
      "desc": "When tcmalloc and cache autotuning is enabled, set the minimum amount of memory used for caches.",
      "long_desc": "",
      "default": "134217728",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_autotune"
      ],
      "min": "134217728",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_memory_cache_resize_interval": {
      "name": "osd_memory_cache_resize_interval",
      "type": "float",
      "level": "dev",
      "desc": "When tcmalloc and cache autotuning is enabled, wait this many seconds between resizing caches.",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_autotune"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "memstore_device_bytes": {
      "name": "memstore_device_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "1073741824",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "memstore_page_set": {
      "name": "memstore_page_set",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "memstore_page_size": {
      "name": "memstore_page_size",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "memstore_debug_omit_block_device_write": {
      "name": "memstore_debug_omit_block_device_write",
      "type": "bool",
      "level": "dev",
      "desc": "write metadata only",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_debug_omit_block_device_write"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "objectstore_blackhole": {
      "name": "objectstore_blackhole",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_debug_inflight_ios": {
      "name": "bdev_debug_inflight_ios",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_inject_crash": {
      "name": "bdev_inject_crash",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_inject_crash_flush_delay": {
      "name": "bdev_inject_crash_flush_delay",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_aio": {
      "name": "bdev_aio",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_aio_poll_ms": {
      "name": "bdev_aio_poll_ms",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 250,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_aio_max_queue_depth": {
      "name": "bdev_aio_max_queue_depth",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_aio_reap_max": {
      "name": "bdev_aio_reap_max",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 16,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_block_size": {
      "name": "bdev_block_size",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_read_buffer_alignment": {
      "name": "bdev_read_buffer_alignment",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_read_preallocated_huge_buffers": {
      "name": "bdev_read_preallocated_huge_buffers",
      "type": "str",
      "level": "advanced",
      "desc": "description of pools arrangement for huge page-based read buffers",
      "long_desc": "Arrangement of preallocated, huge pages-based pools for reading from a KernelDevice. Applied to minimize size of scatter-gather lists sent to NICs. Targets really  big buffers (>= 2 or 4 MBs). Keep in mind the system must be configured accordingly (see /proc/sys/vm/nr_hugepages). Otherwise the OSD wil fail early. Beware BlueStore, by default, stores large chunks across many smaller blobs. Increasing bluestore_max_blob_size changes that, and thus allows the data to be read back into small number of huge page-backed buffers.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_max_blob_size"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bdev_debug_aio": {
      "name": "bdev_debug_aio",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_debug_aio_suicide_timeout": {
      "name": "bdev_debug_aio_suicide_timeout",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_debug_aio_log_age": {
      "name": "bdev_debug_aio_log_age",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_nvme_unbind_from_kernel": {
      "name": "bdev_nvme_unbind_from_kernel",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_enable_discard": {
      "name": "bdev_enable_discard",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_async_discard": {
      "name": "bdev_async_discard",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_flock_retry_interval": {
      "name": "bdev_flock_retry_interval",
      "type": "float",
      "level": "advanced",
      "desc": "interval to retry the flock",
      "long_desc": "",
      "default": 0.10000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_flock_retry": {
      "name": "bdev_flock_retry",
      "type": "uint",
      "level": "advanced",
      "desc": "times to retry the flock",
      "long_desc": "The number of times to retry on getting the block device lock. Programs such as systemd-udevd may compete with Ceph for this lock. 0 means 'unlimited'.",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_alloc_size": {
      "name": "bluefs_alloc_size",
      "type": "size",
      "level": "advanced",
      "desc": "Allocation unit size for DB and WAL devices",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_shared_alloc_size": {
      "name": "bluefs_shared_alloc_size",
      "type": "size",
      "level": "advanced",
      "desc": "Allocation unit size for primary/shared device",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_failed_shared_alloc_cooldown": {
      "name": "bluefs_failed_shared_alloc_cooldown",
      "type": "float",
      "level": "advanced",
      "desc": "duration(in seconds) untill the next attempt to use 'bluefs_shared_alloc_size' after facing ENOSPC failure.",
      "long_desc": "Cooldown period(in seconds) when BlueFS uses shared/slow device allocation size instead of \"bluefs_shared_alloc_size' one after facing recoverable (via fallback to smaller chunk size) ENOSPC failure. Intended primarily to avoid repetitive unsuccessful allocations which might be expensive.",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_max_prefetch": {
      "name": "bluefs_max_prefetch",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_min_log_runway": {
      "name": "bluefs_min_log_runway",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_max_log_runway": {
      "name": "bluefs_max_log_runway",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "4194304",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_log_compact_min_ratio": {
      "name": "bluefs_log_compact_min_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_log_compact_min_size": {
      "name": "bluefs_log_compact_min_size",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "16777216",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_min_flush_size": {
      "name": "bluefs_min_flush_size",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "524288",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_compact_log_sync": {
      "name": "bluefs_compact_log_sync",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_buffered_io": {
      "name": "bluefs_buffered_io",
      "type": "bool",
      "level": "advanced",
      "desc": "Enabled buffered IO for bluefs reads.",
      "long_desc": "When this option is enabled, bluefs will in some cases perform buffered reads.  This allows the kernel page cache to act as a secondary cache for things like RocksDB block reads.  For example, if the rocksdb block cache isn't large enough to hold all blocks during OMAP iteration, it may be possible to read them from page cache instead of from the disk.  This can dramatically improve performance when the osd_memory_target is too small to hold all entries in block cache but it does come with downsides.  It has been reported to occasionally cause excessive kernel swapping (and associated stalls) under certain workloads. Currently the best and most consistent performing combination appears to be enabling bluefs_buffered_io and disabling system level swap.  It is possible that this recommendation may change in the future however.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_sync_write": {
      "name": "bluefs_sync_write",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_allocator": {
      "name": "bluefs_allocator",
      "type": "str",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "hybrid",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "bitmap",
        "stupid",
        "avl",
        "hybrid"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluefs_log_replay_check_allocations": {
      "name": "bluefs_log_replay_check_allocations",
      "type": "bool",
      "level": "advanced",
      "desc": "Enables checks for allocations consistency during log replay",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_replay_recovery": {
      "name": "bluefs_replay_recovery",
      "type": "bool",
      "level": "dev",
      "desc": "Attempt to read bluefs log so large that it became unreadable.",
      "long_desc": "If BlueFS log grows to extreme sizes (200GB+) it is likely that it becames unreadable. This options enables heuristics that scans devices for missing data. DO NOT ENABLE BY DEFAULT",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_replay_recovery_disable_compact": {
      "name": "bluefs_replay_recovery_disable_compact",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluefs_check_for_zeros": {
      "name": "bluefs_check_for_zeros",
      "type": "bool",
      "level": "dev",
      "desc": "Check data read for suspicious pages",
      "long_desc": "Looks into data read to check if there is a 4K block entirely filled with zeros. If this happens, we re-read data. If there is difference, we print error to log.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_retry_disk_reads"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluefs_check_volume_selector_on_umount": {
      "name": "bluefs_check_volume_selector_on_umount",
      "type": "bool",
      "level": "dev",
      "desc": "Check validity of volume selector on umount",
      "long_desc": "Checks if volume selector did not diverge from the state it should be in. Reference is constructed from bluefs inode table. Asserts on inconsistency.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluefs_check_volume_selector_often": {
      "name": "bluefs_check_volume_selector_often",
      "type": "bool",
      "level": "dev",
      "desc": "Periodically check validity of volume selector",
      "long_desc": "Periodically checks if current volume selector does not diverge from the valid state. Reference is constructed from bluefs inode table. Asserts on inconsistency. This is debug feature.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluefs_check_volume_selector_on_umount"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "bluestore_bluefs": {
      "name": "bluestore_bluefs",
      "type": "bool",
      "level": "dev",
      "desc": "Use BlueFS to back rocksdb",
      "long_desc": "BlueFS allows rocksdb to share the same physical device(s) as the rest of BlueStore.  It should be used in all cases unless testing/developing an alternative metadata database for BlueStore.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_bluefs_env_mirror": {
      "name": "bluestore_bluefs_env_mirror",
      "type": "bool",
      "level": "dev",
      "desc": "Mirror bluefs data to file system for testing/validation",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_bluefs_max_free": {
      "name": "bluestore_bluefs_max_free",
      "type": "size",
      "level": "advanced",
      "desc": "Maximum free space allocated to BlueFS",
      "long_desc": "",
      "default": "10737418240",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_bluefs_alloc_failure_dump_interval": {
      "name": "bluestore_bluefs_alloc_failure_dump_interval",
      "type": "float",
      "level": "advanced",
      "desc": "How frequently (in seconds) to dump allocator on BlueFS space allocation failure",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_spdk_mem": {
      "name": "bluestore_spdk_mem",
      "type": "size",
      "level": "dev",
      "desc": "Amount of dpdk memory size in MB",
      "long_desc": "If running multiple SPDK instances per node, you must specify the amount of dpdk memory size in MB each instance will use, to make sure each instance uses its own dpdk memory",
      "default": "512",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_spdk_coremask": {
      "name": "bluestore_spdk_coremask",
      "type": "str",
      "level": "dev",
      "desc": "A hexadecimal bit mask of the cores to run on. Note the core numbering can change between platforms and should be determined beforehand",
      "long_desc": "",
      "default": "0x1",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_spdk_max_io_completion": {
      "name": "bluestore_spdk_max_io_completion",
      "type": "uint",
      "level": "dev",
      "desc": "Maximal I/Os to be batched completed while checking queue pair completions, 0 means let spdk library determine it",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_spdk_io_sleep": {
      "name": "bluestore_spdk_io_sleep",
      "type": "uint",
      "level": "dev",
      "desc": "Time period to wait if there is no completed I/O from polling",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_block_path": {
      "name": "bluestore_block_path",
      "type": "str",
      "level": "dev",
      "desc": "Path to block device/file",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_block_size": {
      "name": "bluestore_block_size",
      "type": "size",
      "level": "dev",
      "desc": "Size of file to create for backing bluestore",
      "long_desc": "",
      "default": "107374182400",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_block_create": {
      "name": "bluestore_block_create",
      "type": "bool",
      "level": "dev",
      "desc": "Create bluestore_block_path if it doesn't exist",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_block_path",
        "bluestore_block_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_block_db_path": {
      "name": "bluestore_block_db_path",
      "type": "str",
      "level": "dev",
      "desc": "Path for db block device",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_block_db_size": {
      "name": "bluestore_block_db_size",
      "type": "size",
      "level": "dev",
      "desc": "Size of file to create for bluestore_block_db_path",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_block_db_create": {
      "name": "bluestore_block_db_create",
      "type": "bool",
      "level": "dev",
      "desc": "Create bluestore_block_db_path if it doesn't exist",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_block_db_path",
        "bluestore_block_db_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_block_wal_path": {
      "name": "bluestore_block_wal_path",
      "type": "str",
      "level": "dev",
      "desc": "Path to block device/file backing bluefs wal",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_block_wal_size": {
      "name": "bluestore_block_wal_size",
      "type": "size",
      "level": "dev",
      "desc": "Size of file to create for bluestore_block_wal_path",
      "long_desc": "",
      "default": "100663296",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_block_wal_create": {
      "name": "bluestore_block_wal_create",
      "type": "bool",
      "level": "dev",
      "desc": "Create bluestore_block_wal_path if it doesn't exist",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_block_wal_path",
        "bluestore_block_wal_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_block_preallocate_file": {
      "name": "bluestore_block_preallocate_file",
      "type": "bool",
      "level": "dev",
      "desc": "Preallocate file created via bluestore_block*_create",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_ignore_data_csum": {
      "name": "bluestore_ignore_data_csum",
      "type": "bool",
      "level": "dev",
      "desc": "Ignore checksum errors on read and do not generate an EIO error",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_csum_type": {
      "name": "bluestore_csum_type",
      "type": "str",
      "level": "advanced",
      "desc": "Default checksum algorithm to use",
      "long_desc": "crc32c, xxhash32, and xxhash64 are available.  The _16 and _8 variants use only a subset of the bits for more compact (but less reliable) checksumming.",
      "default": "crc32c",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "none",
        "crc32c",
        "crc32c_16",
        "crc32c_8",
        "xxhash32",
        "xxhash64"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_retry_disk_reads": {
      "name": "bluestore_retry_disk_reads",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of read retries on checksum validation error",
      "long_desc": "Retries to read data from the disk this many times when checksum validation fails to handle spurious read errors gracefully.",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 0,
      "max": 255,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_min_alloc_size": {
      "name": "bluestore_min_alloc_size",
      "type": "uint",
      "level": "advanced",
      "desc": "Minimum allocation size to allocate for an object",
      "long_desc": "A smaller allocation size generally means less data is read and then rewritten when a copy-on-write operation is triggered (e.g., when writing to something that was recently snapshotted).  Similarly, less data is journaled before performing an overwrite (writes smaller than min_alloc_size must first pass through the BlueStore journal).  Larger values of min_alloc_size reduce the amount of metadata required to describe the on-disk layout and reduce overall fragmentation.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_min_alloc_size_hdd": {
      "name": "bluestore_min_alloc_size_hdd",
      "type": "size",
      "level": "advanced",
      "desc": "Default min_alloc_size value for rotational media",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_min_alloc_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_min_alloc_size_ssd": {
      "name": "bluestore_min_alloc_size_ssd",
      "type": "size",
      "level": "advanced",
      "desc": "Default min_alloc_size value for non-rotational (solid state)  media",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_min_alloc_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_use_optimal_io_size_for_min_alloc_size": {
      "name": "bluestore_use_optimal_io_size_for_min_alloc_size",
      "type": "bool",
      "level": "advanced",
      "desc": "Discover media optimal IO Size and use for min_alloc_size",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_min_alloc_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_max_alloc_size": {
      "name": "bluestore_max_alloc_size",
      "type": "size",
      "level": "advanced",
      "desc": "Maximum size of a single allocation (0 for no max)",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_prefer_deferred_size": {
      "name": "bluestore_prefer_deferred_size",
      "type": "size",
      "level": "advanced",
      "desc": "Writes smaller than this size will be written to the journal and then asynchronously written to the device.  This can be beneficial when using rotational media where seeks are expensive, and is helpful both with and without solid state journal/wal devices.",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_prefer_deferred_size_hdd": {
      "name": "bluestore_prefer_deferred_size_hdd",
      "type": "size",
      "level": "advanced",
      "desc": "Default bluestore_prefer_deferred_size for rotational media",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_prefer_deferred_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_prefer_deferred_size_ssd": {
      "name": "bluestore_prefer_deferred_size_ssd",
      "type": "size",
      "level": "advanced",
      "desc": "Default bluestore_prefer_deferred_size for non-rotational (solid state) media",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_prefer_deferred_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_compression_mode": {
      "name": "bluestore_compression_mode",
      "type": "str",
      "level": "advanced",
      "desc": "Default policy for using compression when pool does not specify",
      "long_desc": "'none' means never use compression.  'passive' means use compression when clients hint that data is compressible.  'aggressive' means use compression unless clients hint that data is not compressible.  This option is used when the per-pool property for the compression mode is not present.",
      "default": "none",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "none",
        "passive",
        "aggressive",
        "force"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_compression_algorithm": {
      "name": "bluestore_compression_algorithm",
      "type": "str",
      "level": "advanced",
      "desc": "Default compression algorithm to use when writing object data",
      "long_desc": "This controls the default compressor to use (if any) if the per-pool property is not set.  Note that zstd is *not* recommended for bluestore due to high CPU overhead when compressing small amounts of data.",
      "default": "snappy",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "snappy",
        "zlib",
        "zstd",
        "lz4"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_compression_min_blob_size": {
      "name": "bluestore_compression_min_blob_size",
      "type": "size",
      "level": "advanced",
      "desc": "Maximum chunk size to apply compression to when random access is expected for an object.",
      "long_desc": "Chunks larger than this are broken into smaller chunks before being compressed",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_compression_min_blob_size_hdd": {
      "name": "bluestore_compression_min_blob_size_hdd",
      "type": "size",
      "level": "advanced",
      "desc": "Default value of bluestore_compression_min_blob_size for rotational media",
      "long_desc": "",
      "default": "8192",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_compression_min_blob_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_compression_min_blob_size_ssd": {
      "name": "bluestore_compression_min_blob_size_ssd",
      "type": "size",
      "level": "advanced",
      "desc": "Default value of bluestore_compression_min_blob_size for non-rotational (solid state) media",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_compression_min_blob_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_compression_max_blob_size": {
      "name": "bluestore_compression_max_blob_size",
      "type": "size",
      "level": "advanced",
      "desc": "Maximum chunk size to apply compression to when non-random access is expected for an object.",
      "long_desc": "Chunks larger than this are broken into smaller chunks before being compressed",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_compression_max_blob_size_hdd": {
      "name": "bluestore_compression_max_blob_size_hdd",
      "type": "size",
      "level": "advanced",
      "desc": "Default value of bluestore_compression_max_blob_size for rotational media",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_compression_max_blob_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_compression_max_blob_size_ssd": {
      "name": "bluestore_compression_max_blob_size_ssd",
      "type": "size",
      "level": "advanced",
      "desc": "Default value of bluestore_compression_max_blob_size for non-rotational (solid state) media",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_compression_max_blob_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_gc_enable_blob_threshold": {
      "name": "bluestore_gc_enable_blob_threshold",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_gc_enable_total_threshold": {
      "name": "bluestore_gc_enable_total_threshold",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_max_blob_size": {
      "name": "bluestore_max_blob_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "Bluestore blobs are collections of extents (ie on-disk data) originating from one or more objects.  Blobs can be compressed, typically have checksum data, may be overwritten, may be shared (with an extent ref map), or split.  This setting controls the maximum size a blob is allowed to be.",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_max_blob_size_hdd": {
      "name": "bluestore_max_blob_size_hdd",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_max_blob_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_max_blob_size_ssd": {
      "name": "bluestore_max_blob_size_ssd",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_max_blob_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_compression_required_ratio": {
      "name": "bluestore_compression_required_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "Compression ratio required to store compressed data",
      "long_desc": "If we compress data and get less than this we discard the result and store the original uncompressed data.",
      "default": 0.875,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_extent_map_shard_max_size": {
      "name": "bluestore_extent_map_shard_max_size",
      "type": "size",
      "level": "dev",
      "desc": "Max size (bytes) for a single extent map shard before splitting",
      "long_desc": "",
      "default": "1200",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_extent_map_shard_target_size": {
      "name": "bluestore_extent_map_shard_target_size",
      "type": "size",
      "level": "dev",
      "desc": "Target size (bytes) for a single extent map shard",
      "long_desc": "",
      "default": "500",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_extent_map_shard_min_size": {
      "name": "bluestore_extent_map_shard_min_size",
      "type": "size",
      "level": "dev",
      "desc": "Min size (bytes) for a single extent map shard before merging",
      "long_desc": "",
      "default": "150",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_extent_map_shard_target_size_slop": {
      "name": "bluestore_extent_map_shard_target_size_slop",
      "type": "float",
      "level": "dev",
      "desc": "Ratio above/below target for a shard when trying to align to an existing extent or blob boundary",
      "long_desc": "",
      "default": 0.20000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_extent_map_inline_shard_prealloc_size": {
      "name": "bluestore_extent_map_inline_shard_prealloc_size",
      "type": "size",
      "level": "dev",
      "desc": "Preallocated buffer for inline shards",
      "long_desc": "",
      "default": "256",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_trim_interval": {
      "name": "bluestore_cache_trim_interval",
      "type": "float",
      "level": "advanced",
      "desc": "How frequently we trim the bluestore cache",
      "long_desc": "",
      "default": 0.050000000000000003,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_trim_max_skip_pinned": {
      "name": "bluestore_cache_trim_max_skip_pinned",
      "type": "uint",
      "level": "dev",
      "desc": "Max pinned cache entries we consider before giving up",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_type": {
      "name": "bluestore_cache_type",
      "type": "str",
      "level": "dev",
      "desc": "Cache replacement algorithm",
      "long_desc": "",
      "default": "2q",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "2q",
        "lru"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_2q_cache_kin_ratio": {
      "name": "bluestore_2q_cache_kin_ratio",
      "type": "float",
      "level": "dev",
      "desc": "2Q paper suggests .5",
      "long_desc": "",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_2q_cache_kout_ratio": {
      "name": "bluestore_2q_cache_kout_ratio",
      "type": "float",
      "level": "dev",
      "desc": "2Q paper suggests .5",
      "long_desc": "",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_size": {
      "name": "bluestore_cache_size",
      "type": "size",
      "level": "dev",
      "desc": "Cache size (in bytes) for BlueStore",
      "long_desc": "This includes data and metadata cached by BlueStore as well as memory devoted to rocksdb's cache(s).",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_size_hdd": {
      "name": "bluestore_cache_size_hdd",
      "type": "size",
      "level": "dev",
      "desc": "Default bluestore_cache_size for rotational media",
      "long_desc": "",
      "default": "1073741824",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_size_ssd": {
      "name": "bluestore_cache_size_ssd",
      "type": "size",
      "level": "dev",
      "desc": "Default bluestore_cache_size for non-rotational (solid state) media",
      "long_desc": "",
      "default": "3221225472",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_meta_ratio": {
      "name": "bluestore_cache_meta_ratio",
      "type": "float",
      "level": "dev",
      "desc": "Ratio of bluestore cache to devote to metadata",
      "long_desc": "",
      "default": 0.45000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_kv_ratio": {
      "name": "bluestore_cache_kv_ratio",
      "type": "float",
      "level": "dev",
      "desc": "Ratio of bluestore cache to devote to key/value database (RocksDB)",
      "long_desc": "",
      "default": 0.45000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_kv_onode_ratio": {
      "name": "bluestore_cache_kv_onode_ratio",
      "type": "float",
      "level": "dev",
      "desc": "Ratio of bluestore cache to devote to kv onode column family (rocksdb)",
      "long_desc": "",
      "default": 0.040000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_autotune": {
      "name": "bluestore_cache_autotune",
      "type": "bool",
      "level": "dev",
      "desc": "Automatically tune the ratio of caches while respecting min values.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_size",
        "bluestore_cache_meta_ratio"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_autotune_interval": {
      "name": "bluestore_cache_autotune_interval",
      "type": "float",
      "level": "dev",
      "desc": "The number of seconds to wait between rebalances when cache autotune is enabled.",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_autotune"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_age_bin_interval": {
      "name": "bluestore_cache_age_bin_interval",
      "type": "float",
      "level": "dev",
      "desc": "The duration (in seconds) represented by a single cache age bin.",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_age_bins_kv",
        "bluestore_cache_age_bins_kv_onode",
        "bluestore_cache_age_bins_meta",
        "bluestore_cache_age_bins_data"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_cache_age_bins_kv": {
      "name": "bluestore_cache_age_bins_kv",
      "type": "str",
      "level": "dev",
      "desc": "A 10 element, space separated list of age bins for kv cache",
      "long_desc": "",
      "default": "1 2 6 24 120 720 0 0 0 0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_age_bin_interval"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_cache_age_bins_kv_onode": {
      "name": "bluestore_cache_age_bins_kv_onode",
      "type": "str",
      "level": "dev",
      "desc": "A 10 element, space separated list of age bins for kv onode cache",
      "long_desc": "",
      "default": "0 0 0 0 0 0 0 0 0 720",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_age_bin_interval"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_cache_age_bins_meta": {
      "name": "bluestore_cache_age_bins_meta",
      "type": "str",
      "level": "dev",
      "desc": "A 10 element, space separated list of age bins for onode cache",
      "long_desc": "",
      "default": "1 2 6 24 120 720 0 0 0 0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_age_bin_interval"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_cache_age_bins_data": {
      "name": "bluestore_cache_age_bins_data",
      "type": "str",
      "level": "dev",
      "desc": "A 10 element, space separated list of age bins for data cache",
      "long_desc": "",
      "default": "1 2 6 24 120 720 0 0 0 0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_cache_age_bin_interval"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_alloc_stats_dump_interval": {
      "name": "bluestore_alloc_stats_dump_interval",
      "type": "float",
      "level": "dev",
      "desc": "The period (in second) for logging allocation statistics.",
      "long_desc": "",
      "default": 86400,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_kvbackend": {
      "name": "bluestore_kvbackend",
      "type": "str",
      "level": "dev",
      "desc": "Key value database to use for bluestore",
      "long_desc": "",
      "default": "rocksdb",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_elastic_shared_blobs": {
      "name": "bluestore_elastic_shared_blobs",
      "type": "bool",
      "level": "advanced",
      "desc": "Let bluestore to reuse existing shared blobs if possible",
      "long_desc": "Overwrites on snapped objects cause shared blob count to grow. It has a very negative performance effect. When enabled shared blob count is significantly reduced.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "bluestore_allocator": {
      "name": "bluestore_allocator",
      "type": "str",
      "level": "advanced",
      "desc": "Allocator policy",
      "long_desc": "Allocator to use for bluestore.  Stupid should only be used for testing.",
      "default": "hybrid",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "bitmap",
        "stupid",
        "avl",
        "hybrid"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_freelist_blocks_per_key": {
      "name": "bluestore_freelist_blocks_per_key",
      "type": "size",
      "level": "dev",
      "desc": "Block (and bits) per database key",
      "long_desc": "",
      "default": "128",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_bitmapallocator_blocks_per_zone": {
      "name": "bluestore_bitmapallocator_blocks_per_zone",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "1024",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_bitmapallocator_span_size": {
      "name": "bluestore_bitmapallocator_span_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "1024",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_max_deferred_txc": {
      "name": "bluestore_max_deferred_txc",
      "type": "uint",
      "level": "advanced",
      "desc": "Max transactions with deferred writes that can accumulate before we force flush deferred writes",
      "long_desc": "",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_max_defer_interval": {
      "name": "bluestore_max_defer_interval",
      "type": "float",
      "level": "advanced",
      "desc": "max duration to force deferred submit",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_rocksdb_options": {
      "name": "bluestore_rocksdb_options",
      "type": "str",
      "level": "advanced",
      "desc": "Full set of rocksdb settings to override",
      "long_desc": "",
      "default": "compression=kLZ4Compression,max_write_buffer_number=64,min_write_buffer_number_to_merge=6,compaction_style=kCompactionStyleLevel,write_buffer_size=16777216,max_background_jobs=4,level0_file_num_compaction_trigger=8,max_bytes_for_level_base=1073741824,max_bytes_for_level_multiplier=8,compaction_readahead_size=2MB,max_total_wal_size=1073741824,writable_file_max_buffer_size=0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_rocksdb_options_annex": {
      "name": "bluestore_rocksdb_options_annex",
      "type": "str",
      "level": "advanced",
      "desc": "An addition to bluestore_rocksdb_options. Allows setting rocksdb options without repeating the existing defaults.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_rocksdb_cf": {
      "name": "bluestore_rocksdb_cf",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable use of rocksdb column families for bluestore metadata",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_rocksdb_cfs": {
      "name": "bluestore_rocksdb_cfs",
      "type": "str",
      "level": "dev",
      "desc": "Definition of column families and their sharding",
      "long_desc": "Space separated list of elements: column_def [ '=' rocksdb_options ]. column_def := column_name [ '(' shard_count [ ',' hash_begin '-' [ hash_end ] ] ')' ]. Example: 'I=write_buffer_size=1048576 O(6) m(7,10-)'. Interval [hash_begin..hash_end) defines characters to use for hash calculation. Recommended hash ranges: O(0-13) P(0-8) m(0-16). Sharding of S,T,C,M,B prefixes is inadvised",
      "default": "m(3) p(3,0-12) O(3,0-13)=block_cache={type=binned_lru} L=min_write_buffer_number_to_merge=32 P=min_write_buffer_number_to_merge=32",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_qfsck_on_mount": {
      "name": "bluestore_qfsck_on_mount",
      "type": "bool",
      "level": "dev",
      "desc": "Run quick-fsck at mount comparing allocation-file to RocksDB allocation state",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_on_mount": {
      "name": "bluestore_fsck_on_mount",
      "type": "bool",
      "level": "dev",
      "desc": "Run fsck at mount",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_on_mount_deep": {
      "name": "bluestore_fsck_on_mount_deep",
      "type": "bool",
      "level": "dev",
      "desc": "Run deep fsck at mount when bluestore_fsck_on_mount is set to true",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_quick_fix_on_mount": {
      "name": "bluestore_fsck_quick_fix_on_mount",
      "type": "bool",
      "level": "dev",
      "desc": "Do quick-fix for the store at mount",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_on_umount": {
      "name": "bluestore_fsck_on_umount",
      "type": "bool",
      "level": "dev",
      "desc": "Run fsck at umount",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_allocation_from_file": {
      "name": "bluestore_allocation_from_file",
      "type": "bool",
      "level": "dev",
      "desc": "Remove allocation info from RocksDB and store the info in a new allocation file",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_inject_allocation_from_file_failure": {
      "name": "bluestore_debug_inject_allocation_from_file_failure",
      "type": "float",
      "level": "dev",
      "desc": "Enables random error injections when restoring allocation map from file.",
      "long_desc": "Specifies error injection probability for restoring allocation map from file hence causing full recovery. Intended primarily for testing.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_on_umount_deep": {
      "name": "bluestore_fsck_on_umount_deep",
      "type": "bool",
      "level": "dev",
      "desc": "Run deep fsck at umount when bluestore_fsck_on_umount is set to true",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_on_mkfs": {
      "name": "bluestore_fsck_on_mkfs",
      "type": "bool",
      "level": "dev",
      "desc": "Run fsck after mkfs",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_on_mkfs_deep": {
      "name": "bluestore_fsck_on_mkfs_deep",
      "type": "bool",
      "level": "dev",
      "desc": "Run deep fsck after mkfs",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_sync_submit_transaction": {
      "name": "bluestore_sync_submit_transaction",
      "type": "bool",
      "level": "dev",
      "desc": "Try to submit metadata transaction to rocksdb in queuing thread context",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_read_bytes_cap": {
      "name": "bluestore_fsck_read_bytes_cap",
      "type": "size",
      "level": "advanced",
      "desc": "Maximum bytes read at once by deep fsck",
      "long_desc": "",
      "default": "67108864",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_fsck_quick_fix_threads": {
      "name": "bluestore_fsck_quick_fix_threads",
      "type": "int",
      "level": "advanced",
      "desc": "Number of additional threads to perform quick-fix (shallow fsck) command",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_shared_blob_tracker_size": {
      "name": "bluestore_fsck_shared_blob_tracker_size",
      "type": "float",
      "level": "dev",
      "desc": "Size(a fraction of osd_memory_target, defaults to 128MB) of a hash table to track shared blobs ref counts. Higher the size, more precise is the tracker -> less overhead during the repair.",
      "long_desc": "",
      "default": 0.03125,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "osd_memory_target"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_throttle_bytes": {
      "name": "bluestore_throttle_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "Maximum bytes in flight before we throttle IO submission",
      "long_desc": "",
      "default": "67108864",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_throttle_deferred_bytes": {
      "name": "bluestore_throttle_deferred_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "Maximum bytes for deferred writes before we throttle IO submission",
      "long_desc": "",
      "default": "134217728",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_throttle_cost_per_io": {
      "name": "bluestore_throttle_cost_per_io",
      "type": "size",
      "level": "advanced",
      "desc": "Overhead added to transaction cost (in bytes) for each IO",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_throttle_cost_per_io_hdd": {
      "name": "bluestore_throttle_cost_per_io_hdd",
      "type": "uint",
      "level": "advanced",
      "desc": "Default bluestore_throttle_cost_per_io for rotational media",
      "long_desc": "",
      "default": 670000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_throttle_cost_per_io"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_throttle_cost_per_io_ssd": {
      "name": "bluestore_throttle_cost_per_io_ssd",
      "type": "uint",
      "level": "advanced",
      "desc": "Default bluestore_throttle_cost_per_io for non-rotation (solid state) media",
      "long_desc": "",
      "default": 4000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_throttle_cost_per_io"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_deferred_batch_ops": {
      "name": "bluestore_deferred_batch_ops",
      "type": "uint",
      "level": "advanced",
      "desc": "Max number of deferred writes before we flush the deferred write queue",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 0,
      "max": 65535,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_deferred_batch_ops_hdd": {
      "name": "bluestore_deferred_batch_ops_hdd",
      "type": "uint",
      "level": "advanced",
      "desc": "Default bluestore_deferred_batch_ops for rotational media",
      "long_desc": "",
      "default": 64,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_deferred_batch_ops"
      ],
      "min": 0,
      "max": 65535,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_deferred_batch_ops_ssd": {
      "name": "bluestore_deferred_batch_ops_ssd",
      "type": "uint",
      "level": "advanced",
      "desc": "Default bluestore_deferred_batch_ops for non-rotational (solid state) media",
      "long_desc": "",
      "default": 16,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_deferred_batch_ops"
      ],
      "min": 0,
      "max": 65535,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_nid_prealloc": {
      "name": "bluestore_nid_prealloc",
      "type": "int",
      "level": "dev",
      "desc": "Number of unique object ids to preallocate at a time",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_blobid_prealloc": {
      "name": "bluestore_blobid_prealloc",
      "type": "uint",
      "level": "dev",
      "desc": "Number of unique blob ids to preallocate at a time",
      "long_desc": "",
      "default": 10240,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_clone_cow": {
      "name": "bluestore_clone_cow",
      "type": "bool",
      "level": "advanced",
      "desc": "Use copy-on-write when cloning objects (versus reading and rewriting them at clone time)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_default_buffered_read": {
      "name": "bluestore_default_buffered_read",
      "type": "bool",
      "level": "advanced",
      "desc": "Cache read results by default (unless hinted NOCACHE or WONTNEED)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_default_buffered_write": {
      "name": "bluestore_default_buffered_write",
      "type": "bool",
      "level": "advanced",
      "desc": "Cache writes by default (unless hinted NOCACHE or WONTNEED)",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_debug_no_reuse_blocks": {
      "name": "bluestore_debug_no_reuse_blocks",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_small_allocations": {
      "name": "bluestore_debug_small_allocations",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_too_many_blobs_threshold": {
      "name": "bluestore_debug_too_many_blobs_threshold",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 24576,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_freelist": {
      "name": "bluestore_debug_freelist",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_prefill": {
      "name": "bluestore_debug_prefill",
      "type": "float",
      "level": "dev",
      "desc": "simulate fragmentation",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_prefragment_max": {
      "name": "bluestore_debug_prefragment_max",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_inject_read_err": {
      "name": "bluestore_debug_inject_read_err",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_randomize_serial_transaction": {
      "name": "bluestore_debug_randomize_serial_transaction",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_omit_block_device_write": {
      "name": "bluestore_debug_omit_block_device_write",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_fsck_abort": {
      "name": "bluestore_debug_fsck_abort",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_omit_kv_commit": {
      "name": "bluestore_debug_omit_kv_commit",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_permit_any_bdev_label": {
      "name": "bluestore_debug_permit_any_bdev_label",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_random_read_err": {
      "name": "bluestore_debug_random_read_err",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_inject_csum_err_probability": {
      "name": "bluestore_debug_inject_csum_err_probability",
      "type": "float",
      "level": "dev",
      "desc": "inject crc verification errors into bluestore device reads",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_legacy_omap": {
      "name": "bluestore_debug_legacy_omap",
      "type": "bool",
      "level": "dev",
      "desc": "Allows mkfs to create OSD in legacy OMAP naming mode (neither per-pool nor per-pg). This is intended primarily for developers' purposes. The resulting OSD might/would be transformed to the currrently default 'per-pg' format when BlueStore's quick-fix or repair are applied.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_error_on_no_per_pool_stats": {
      "name": "bluestore_fsck_error_on_no_per_pool_stats",
      "type": "bool",
      "level": "advanced",
      "desc": "Make fsck error (instead of warn) when bluestore lacks per-pool stats, e.g., after an upgrade",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_warn_on_bluefs_spillover": {
      "name": "bluestore_warn_on_bluefs_spillover",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable health indication on bluefs slow device usage",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_warn_on_legacy_statfs": {
      "name": "bluestore_warn_on_legacy_statfs",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable health indication on lack of per-pool statfs reporting from bluestore",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_warn_on_spurious_read_errors": {
      "name": "bluestore_warn_on_spurious_read_errors",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable health indication when spurious read errors are observed by OSD",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_error_on_no_per_pool_omap": {
      "name": "bluestore_fsck_error_on_no_per_pool_omap",
      "type": "bool",
      "level": "advanced",
      "desc": "Make fsck error (instead of warn) when objects without per-pool omap are found",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_fsck_error_on_no_per_pg_omap": {
      "name": "bluestore_fsck_error_on_no_per_pg_omap",
      "type": "bool",
      "level": "advanced",
      "desc": "Make fsck error (instead of warn) when objects without per-pg omap are found",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_warn_on_no_per_pool_omap": {
      "name": "bluestore_warn_on_no_per_pool_omap",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable health indication on lack of per-pool omap",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_warn_on_no_per_pg_omap": {
      "name": "bluestore_warn_on_no_per_pg_omap",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable health indication on lack of per-pg omap",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_log_op_age": {
      "name": "bluestore_log_op_age",
      "type": "float",
      "level": "advanced",
      "desc": "log operation if it's slower than this age (seconds)",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_log_omap_iterator_age": {
      "name": "bluestore_log_omap_iterator_age",
      "type": "float",
      "level": "advanced",
      "desc": "log omap iteration operation if it's slower than this age (seconds)",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_log_collection_list_age": {
      "name": "bluestore_log_collection_list_age",
      "type": "float",
      "level": "advanced",
      "desc": "log collection list operation if it's slower than this age (seconds)",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_debug_enforce_settings": {
      "name": "bluestore_debug_enforce_settings",
      "type": "str",
      "level": "dev",
      "desc": "Enforces specific hw profile settings",
      "long_desc": "'hdd' enforces settings intended for BlueStore above a rotational drive. 'ssd' enforces settings intended for BlueStore above a solid drive. 'default' - using settings for the actual hardware.",
      "default": "default",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "default",
        "hdd",
        "ssd"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_avl_alloc_ff_max_search_count": {
      "name": "bluestore_avl_alloc_ff_max_search_count",
      "type": "uint",
      "level": "dev",
      "desc": "Search for this many ranges in first-fit mode before switching over to to best-fit mode. 0 to iterate through all ranges for required chunk.",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_avl_alloc_ff_max_search_bytes": {
      "name": "bluestore_avl_alloc_ff_max_search_bytes",
      "type": "size",
      "level": "dev",
      "desc": "Maximum distance to search in first-fit mode before switching over to to best-fit mode. 0 to iterate through all ranges for required chunk.",
      "long_desc": "",
      "default": "16777216",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_avl_alloc_bf_threshold": {
      "name": "bluestore_avl_alloc_bf_threshold",
      "type": "uint",
      "level": "dev",
      "desc": "Sets threshold at which shrinking max free chunk size triggers enabling best-fit mode.",
      "long_desc": "AVL allocator works in two modes: near-fit and best-fit. By default, it uses very fast near-fit mode, in which it tries to fit a new block near the last allocated block of similar size. The second mode is much slower best-fit mode, in which it tries to find an exact match for the requested allocation. This mode is used when either the device gets fragmented or when it is low on free space. When the largest free block is smaller than 'bluestore_avl_alloc_bf_threshold', best-fit mode is used.",
      "default": 131072,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_avl_alloc_bf_free_pct"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_avl_alloc_bf_free_pct": {
      "name": "bluestore_avl_alloc_bf_free_pct",
      "type": "uint",
      "level": "dev",
      "desc": "Sets threshold at which shrinking free space (in %, integer) triggers enabling best-fit mode.",
      "long_desc": "AVL allocator works in two modes: near-fit and best-fit. By default, it uses very fast near-fit mode, in which it tries to fit a new block near the last allocated block of similar size. The second mode is much slower best-fit mode, in which it tries to find an exact match for the requested allocation. This mode is used when either the device gets fragmented or when it is low on free space. When free space is smaller than 'bluestore_avl_alloc_bf_free_pct', best-fit mode is used.",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [
        "bluestore_avl_alloc_bf_threshold"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_hybrid_alloc_mem_cap": {
      "name": "bluestore_hybrid_alloc_mem_cap",
      "type": "uint",
      "level": "dev",
      "desc": "Maximum RAM hybrid allocator should use before enabling bitmap supplement",
      "long_desc": "",
      "default": 67108864,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_volume_selection_policy": {
      "name": "bluestore_volume_selection_policy",
      "type": "str",
      "level": "dev",
      "desc": "Determines bluefs volume selection policy",
      "long_desc": "Determines bluefs volume selection policy. 'use_some_extra*' policy allows to override RocksDB level granularity and put high level's data to faster device even when the level doesn't completely fit there. 'fit_to_fast' policy enables using 100% of faster disk capacity and allows the user to turn on 'level_compaction_dynamic_level_bytes' option in RocksDB options.",
      "default": "use_some_extra",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "rocksdb_original",
        "use_some_extra",
        "use_some_extra_enforced",
        "fit_to_fast"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_volume_selection_reserved_factor": {
      "name": "bluestore_volume_selection_reserved_factor",
      "type": "float",
      "level": "advanced",
      "desc": "DB level size multiplier. Determines amount of space at DB device to bar from the usage when 'use some extra' policy is in action. Reserved size is determined as sum(L_max_size[0], L_max_size[L-1]) + L_max_size[L] * this_factor",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "bluestore_volume_selection_reserved": {
      "name": "bluestore_volume_selection_reserved",
      "type": "int",
      "level": "advanced",
      "desc": "Space reserved at DB device and not allowed for 'use some extra' policy usage. Overrides 'bluestore_volume_selection_reserved_factor' setting and introduces straightforward limit.",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "bdev_ioring": {
      "name": "bdev_ioring",
      "type": "bool",
      "level": "advanced",
      "desc": "Enables Linux io_uring API instead of libaio",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_ioring_hipri": {
      "name": "bdev_ioring_hipri",
      "type": "bool",
      "level": "advanced",
      "desc": "Enables Linux io_uring API Use polled IO completions",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_ioring_sqthread_poll": {
      "name": "bdev_ioring_sqthread_poll",
      "type": "bool",
      "level": "advanced",
      "desc": "Enables Linux io_uring API Offload submission/completion to kernel thread",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_kv_sync_util_logging_s": {
      "name": "bluestore_kv_sync_util_logging_s",
      "type": "float",
      "level": "advanced",
      "desc": "KV sync thread utilization logging period",
      "long_desc": "How often (in seconds) to print KV sync thread utilization, not logged when set to 0 or when utilization is 0%",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_fail_eio": {
      "name": "bluestore_fail_eio",
      "type": "bool",
      "level": "dev",
      "desc": "fail/crash on EIO",
      "long_desc": "whether bluestore osd fails on eio",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "bluestore_zero_block_detection": {
      "name": "bluestore_zero_block_detection",
      "type": "bool",
      "level": "dev",
      "desc": "punch holes instead of writing zeros",
      "long_desc": "Intended for large-scale synthetic testing. Currently this is implemented with punch hole semantics, affecting the logical extent map of the object. This does not interact well with some RBD and CephFS features.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "kstore_max_ops": {
      "name": "kstore_max_ops",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 512,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "kstore_max_bytes": {
      "name": "kstore_max_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "67108864",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "kstore_backend": {
      "name": "kstore_backend",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "rocksdb",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "kstore_rocksdb_options": {
      "name": "kstore_rocksdb_options",
      "type": "str",
      "level": "advanced",
      "desc": "Options to pass through when RocksDB is used as the KeyValueDB for kstore.",
      "long_desc": "",
      "default": "compression=kNoCompression",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "kstore_fsck_on_mount": {
      "name": "kstore_fsck_on_mount",
      "type": "bool",
      "level": "advanced",
      "desc": "Whether or not to run fsck on mount for kstore.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "kstore_fsck_on_mount_deep": {
      "name": "kstore_fsck_on_mount_deep",
      "type": "bool",
      "level": "advanced",
      "desc": "Whether or not to run deep fsck on mount for kstore",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "kstore_nid_prealloc": {
      "name": "kstore_nid_prealloc",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "kstore_sync_transaction": {
      "name": "kstore_sync_transaction",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "kstore_sync_submit_transaction": {
      "name": "kstore_sync_submit_transaction",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "kstore_onode_map_size": {
      "name": "kstore_onode_map_size",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "kstore_default_stripe_size": {
      "name": "kstore_default_stripe_size",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_rocksdb_options": {
      "name": "filestore_rocksdb_options",
      "type": "str",
      "level": "dev",
      "desc": "Options to pass through when RocksDB is used as the KeyValueDB for filestore.",
      "long_desc": "",
      "default": "max_background_jobs=10,compaction_readahead_size=2097152,compression=kNoCompression",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "filestore_omap_backend": {
      "name": "filestore_omap_backend",
      "type": "str",
      "level": "dev",
      "desc": "The KeyValueDB to use for filestore metadata (ie omap).",
      "long_desc": "",
      "default": "rocksdb",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "leveldb",
        "rocksdb"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "filestore_omap_backend_path": {
      "name": "filestore_omap_backend_path",
      "type": "str",
      "level": "dev",
      "desc": "The path where the filestore KeyValueDB should store it's database(s).",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_enable": {
      "name": "filestore_wbthrottle_enable",
      "type": "bool",
      "level": "advanced",
      "desc": "Enabling throttling of operations to backing file system",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_btrfs_bytes_start_flusher": {
      "name": "filestore_wbthrottle_btrfs_bytes_start_flusher",
      "type": "size",
      "level": "advanced",
      "desc": "Start flushing (fsyncing) when this many bytes are written(btrfs)",
      "long_desc": "",
      "default": "41943040",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_btrfs_bytes_hard_limit": {
      "name": "filestore_wbthrottle_btrfs_bytes_hard_limit",
      "type": "size",
      "level": "advanced",
      "desc": "Block writes when this many bytes haven't been flushed (fsynced) (btrfs)",
      "long_desc": "",
      "default": "419430400",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_btrfs_ios_start_flusher": {
      "name": "filestore_wbthrottle_btrfs_ios_start_flusher",
      "type": "uint",
      "level": "advanced",
      "desc": "Start flushing (fsyncing) when this many IOs are written (brtrfs)",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_btrfs_ios_hard_limit": {
      "name": "filestore_wbthrottle_btrfs_ios_hard_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "Block writes when this many IOs haven't been flushed (fsynced) (btrfs)",
      "long_desc": "",
      "default": 5000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_btrfs_inodes_start_flusher": {
      "name": "filestore_wbthrottle_btrfs_inodes_start_flusher",
      "type": "uint",
      "level": "advanced",
      "desc": "Start flushing (fsyncing) when this many distinct inodes have been modified (btrfs)",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_xfs_bytes_start_flusher": {
      "name": "filestore_wbthrottle_xfs_bytes_start_flusher",
      "type": "size",
      "level": "advanced",
      "desc": "Start flushing (fsyncing) when this many bytes are written(xfs)",
      "long_desc": "",
      "default": "41943040",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_xfs_bytes_hard_limit": {
      "name": "filestore_wbthrottle_xfs_bytes_hard_limit",
      "type": "size",
      "level": "advanced",
      "desc": "Block writes when this many bytes haven't been flushed (fsynced) (xfs)",
      "long_desc": "",
      "default": "419430400",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_xfs_ios_start_flusher": {
      "name": "filestore_wbthrottle_xfs_ios_start_flusher",
      "type": "uint",
      "level": "advanced",
      "desc": "Start flushing (fsyncing) when this many IOs are written (xfs)",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_xfs_ios_hard_limit": {
      "name": "filestore_wbthrottle_xfs_ios_hard_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "Block writes when this many IOs haven't been flushed (fsynced) (xfs)",
      "long_desc": "",
      "default": 5000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_xfs_inodes_start_flusher": {
      "name": "filestore_wbthrottle_xfs_inodes_start_flusher",
      "type": "uint",
      "level": "advanced",
      "desc": "Start flushing (fsyncing) when this many distinct inodes have been modified (xfs)",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_btrfs_inodes_hard_limit": {
      "name": "filestore_wbthrottle_btrfs_inodes_hard_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "Block writing when this many inodes have outstanding writes (btrfs)",
      "long_desc": "",
      "default": 5000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_wbthrottle_xfs_inodes_hard_limit": {
      "name": "filestore_wbthrottle_xfs_inodes_hard_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "Block writing when this many inodes have outstanding writes (xfs)",
      "long_desc": "",
      "default": 5000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_odsync_write": {
      "name": "filestore_odsync_write",
      "type": "bool",
      "level": "dev",
      "desc": "Write with O_DSYNC",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_index_retry_probability": {
      "name": "filestore_index_retry_probability",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_debug_inject_read_err": {
      "name": "filestore_debug_inject_read_err",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_debug_random_read_err": {
      "name": "filestore_debug_random_read_err",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_debug_omap_check": {
      "name": "filestore_debug_omap_check",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_omap_header_cache_size": {
      "name": "filestore_omap_header_cache_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "1024",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_inline_xattr_size": {
      "name": "filestore_max_inline_xattr_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_inline_xattr_size_xfs": {
      "name": "filestore_max_inline_xattr_size_xfs",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_inline_xattr_size_btrfs": {
      "name": "filestore_max_inline_xattr_size_btrfs",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "2048",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_inline_xattr_size_other": {
      "name": "filestore_max_inline_xattr_size_other",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "512",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_inline_xattrs": {
      "name": "filestore_max_inline_xattrs",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_inline_xattrs_xfs": {
      "name": "filestore_max_inline_xattrs_xfs",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_inline_xattrs_btrfs": {
      "name": "filestore_max_inline_xattrs_btrfs",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_inline_xattrs_other": {
      "name": "filestore_max_inline_xattrs_other",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_xattr_value_size": {
      "name": "filestore_max_xattr_value_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_xattr_value_size_xfs": {
      "name": "filestore_max_xattr_value_size_xfs",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_xattr_value_size_btrfs": {
      "name": "filestore_max_xattr_value_size_btrfs",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_xattr_value_size_other": {
      "name": "filestore_max_xattr_value_size_other",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "1024",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_sloppy_crc": {
      "name": "filestore_sloppy_crc",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_sloppy_crc_block_size": {
      "name": "filestore_sloppy_crc_block_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_alloc_hint_size": {
      "name": "filestore_max_alloc_hint_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_max_sync_interval": {
      "name": "filestore_max_sync_interval",
      "type": "float",
      "level": "advanced",
      "desc": "Period between calls to syncfs(2) and journal trims (seconds)",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_min_sync_interval": {
      "name": "filestore_min_sync_interval",
      "type": "float",
      "level": "dev",
      "desc": "Minimum period between calls to syncfs(2)",
      "long_desc": "",
      "default": 0.01,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_btrfs_snap": {
      "name": "filestore_btrfs_snap",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_btrfs_clone_range": {
      "name": "filestore_btrfs_clone_range",
      "type": "bool",
      "level": "advanced",
      "desc": "Use btrfs clone_range ioctl to efficiently duplicate objects",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_zfs_snap": {
      "name": "filestore_zfs_snap",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_fsync_flushes_journal_data": {
      "name": "filestore_fsync_flushes_journal_data",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_fiemap": {
      "name": "filestore_fiemap",
      "type": "bool",
      "level": "advanced",
      "desc": "Use fiemap ioctl(2) to determine which parts of objects are sparse",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_punch_hole": {
      "name": "filestore_punch_hole",
      "type": "bool",
      "level": "advanced",
      "desc": "Use fallocate(2) FALLOC_FL_PUNCH_HOLE to efficiently zero ranges of objects",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_seek_data_hole": {
      "name": "filestore_seek_data_hole",
      "type": "bool",
      "level": "advanced",
      "desc": "Use lseek(2) SEEK_HOLE and SEEK_DATA to determine which parts of objects are sparse",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_splice": {
      "name": "filestore_splice",
      "type": "bool",
      "level": "advanced",
      "desc": "Use splice(2) to more efficiently copy data between files",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_fadvise": {
      "name": "filestore_fadvise",
      "type": "bool",
      "level": "advanced",
      "desc": "Use posix_fadvise(2) to pass hints to file system",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_collect_device_partition_information": {
      "name": "filestore_collect_device_partition_information",
      "type": "bool",
      "level": "advanced",
      "desc": "Collect metadata about the backing file system on OSD startup",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_xfs_extsize": {
      "name": "filestore_xfs_extsize",
      "type": "bool",
      "level": "advanced",
      "desc": "Use XFS extsize ioctl(2) to hint allocator about expected write sizes",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_journal_parallel": {
      "name": "filestore_journal_parallel",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_journal_writeahead": {
      "name": "filestore_journal_writeahead",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_journal_trailing": {
      "name": "filestore_journal_trailing",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_queue_max_ops": {
      "name": "filestore_queue_max_ops",
      "type": "uint",
      "level": "advanced",
      "desc": "Max IO operations in flight",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_queue_max_bytes": {
      "name": "filestore_queue_max_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "Max (written) bytes in flight",
      "long_desc": "",
      "default": "104857600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_caller_concurrency": {
      "name": "filestore_caller_concurrency",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_expected_throughput_bytes": {
      "name": "filestore_expected_throughput_bytes",
      "type": "float",
      "level": "advanced",
      "desc": "Expected throughput of backend device (aids throttling calculations)",
      "long_desc": "",
      "default": 209715200,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_expected_throughput_ops": {
      "name": "filestore_expected_throughput_ops",
      "type": "float",
      "level": "advanced",
      "desc": "Expected through of backend device in IOPS (aids throttling calculations)",
      "long_desc": "",
      "default": 200,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_queue_max_delay_multiple": {
      "name": "filestore_queue_max_delay_multiple",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_queue_high_delay_multiple": {
      "name": "filestore_queue_high_delay_multiple",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_queue_max_delay_multiple_bytes": {
      "name": "filestore_queue_max_delay_multiple_bytes",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_queue_high_delay_multiple_bytes": {
      "name": "filestore_queue_high_delay_multiple_bytes",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_queue_max_delay_multiple_ops": {
      "name": "filestore_queue_max_delay_multiple_ops",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_queue_high_delay_multiple_ops": {
      "name": "filestore_queue_high_delay_multiple_ops",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_queue_low_threshhold": {
      "name": "filestore_queue_low_threshhold",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0.29999999999999999,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_queue_high_threshhold": {
      "name": "filestore_queue_high_threshhold",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0.90000000000000002,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_op_threads": {
      "name": "filestore_op_threads",
      "type": "int",
      "level": "advanced",
      "desc": "Threads used to apply changes to backing file system",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_op_thread_timeout": {
      "name": "filestore_op_thread_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "Seconds before a worker thread is considered stalled",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_op_thread_suicide_timeout": {
      "name": "filestore_op_thread_suicide_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "Seconds before a worker thread is considered dead",
      "long_desc": "",
      "default": 180,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_commit_timeout": {
      "name": "filestore_commit_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "Seconds before backing file system is considered hung",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_fiemap_threshold": {
      "name": "filestore_fiemap_threshold",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_merge_threshold": {
      "name": "filestore_merge_threshold",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": -10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_split_multiple": {
      "name": "filestore_split_multiple",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_split_rand_factor": {
      "name": "filestore_split_rand_factor",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_update_to": {
      "name": "filestore_update_to",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_blackhole": {
      "name": "filestore_blackhole",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_fd_cache_size": {
      "name": "filestore_fd_cache_size",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_fd_cache_shards": {
      "name": "filestore_fd_cache_shards",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 16,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_ondisk_finisher_threads": {
      "name": "filestore_ondisk_finisher_threads",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_apply_finisher_threads": {
      "name": "filestore_apply_finisher_threads",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_dump_file": {
      "name": "filestore_dump_file",
      "type": "str",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "filestore_kill_at": {
      "name": "filestore_kill_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_inject_stall": {
      "name": "filestore_inject_stall",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_fail_eio": {
      "name": "filestore_fail_eio",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "filestore_debug_verify_split": {
      "name": "filestore_debug_verify_split",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_dio": {
      "name": "journal_dio",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_aio": {
      "name": "journal_aio",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_force_aio": {
      "name": "journal_force_aio",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_block_size": {
      "name": "journal_block_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_block_align": {
      "name": "journal_block_align",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_write_header_frequency": {
      "name": "journal_write_header_frequency",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_max_write_bytes": {
      "name": "journal_max_write_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "Max bytes in flight to journal",
      "long_desc": "",
      "default": "10485760",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_max_write_entries": {
      "name": "journal_max_write_entries",
      "type": "int",
      "level": "advanced",
      "desc": "Max IOs in flight to journal",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_throttle_low_threshhold": {
      "name": "journal_throttle_low_threshhold",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0.59999999999999998,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_throttle_high_threshhold": {
      "name": "journal_throttle_high_threshhold",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0.90000000000000002,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_throttle_high_multiple": {
      "name": "journal_throttle_high_multiple",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_throttle_max_multiple": {
      "name": "journal_throttle_max_multiple",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_align_min_size": {
      "name": "journal_align_min_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_replay_from": {
      "name": "journal_replay_from",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_zero_on_create": {
      "name": "journal_zero_on_create",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_ignore_corruption": {
      "name": "journal_ignore_corruption",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "journal_discard": {
      "name": "journal_discard",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fio_dir": {
      "name": "fio_dir",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "/tmp/fio",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rados_mon_op_timeout": {
      "name": "rados_mon_op_timeout",
      "type": "secs",
      "level": "advanced",
      "desc": "timeout for operations handled by monitors such as statfs (0 is unlimited)",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "0",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "rados_osd_op_timeout": {
      "name": "rados_osd_op_timeout",
      "type": "secs",
      "level": "advanced",
      "desc": "timeout for operations handled by osds such as write (0 is unlimited)",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "0",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "rados_tracing": {
      "name": "rados_tracing",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_connect_retry_interval": {
      "name": "mgr_connect_retry_interval",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "common"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_client_service_daemon_unregister_timeout": {
      "name": "mgr_client_service_daemon_unregister_timeout",
      "type": "float",
      "level": "dev",
      "desc": "Time to wait during shutdown to deregister service with mgr",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_enable_op_tracker": {
      "name": "mgr_enable_op_tracker",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable / disable MGR Op Tracker",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_num_op_tracker_shard": {
      "name": "mgr_num_op_tracker_shard",
      "type": "uint",
      "level": "advanced",
      "desc": "The number of shards for holding the ops",
      "long_desc": "",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_op_complaint_time": {
      "name": "mgr_op_complaint_time",
      "type": "float",
      "level": "advanced",
      "desc": "An operation becomes complaint worthy after the specified number of seconds have elapsed.",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_op_log_threshold": {
      "name": "mgr_op_log_threshold",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_op_history_size": {
      "name": "mgr_op_history_size",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_op_history_duration": {
      "name": "mgr_op_history_duration",
      "type": "uint",
      "level": "advanced",
      "desc": "The oldest completed operation to track.",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_op_history_slow_op_size": {
      "name": "mgr_op_history_slow_op_size",
      "type": "uint",
      "level": "advanced",
      "desc": "Max number of slow ops to track",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_op_history_slow_op_threshold": {
      "name": "mgr_op_history_slow_op_threshold",
      "type": "float",
      "level": "advanced",
      "desc": "Duration of an op to be considered as a historical slow op",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "throttler_perf_counter": {
      "name": "throttler_perf_counter",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "event_tracing": {
      "name": "event_tracing",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_tracing": {
      "name": "bluestore_tracing",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable bluestore event tracing.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bluestore_throttle_trace_rate": {
      "name": "bluestore_throttle_trace_rate",
      "type": "float",
      "level": "advanced",
      "desc": "Rate at which to sample bluestore transactions (per second)",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "debug_deliberately_leak_memory": {
      "name": "debug_deliberately_leak_memory",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "debug_asserts_on_shutdown": {
      "name": "debug_asserts_on_shutdown",
      "type": "bool",
      "level": "dev",
      "desc": "Enable certain asserts to check for refcounting bugs on shutdown; see http://tracker.ceph.com/issues/21738",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "debug_asok_assert_abort": {
      "name": "debug_asok_assert_abort",
      "type": "bool",
      "level": "dev",
      "desc": "allow commands 'assert' and 'abort' via asok for testing crash dumps etc",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "target_max_misplaced_ratio": {
      "name": "target_max_misplaced_ratio",
      "type": "float",
      "level": "basic",
      "desc": "Max ratio of misplaced objects to target when throttling data rebalancing activity",
      "long_desc": "",
      "default": 0.050000000000000003,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "device_failure_prediction_mode": {
      "name": "device_failure_prediction_mode",
      "type": "str",
      "level": "basic",
      "desc": "Method used to predict device failures",
      "long_desc": "To disable prediction, use 'none',  'local' uses a prediction model that runs inside the mgr daemon.  'cloud' will share metrics with a cloud service and query the service for devicelife expectancy.",
      "default": "none",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "none",
        "local",
        "cloud"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "gss_ktab_client_file": {
      "name": "gss_ktab_client_file",
      "type": "str",
      "level": "advanced",
      "desc": "GSS/KRB5 Keytab file for client authentication",
      "long_desc": "This sets the full path for the GSS/Kerberos client keytab file location.",
      "default": "/var/lib/ceph/$name/gss_client_$name.ktab",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "gss_target_name": {
      "name": "gss_target_name",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "This sets the gss target service name.",
      "default": "ceph",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "debug_disable_randomized_ping": {
      "name": "debug_disable_randomized_ping",
      "type": "bool",
      "level": "dev",
      "desc": "Disable heartbeat ping randomization for testing purposes",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "debug_heartbeat_testing_span": {
      "name": "debug_heartbeat_testing_span",
      "type": "int",
      "level": "dev",
      "desc": "Override 60 second periods for testing only",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "librados_thread_count": {
      "name": "librados_thread_count",
      "type": "uint",
      "level": "advanced",
      "desc": "Size of thread pool for Objecter",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [
        "client"
      ],
      "services": [],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_asio_thread_count": {
      "name": "osd_asio_thread_count",
      "type": "uint",
      "level": "advanced",
      "desc": "Size of thread pool for ASIO completions",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [
        "osd"
      ],
      "services": [],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephsqlite_lock_renewal_interval": {
      "name": "cephsqlite_lock_renewal_interval",
      "type": "millisecs",
      "level": "advanced",
      "desc": "number of milliseconds before lock is renewed",
      "long_desc": "",
      "default": "2000",
      "daemon_default": "",
      "tags": [
        "client"
      ],
      "services": [],
      "see_also": [
        "cephsqlite_lock_renewal_timeout"
      ],
      "min": "100",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephsqlite_lock_renewal_timeout": {
      "name": "cephsqlite_lock_renewal_timeout",
      "type": "millisecs",
      "level": "advanced",
      "desc": "number of milliseconds before transaction lock times out",
      "long_desc": "The amount of time before a running libcephsqlite VFS connection has to renew a lock on the database before the lock is automatically lost. If the lock is lost, the VFS will abort the process to prevent database corruption.",
      "default": "30000",
      "daemon_default": "",
      "tags": [
        "client"
      ],
      "services": [],
      "see_also": [
        "cephsqlite_lock_renewal_interval"
      ],
      "min": "100",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephsqlite_blocklist_dead_locker": {
      "name": "cephsqlite_blocklist_dead_locker",
      "type": "bool",
      "level": "advanced",
      "desc": "blocklist the last dead owner of the database lock",
      "long_desc": "Require that the Ceph SQLite VFS blocklist the last dead owner of the database when cleanup was incomplete. DO NOT CHANGE THIS UNLESS YOU UNDERSTAND THE RAMIFICATIONS. CORRUPTION MAY RESULT.",
      "default": true,
      "daemon_default": "",
      "tags": [
        "client"
      ],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "bdev_type": {
      "name": "bdev_type",
      "type": "str",
      "level": "advanced",
      "desc": "Explicitly set the device type to select the driver if it's needed",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "aio",
        "spdk",
        "pmem"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "bluestore_cleaner_sleep_interval": {
      "name": "bluestore_cleaner_sleep_interval",
      "type": "float",
      "level": "advanced",
      "desc": "How long cleaner should sleep before re-checking utilization",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "jaeger_tracing_enable": {
      "name": "jaeger_tracing_enable",
      "type": "bool",
      "level": "advanced",
      "desc": "Ceph should use jaeger tracing system",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw",
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "jaeger_agent_port": {
      "name": "jaeger_agent_port",
      "type": "int",
      "level": "advanced",
      "desc": "port number of the jaeger agent",
      "long_desc": "",
      "default": 6799,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw",
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_ttl_cache_expire_seconds": {
      "name": "mgr_ttl_cache_expire_seconds",
      "type": "uint",
      "level": "dev",
      "desc": "Set the time to live in seconds - set to 0 to disable the cache.",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "objectstore_debug_throw_on_failed_txc": {
      "name": "objectstore_debug_throw_on_failed_txc",
      "type": "bool",
      "level": "dev",
      "desc": "Enables exception throwing instead of process abort on transaction submission error.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "crimson_osd_obc_lru_size": {
      "name": "crimson_osd_obc_lru_size",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of obcs to cache",
      "long_desc": "",
      "default": 512,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "crimson_osd_scheduler_concurrency": {
      "name": "crimson_osd_scheduler_concurrency",
      "type": "uint",
      "level": "advanced",
      "desc": "The maximum number concurrent IO operations, 0 for unlimited",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "crimson_alien_op_num_threads": {
      "name": "crimson_alien_op_num_threads",
      "type": "uint",
      "level": "advanced",
      "desc": "The number of threads for serving alienized ObjectStore",
      "long_desc": "",
      "default": 6,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "crimson_seastar_cpu_cores": {
      "name": "crimson_seastar_cpu_cores",
      "type": "str",
      "level": "advanced",
      "desc": "CPU cores on which seastar reactor threads will run in cpuset(7) format, smp::count is deduced from this option",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "crimson_alien_thread_cpu_cores": {
      "name": "crimson_alien_thread_cpu_cores",
      "type": "str",
      "level": "advanced",
      "desc": "CPU cores on which alienstore threads will run in cpuset(7) format",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "crimson_seastar_num_threads": {
      "name": "crimson_seastar_num_threads",
      "type": "uint",
      "level": "advanced",
      "desc": "The number of threads for serving seastar reactors without CPU pinning, overridden if crimson_seastar_cpu_cores is set",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": 0,
      "max": 32,
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "crimson_osd_stat_interval": {
      "name": "crimson_osd_stat_interval",
      "type": "int",
      "level": "advanced",
      "desc": "Report OSD status periodically in seconds, 0 to disable",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_segment_size": {
      "name": "seastore_segment_size",
      "type": "size",
      "level": "advanced",
      "desc": "Segment size to use for SegmentManager",
      "long_desc": "",
      "default": "67108864",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_device_size": {
      "name": "seastore_device_size",
      "type": "size",
      "level": "dev",
      "desc": "Total size to use for SegmentManager block file if created",
      "long_desc": "",
      "default": "53687091200",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_block_create": {
      "name": "seastore_block_create",
      "type": "bool",
      "level": "dev",
      "desc": "Create SegmentManager file if it doesn't exist",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "seastore_device_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_journal_batch_capacity": {
      "name": "seastore_journal_batch_capacity",
      "type": "uint",
      "level": "dev",
      "desc": "The number limit of records in a journal batch",
      "long_desc": "",
      "default": 16,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_journal_batch_flush_size": {
      "name": "seastore_journal_batch_flush_size",
      "type": "size",
      "level": "dev",
      "desc": "The size threshold to force flush a journal batch",
      "long_desc": "",
      "default": "16777216",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_journal_iodepth_limit": {
      "name": "seastore_journal_iodepth_limit",
      "type": "uint",
      "level": "dev",
      "desc": "The io depth limit to submit journal records",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_journal_batch_preferred_fullness": {
      "name": "seastore_journal_batch_preferred_fullness",
      "type": "float",
      "level": "dev",
      "desc": "The record fullness threshold to flush a journal batch",
      "long_desc": "",
      "default": 0.94999999999999996,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_default_max_object_size": {
      "name": "seastore_default_max_object_size",
      "type": "uint",
      "level": "dev",
      "desc": "default logical address space reservation for seastore objects' data",
      "long_desc": "",
      "default": 16777216,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_default_object_metadata_reservation": {
      "name": "seastore_default_object_metadata_reservation",
      "type": "uint",
      "level": "dev",
      "desc": "default logical address space reservation for seastore objects' metadata",
      "long_desc": "",
      "default": 16777216,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_full_integrity_check": {
      "name": "seastore_full_integrity_check",
      "type": "bool",
      "level": "dev",
      "desc": "Whether seastore need to fully check the integrity of each extent, non-full integrity check means the integrity check might be skipped during extent remapping for better performance, disable with caution",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_max_data_allocation_size": {
      "name": "seastore_max_data_allocation_size",
      "type": "size",
      "level": "advanced",
      "desc": "Max size in bytes that an extent can be",
      "long_desc": "",
      "default": "32768",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_cache_lru_size": {
      "name": "seastore_cache_lru_size",
      "type": "size",
      "level": "advanced",
      "desc": "Size in bytes of extents to keep in cache.",
      "long_desc": "",
      "default": "67108864",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_obj_data_write_amplification": {
      "name": "seastore_obj_data_write_amplification",
      "type": "float",
      "level": "advanced",
      "desc": "split extent if ratio of total extent size to write size exceeds this value",
      "long_desc": "",
      "default": 1.25,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_max_concurrent_transactions": {
      "name": "seastore_max_concurrent_transactions",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum concurrent transactions that seastore allows",
      "long_desc": "",
      "default": 8,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_main_device_type": {
      "name": "seastore_main_device_type",
      "type": "str",
      "level": "dev",
      "desc": "The main device type seastore uses (SSD or RANDOM_BLOCK_SSD)",
      "long_desc": "",
      "default": "SSD",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "seastore_cbjournal_size": {
      "name": "seastore_cbjournal_size",
      "type": "size",
      "level": "dev",
      "desc": "Total size to use for CircularBoundedJournal if created, it is valid only if seastore_main_device_type is RANDOM_BLOCK",
      "long_desc": "",
      "default": "5368709120",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_multiple_tiers_stop_evict_ratio": {
      "name": "seastore_multiple_tiers_stop_evict_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "When the used ratio of main tier is less than this value, then stop evict cold data to the cold tier.",
      "long_desc": "",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_multiple_tiers_default_evict_ratio": {
      "name": "seastore_multiple_tiers_default_evict_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "Begin evicting cold data to the cold tier when the used ratio of the main tier reaches this value.",
      "long_desc": "",
      "default": 0.59999999999999998,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_multiple_tiers_fast_evict_ratio": {
      "name": "seastore_multiple_tiers_fast_evict_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "Begin fast eviction when the used ratio of the main tier reaches this value.",
      "long_desc": "",
      "default": 0.69999999999999996,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "seastore_data_delta_based_overwrite": {
      "name": "seastore_data_delta_based_overwrite",
      "type": "size",
      "level": "dev",
      "desc": "overwrite the existing data block based on delta if the overwrite size is equal to or less than the value, otherwise do overwrite based on remapping, set to 0 to enforce the remap-based overwrite.",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_data": {
      "name": "mgr_data",
      "type": "str",
      "level": "advanced",
      "desc": "Filesystem path to the ceph-mgr data directory, used to contain keyring.",
      "long_desc": "",
      "default": "/var/lib/ceph/mgr/$cluster-$id",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update"
      ]
    }
  },
  {
    "mgr_pool": {
      "name": "mgr_pool",
      "type": "bool",
      "level": "dev",
      "desc": "Allow use/creation of .mgr pool.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "mgr_stats_period": {
      "name": "mgr_stats_period",
      "type": "int",
      "level": "basic",
      "desc": "Period in seconds of OSD/MDS stats reports to manager",
      "long_desc": "Use this setting to control the granularity of time series data collection from daemons.  Adjust upwards if the manager CPU load is too high, or if you simply do not require the most up to date performance counter data.",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr",
        "common"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_client_bytes": {
      "name": "mgr_client_bytes",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "134217728",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_client_messages": {
      "name": "mgr_client_messages",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 512,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_osd_bytes": {
      "name": "mgr_osd_bytes",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "536870912",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_osd_messages": {
      "name": "mgr_osd_messages",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 8192,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_mds_bytes": {
      "name": "mgr_mds_bytes",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "134217728",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_mds_messages": {
      "name": "mgr_mds_messages",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_mon_bytes": {
      "name": "mgr_mon_bytes",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "134217728",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_mon_messages": {
      "name": "mgr_mon_messages",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_service_beacon_grace": {
      "name": "mgr_service_beacon_grace",
      "type": "float",
      "level": "advanced",
      "desc": "Period in seconds from last beacon to manager dropping state about a monitored service (RGW, rbd-mirror etc)",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_debug_aggressive_pg_num_changes": {
      "name": "mgr_debug_aggressive_pg_num_changes",
      "type": "bool",
      "level": "dev",
      "desc": "Bypass most throttling and safety checks in pg[p]_num controller",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_max_pg_num_change": {
      "name": "mgr_max_pg_num_change",
      "type": "int",
      "level": "advanced",
      "desc": "maximum change in pg_num",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_module_path": {
      "name": "mgr_module_path",
      "type": "str",
      "level": "advanced",
      "desc": "Filesystem path to manager modules.",
      "long_desc": "",
      "default": "/usr/share/ceph/mgr",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr_standby_modules": {
      "name": "mgr_standby_modules",
      "type": "bool",
      "level": "advanced",
      "desc": "Start modules in standby (redirect) mode when mgr is standby",
      "long_desc": "By default, the standby modules will answer incoming requests with a HTTP redirect to the active manager, allowing users to point their browser at any mgr node and find their way to an active mgr.  However, this mode is problematic when using a load balancer because (1) the redirect locations are usually private IPs and (2) the load balancer can't identify which mgr is the right one to send traffic to. If a load balancer is being used, set this to false.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_disabled_modules": {
      "name": "mgr_disabled_modules",
      "type": "str",
      "level": "advanced",
      "desc": "List of manager modules never get loaded",
      "long_desc": "A comma delimited list of module names. This list is read by manager when it starts. By default, manager loads all modules found in specified 'mgr_module_path', and it starts the enabled ones as instructed. The modules in this list will not be loaded at all.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [
        "mgr_module_path"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "mgr_initial_modules": {
      "name": "mgr_initial_modules",
      "type": "str",
      "level": "basic",
      "desc": "List of manager modules to enable when the cluster is first started",
      "long_desc": "This list of module names is read by the monitor when the cluster is first started after installation, to populate the list of enabled manager modules.  Subsequent updates are done using the 'mgr module [enable|disable]' commands.  List may be comma or space separated.",
      "default": "restful iostat nfs",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon",
        "common",
        "mgr"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "cluster_create"
      ]
    }
  },
  {
    "cephadm_path": {
      "name": "cephadm_path",
      "type": "str",
      "level": "advanced",
      "desc": "Path to cephadm utility",
      "long_desc": "",
      "default": "/usr/sbin/cephadm",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mon_delta_reset_interval": {
      "name": "mon_delta_reset_interval",
      "type": "float",
      "level": "advanced",
      "desc": "window duration for rate calculations in 'ceph status'",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_stat_smooth_intervals": {
      "name": "mon_stat_smooth_intervals",
      "type": "uint",
      "level": "advanced",
      "desc": "number of PGMaps stats over which we calc the average read/write throughput of the whole cluster",
      "long_desc": "",
      "default": 6,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_pool_quota_warn_threshold": {
      "name": "mon_pool_quota_warn_threshold",
      "type": "int",
      "level": "advanced",
      "desc": "percent of quota at which to issue warnings",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_pool_quota_crit_threshold": {
      "name": "mon_pool_quota_crit_threshold",
      "type": "int",
      "level": "advanced",
      "desc": "percent of quota at which to issue errors",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_cache_target_full_warn_ratio": {
      "name": "mon_cache_target_full_warn_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "issue CACHE_POOL_NEAR_FULL health warning when cache pool utilization exceeds this ratio of usable space",
      "long_desc": "",
      "default": 0.66000000000000003,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "cluster_create"
      ]
    }
  },
  {
    "mon_pg_check_down_all_threshold": {
      "name": "mon_pg_check_down_all_threshold",
      "type": "float",
      "level": "advanced",
      "desc": "threshold of down osds after which we check all pgs",
      "long_desc": "",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_pg_stuck_threshold": {
      "name": "mon_pg_stuck_threshold",
      "type": "int",
      "level": "advanced",
      "desc": "number of seconds after which pgs can be considered stuck inactive, unclean, etc",
      "long_desc": "see doc/control.rst under dump_stuck for more info",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_pg_warn_min_per_osd": {
      "name": "mon_pg_warn_min_per_osd",
      "type": "uint",
      "level": "advanced",
      "desc": "minimal number PGs per (in) osd before we warn the admin",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_pg_warn_max_object_skew": {
      "name": "mon_pg_warn_max_object_skew",
      "type": "float",
      "level": "advanced",
      "desc": "max skew few average in objects per pg",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_pg_warn_min_objects": {
      "name": "mon_pg_warn_min_objects",
      "type": "int",
      "level": "advanced",
      "desc": "do not warn below this object #",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_pg_warn_min_pool_objects": {
      "name": "mon_pg_warn_min_pool_objects",
      "type": "int",
      "level": "advanced",
      "desc": "do not warn on pools below this object #",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_misplaced": {
      "name": "mon_warn_on_misplaced",
      "type": "bool",
      "level": "advanced",
      "desc": "Issue a health warning if there are misplaced objects",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_pool_no_app": {
      "name": "mon_warn_on_pool_no_app",
      "type": "bool",
      "level": "dev",
      "desc": "issue POOL_APP_NOT_ENABLED health warning if pool has not application enabled",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_too_few_osds": {
      "name": "mon_warn_on_too_few_osds",
      "type": "bool",
      "level": "advanced",
      "desc": "Issue a health warning if there are fewer OSDs than osd_pool_default_size",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_target_pg_per_osd": {
      "name": "mon_target_pg_per_osd",
      "type": "uint",
      "level": "advanced",
      "desc": "Automated PG management creates this many PGs per OSD",
      "long_desc": "When creating pools, the automated PG management logic will attempt to reach this target.  In some circumstances, it may exceed this target, up to the ``mon_max_pg_per_osd`` limit. Conversely, a lower number of PGs per OSD may be created if the cluster is not yet fully utilised",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_reweight_min_pgs_per_osd": {
      "name": "mon_reweight_min_pgs_per_osd",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_reweight_min_bytes_per_osd": {
      "name": "mon_reweight_min_bytes_per_osd",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "104857600",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_reweight_max_osds": {
      "name": "mon_reweight_max_osds",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_reweight_max_change": {
      "name": "mon_reweight_max_change",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0.050000000000000003,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_stats_threshold": {
      "name": "mgr_stats_threshold",
      "type": "int",
      "level": "advanced",
      "desc": "Lowest perfcounter priority collected by mgr",
      "long_desc": "Daemons only set perf counter data to the manager daemon if the counter has a priority higher than this.",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": 0,
      "max": 11,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mgr_tick_period": {
      "name": "mgr_tick_period",
      "type": "secs",
      "level": "advanced",
      "desc": "Period in seconds of beacon messages to monitor",
      "long_desc": "",
      "default": "2",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr",
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_err_op_age_ratio": {
      "name": "mon_osd_err_op_age_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "issue REQUEST_STUCK health error if OSD ops are slower than is age (seconds)",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_crush_update_weight_set": {
      "name": "osd_crush_update_weight_set",
      "type": "bool",
      "level": "advanced",
      "desc": "update CRUSH weight-set weights when updating weights",
      "long_desc": "If this setting is true, we will update the weight-set weights when adjusting an item's weight, effectively making changes take effect immediately, and discarding any previous optimization in the weight-set value.  Setting this value to false will leave it to the balancer to (slowly, presumably) adjust weights to approach the new target value.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_erasure_code_stripe_unit": {
      "name": "osd_pool_erasure_code_stripe_unit",
      "type": "size",
      "level": "advanced",
      "desc": "the amount of data (in bytes) in a data chunk, per stripe",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pool_default_crimson": {
      "name": "osd_pool_default_crimson",
      "type": "bool",
      "level": "advanced",
      "desc": "Create pools by default with FLAG_CRIMSON",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_max_pool_pg_num": {
      "name": "mon_max_pool_pg_num",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 65536,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_mgr_digest_period": {
      "name": "mon_mgr_digest_period",
      "type": "int",
      "level": "dev",
      "desc": "Period in seconds between monitor-to-manager health/status updates",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_down_mkfs_grace": {
      "name": "mon_down_mkfs_grace",
      "type": "secs",
      "level": "advanced",
      "desc": "Period in seconds that the cluster may have a mon down after cluster creation",
      "long_desc": "",
      "default": "60",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_down_uptime_grace": {
      "name": "mon_down_uptime_grace",
      "type": "secs",
      "level": "advanced",
      "desc": "Period in seconds that the cluster may have a mon down after this (leader) monitor comes up.",
      "long_desc": "",
      "default": "60",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_mgr_beacon_grace": {
      "name": "mon_mgr_beacon_grace",
      "type": "secs",
      "level": "advanced",
      "desc": "Period in seconds from last beacon to monitor marking a manager daemon as failed",
      "long_desc": "",
      "default": "30",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_mgr_inactive_grace": {
      "name": "mon_mgr_inactive_grace",
      "type": "int",
      "level": "advanced",
      "desc": "Period in seconds after cluster creation during which cluster may have no active manager",
      "long_desc": "This grace period enables the cluster to come up cleanly without raising spurious health check failures about managers that aren't online yet",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_mgr_mkfs_grace": {
      "name": "mon_mgr_mkfs_grace",
      "type": "int",
      "level": "advanced",
      "desc": "Period in seconds that the cluster may have no active manager before this is reported as an ERR rather than a WARN",
      "long_desc": "",
      "default": 120,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_mgr_proxy_client_bytes_ratio": {
      "name": "mon_mgr_proxy_client_bytes_ratio",
      "type": "float",
      "level": "dev",
      "desc": "ratio of mon_client_bytes that can be consumed by proxied mgr commands before we error out to client",
      "long_desc": "",
      "default": 0.29999999999999999,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_cluster_log_to_stderr": {
      "name": "mon_cluster_log_to_stderr",
      "type": "bool",
      "level": "advanced",
      "desc": "Make monitor send cluster log messages to stderr (prefixed by channel)",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "log_stderr_prefix"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cluster_log_to_syslog": {
      "name": "mon_cluster_log_to_syslog",
      "type": "str",
      "level": "advanced",
      "desc": "Make monitor send cluster log messages to syslog",
      "long_desc": "",
      "default": "default=false",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cluster_log_to_syslog_level": {
      "name": "mon_cluster_log_to_syslog_level",
      "type": "str",
      "level": "advanced",
      "desc": "Syslog level for cluster log messages",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_cluster_log_to_syslog"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cluster_log_to_syslog_facility": {
      "name": "mon_cluster_log_to_syslog_facility",
      "type": "str",
      "level": "advanced",
      "desc": "Syslog facility for cluster log messages",
      "long_desc": "",
      "default": "daemon",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_cluster_log_to_syslog"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cluster_log_to_file": {
      "name": "mon_cluster_log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "Make monitor send cluster log messages to file",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_cluster_log_file"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cluster_log_file": {
      "name": "mon_cluster_log_file",
      "type": "str",
      "level": "advanced",
      "desc": "File(s) to write cluster log to",
      "long_desc": "This can either be a simple file name to receive all messages, or a list of key/value pairs where the key is the log channel and the value is the filename, which may include $cluster and $channel metavariables",
      "default": "default=/var/log/ceph/$cluster.$channel.log cluster=/var/log/ceph/$cluster.log",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_cluster_log_to_file"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cluster_log_file_level": {
      "name": "mon_cluster_log_file_level",
      "type": "str",
      "level": "advanced",
      "desc": "Lowest level to include is cluster log file",
      "long_desc": "",
      "default": "debug",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_cluster_log_file"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cluster_log_to_graylog": {
      "name": "mon_cluster_log_to_graylog",
      "type": "str",
      "level": "advanced",
      "desc": "Make monitor send cluster log to graylog",
      "long_desc": "",
      "default": "false",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cluster_log_to_graylog_host": {
      "name": "mon_cluster_log_to_graylog_host",
      "type": "str",
      "level": "advanced",
      "desc": "Graylog host for cluster log messages",
      "long_desc": "",
      "default": "127.0.0.1",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_cluster_log_to_graylog"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cluster_log_to_graylog_port": {
      "name": "mon_cluster_log_to_graylog_port",
      "type": "str",
      "level": "advanced",
      "desc": "Graylog port for cluster log messages",
      "long_desc": "",
      "default": "12201",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_cluster_log_to_graylog"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cluster_log_to_journald": {
      "name": "mon_cluster_log_to_journald",
      "type": "str",
      "level": "advanced",
      "desc": "Make monitor send cluster log to journald",
      "long_desc": "",
      "default": "false",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_log_max": {
      "name": "mon_log_max",
      "type": "uint",
      "level": "advanced",
      "desc": "number of recent cluster log messages to retain",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_log_max_summary": {
      "name": "mon_log_max_summary",
      "type": "uint",
      "level": "advanced",
      "desc": "number of recent cluster log messages to dedup against",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_log_full_interval": {
      "name": "mon_log_full_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "how many epochs before we encode a full copy of recent log keys",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_max_log_entries_per_event": {
      "name": "mon_max_log_entries_per_event",
      "type": "int",
      "level": "advanced",
      "desc": "max cluster log entries per paxos event",
      "long_desc": "",
      "default": 4096,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_health_to_clog": {
      "name": "mon_health_to_clog",
      "type": "bool",
      "level": "advanced",
      "desc": "log monitor health to cluster log",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_health_to_clog_interval": {
      "name": "mon_health_to_clog_interval",
      "type": "int",
      "level": "advanced",
      "desc": "frequency to log monitor health to cluster log",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_health_to_clog"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_health_to_clog_tick_interval": {
      "name": "mon_health_to_clog_tick_interval",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_health_detail_to_clog": {
      "name": "mon_health_detail_to_clog",
      "type": "bool",
      "level": "dev",
      "desc": "log health detail to cluster log",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_filestore_osds": {
      "name": "mon_warn_on_filestore_osds",
      "type": "bool",
      "level": "dev",
      "desc": "log health warn for filestore OSDs",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_health_max_detail": {
      "name": "mon_health_max_detail",
      "type": "uint",
      "level": "advanced",
      "desc": "max detailed pgs to report in health detail",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_health_log_update_period": {
      "name": "mon_health_log_update_period",
      "type": "int",
      "level": "dev",
      "desc": "minimum time in seconds between log messages about each health check",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 0,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_data_avail_crit": {
      "name": "mon_data_avail_crit",
      "type": "int",
      "level": "advanced",
      "desc": "issue MON_DISK_CRIT health error when mon available space below this percentage",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_data_avail_warn": {
      "name": "mon_data_avail_warn",
      "type": "int",
      "level": "advanced",
      "desc": "issue MON_DISK_LOW health warning when mon available space below this percentage",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_data_size_warn": {
      "name": "mon_data_size_warn",
      "type": "size",
      "level": "advanced",
      "desc": "issue MON_DISK_BIG health warning when mon database is above this size",
      "long_desc": "",
      "default": "16106127360",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_daemon_bytes": {
      "name": "mon_daemon_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "max bytes of outstanding mon messages mon will read off the network",
      "long_desc": "",
      "default": "419430400",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_election_timeout": {
      "name": "mon_election_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "maximum time for a mon election (seconds)",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_election_default_strategy": {
      "name": "mon_election_default_strategy",
      "type": "uint",
      "level": "advanced",
      "desc": "The election strategy to set when constructing the first monmap.",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 1,
      "max": 3,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_lease": {
      "name": "mon_lease",
      "type": "float",
      "level": "advanced",
      "desc": "lease interval between quorum monitors (seconds)",
      "long_desc": "This setting controls how sensitive your mon quorum is to intermittent network issues or other failures.",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_lease_renew_interval_factor": {
      "name": "mon_lease_renew_interval_factor",
      "type": "float",
      "level": "advanced",
      "desc": "multiple of mon_lease for the lease renewal interval",
      "long_desc": "Leases must be renewed before they time out.  A smaller value means frequent renewals, while a value close to 1 makes a lease expiration more likely.",
      "default": 0.59999999999999998,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_lease"
      ],
      "min": 0,
      "max": 0.99999990000000005,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_lease_ack_timeout_factor": {
      "name": "mon_lease_ack_timeout_factor",
      "type": "float",
      "level": "advanced",
      "desc": "multiple of mon_lease for the lease ack interval before calling new election",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_lease"
      ],
      "min": 1.0001,
      "max": 100,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_accept_timeout_factor": {
      "name": "mon_accept_timeout_factor",
      "type": "float",
      "level": "advanced",
      "desc": "multiple of mon_lease for follower mons to accept proposed state changes before calling a new election",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_lease"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_elector_ping_timeout": {
      "name": "mon_elector_ping_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "The time after which a ping 'times out' and a connection is considered down",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_elector_ping_divisor"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_elector_ping_divisor": {
      "name": "mon_elector_ping_divisor",
      "type": "uint",
      "level": "advanced",
      "desc": "We will send a ping up to this many times per timeout per",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_elector_ping_timeout"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_con_tracker_persist_interval": {
      "name": "mon_con_tracker_persist_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "how many updates the ConnectionTracker takes before it persists to disk",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 1,
      "max": 100000,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_con_tracker_score_halflife": {
      "name": "mon_con_tracker_score_halflife",
      "type": "uint",
      "level": "advanced",
      "desc": "The 'halflife' used when updating/calculating peer connection scores",
      "long_desc": "",
      "default": 43200,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 60,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_elector_ignore_propose_margin": {
      "name": "mon_elector_ignore_propose_margin",
      "type": "float",
      "level": "advanced",
      "desc": "The difference in connection score allowed before a peon stops ignoring out-of-quorum PROPOSEs",
      "long_desc": "",
      "default": 0.00050000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_cache_pools_without_hit_sets": {
      "name": "mon_warn_on_cache_pools_without_hit_sets",
      "type": "bool",
      "level": "advanced",
      "desc": "issue CACHE_POOL_NO_HIT_SET health warning for cache pools that do not have hit sets configured",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_pool_pg_num_not_power_of_two": {
      "name": "mon_warn_on_pool_pg_num_not_power_of_two",
      "type": "bool",
      "level": "dev",
      "desc": "issue POOL_PG_NUM_NOT_POWER_OF_TWO warning if pool has a non-power-of-two pg_num value",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_allow_pool_size_one": {
      "name": "mon_allow_pool_size_one",
      "type": "bool",
      "level": "advanced",
      "desc": "allow configuring pool with no replicas",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_crush_straw_calc_version_zero": {
      "name": "mon_warn_on_crush_straw_calc_version_zero",
      "type": "bool",
      "level": "advanced",
      "desc": "issue OLD_CRUSH_STRAW_CALC_VERSION health warning if the CRUSH map's straw_calc_version is zero",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_pool_no_redundancy": {
      "name": "mon_warn_on_pool_no_redundancy",
      "type": "bool",
      "level": "advanced",
      "desc": "Issue a health warning if any pool is configured with no replicas",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "osd_pool_default_size",
        "osd_pool_default_min_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_osd_down_out_interval_zero": {
      "name": "mon_warn_on_osd_down_out_interval_zero",
      "type": "bool",
      "level": "advanced",
      "desc": "issue OSD_NO_DOWN_OUT_INTERVAL health warning if mon_osd_down_out_interval is zero",
      "long_desc": "Having mon_osd_down_out_interval set to 0 means that down OSDs are not marked out automatically and the cluster does not heal itself without administrator intervention.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osd_down_out_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_legacy_crush_tunables": {
      "name": "mon_warn_on_legacy_crush_tunables",
      "type": "bool",
      "level": "advanced",
      "desc": "issue OLD_CRUSH_TUNABLES health warning if CRUSH tunables are older than mon_crush_min_required_version",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_crush_min_required_version"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_crush_min_required_version": {
      "name": "mon_crush_min_required_version",
      "type": "str",
      "level": "advanced",
      "desc": "minimum ceph release to use for mon_warn_on_legacy_crush_tunables",
      "long_desc": "",
      "default": "hammer",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_warn_on_legacy_crush_tunables"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mon_warn_on_degraded_stretch_mode": {
      "name": "mon_warn_on_degraded_stretch_mode",
      "type": "bool",
      "level": "advanced",
      "desc": "Issue a health warning if we are in degraded stretch mode",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_stretch_cluster_recovery_ratio": {
      "name": "mon_stretch_cluster_recovery_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "the ratio of up OSDs at which a degraded stretch cluster enters recovery",
      "long_desc": "",
      "default": 0.59999999999999998,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 0.51000000000000001,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_stretch_recovery_min_wait": {
      "name": "mon_stretch_recovery_min_wait",
      "type": "float",
      "level": "advanced",
      "desc": "how long the monitors wait before considering fully-healthy PGs as evidence the stretch mode is repaired",
      "long_desc": "",
      "default": 15,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_stretch_pool_size": {
      "name": "mon_stretch_pool_size",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 3,
      "max": 6,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_stretch_pool_min_size": {
      "name": "mon_stretch_pool_min_size",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 2,
      "max": 4,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_clock_drift_allowed": {
      "name": "mon_clock_drift_allowed",
      "type": "float",
      "level": "advanced",
      "desc": "allowed clock drift (in seconds) between mons before issuing a health warning",
      "long_desc": "",
      "default": 0.050000000000000003,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_clock_drift_warn_backoff": {
      "name": "mon_clock_drift_warn_backoff",
      "type": "float",
      "level": "advanced",
      "desc": "exponential backoff factor for logging clock drift warnings in the cluster log",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_timecheck_interval": {
      "name": "mon_timecheck_interval",
      "type": "float",
      "level": "advanced",
      "desc": "frequency of clock synchronization checks between monitors (seconds)",
      "long_desc": "",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_timecheck_skew_interval": {
      "name": "mon_timecheck_skew_interval",
      "type": "float",
      "level": "advanced",
      "desc": "frequency of clock synchronization (re)checks between monitors while clocks are believed to be skewed (seconds)",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_timecheck_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "paxos_stash_full_interval": {
      "name": "paxos_stash_full_interval",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 25,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "paxos_max_join_drift": {
      "name": "paxos_max_join_drift",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "paxos_propose_interval": {
      "name": "paxos_propose_interval",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "paxos_min_wait": {
      "name": "paxos_min_wait",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0.050000000000000003,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "paxos_min": {
      "name": "paxos_min",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "paxos_trim_min": {
      "name": "paxos_trim_min",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 250,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "paxos_trim_max": {
      "name": "paxos_trim_max",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "paxos_service_trim_min": {
      "name": "paxos_service_trim_min",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 250,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "paxos_service_trim_max": {
      "name": "paxos_service_trim_max",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "paxos_service_trim_max_multiplier": {
      "name": "paxos_service_trim_max_multiplier",
      "type": "uint",
      "level": "advanced",
      "desc": "factor by which paxos_service_trim_max will be multiplied to get a new upper bound when trim sizes are high  (0 disables it)",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 0,
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "paxos_kill_at": {
      "name": "paxos_kill_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_auth_validate_all_caps": {
      "name": "mon_auth_validate_all_caps",
      "type": "bool",
      "level": "advanced",
      "desc": "Whether to parse non-monitor capabilities set by the 'ceph auth ...' commands. Disabling this saves CPU on the monitor, but allows invalid capabilities to be set, and only be rejected later, when they are used.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_mds_force_trim_to": {
      "name": "mon_mds_force_trim_to",
      "type": "int",
      "level": "dev",
      "desc": "force mons to trim mdsmaps/fsmaps up to this epoch",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_fsmap_prune_threshold": {
      "name": "mon_fsmap_prune_threshold",
      "type": "secs",
      "level": "advanced",
      "desc": "prune fsmap older than this threshold in seconds",
      "long_desc": "",
      "default": "300",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_beacon_mon_down_grace": {
      "name": "mds_beacon_mon_down_grace",
      "type": "secs",
      "level": "advanced",
      "desc": "tolerance in seconds for missed MDS beacons to monitors",
      "long_desc": "",
      "default": "60",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_mds_skip_sanity": {
      "name": "mon_mds_skip_sanity",
      "type": "bool",
      "level": "advanced",
      "desc": "skip sanity checks on fsmap/mdsmap",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_mds_blocklist_interval": {
      "name": "mon_mds_blocklist_interval",
      "type": "float",
      "level": "dev",
      "desc": "Duration in seconds that blocklist entries for MDS daemons remain in the OSD map",
      "long_desc": "",
      "default": 86400,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 3600,
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_mgr_blocklist_interval": {
      "name": "mon_mgr_blocklist_interval",
      "type": "float",
      "level": "dev",
      "desc": "Duration in seconds that blocklist entries for mgr daemons remain in the OSD map",
      "long_desc": "",
      "default": 86400,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 3600,
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_osd_laggy_halflife": {
      "name": "mon_osd_laggy_halflife",
      "type": "int",
      "level": "advanced",
      "desc": "halflife of OSD 'lagginess' factor",
      "long_desc": "",
      "default": 3600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_laggy_weight": {
      "name": "mon_osd_laggy_weight",
      "type": "float",
      "level": "advanced",
      "desc": "how heavily to weight OSD marking itself back up in overall laggy_probability",
      "long_desc": "1.0 means that an OSD marking itself back up (because it was marked down but not actually dead) means a 100% laggy_probability; 0.0 effectively disables tracking of laggy_probability.",
      "default": 0.29999999999999999,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_laggy_max_interval": {
      "name": "mon_osd_laggy_max_interval",
      "type": "int",
      "level": "advanced",
      "desc": "cap value for period for OSD to be marked for laggy_interval calculation",
      "long_desc": "",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_adjust_heartbeat_grace": {
      "name": "mon_osd_adjust_heartbeat_grace",
      "type": "bool",
      "level": "advanced",
      "desc": "increase OSD heartbeat grace if peers appear to be laggy",
      "long_desc": "If an OSD is marked down but then marks itself back up, it implies it wasn't actually down but was unable to respond to heartbeats.  If this option is true, we can use the laggy_probability and laggy_interval values calculated to model this situation to increase the heartbeat grace period for this OSD so that it isn't marked down again.  laggy_probability is an estimated probability that the given OSD is down because it is laggy (not actually down), and laggy_interval is an estiate on how long it stays down when it is laggy.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osd_laggy_halflife",
        "mon_osd_laggy_weight",
        "mon_osd_laggy_max_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_adjust_down_out_interval": {
      "name": "mon_osd_adjust_down_out_interval",
      "type": "bool",
      "level": "advanced",
      "desc": "increase the mon_osd_down_out_interval if an OSD appears to be laggy",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osd_adjust_heartbeat_grace"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_auto_mark_in": {
      "name": "mon_osd_auto_mark_in",
      "type": "bool",
      "level": "advanced",
      "desc": "mark any OSD that comes up 'in'",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_auto_mark_auto_out_in": {
      "name": "mon_osd_auto_mark_auto_out_in",
      "type": "bool",
      "level": "advanced",
      "desc": "mark any OSD that comes up that was automatically marked 'out' back 'in'",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osd_down_out_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_auto_mark_new_in": {
      "name": "mon_osd_auto_mark_new_in",
      "type": "bool",
      "level": "advanced",
      "desc": "mark any new OSD that comes up 'in'",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_destroyed_out_interval": {
      "name": "mon_osd_destroyed_out_interval",
      "type": "int",
      "level": "advanced",
      "desc": "mark any OSD 'out' that has been 'destroy'ed for this long (seconds)",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_down_out_interval": {
      "name": "mon_osd_down_out_interval",
      "type": "int",
      "level": "advanced",
      "desc": "mark any OSD 'out' that has been 'down' for this long (seconds)",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_down_out_subtree_limit": {
      "name": "mon_osd_down_out_subtree_limit",
      "type": "str",
      "level": "advanced",
      "desc": "do not automatically mark OSDs 'out' if an entire subtree of this size is down",
      "long_desc": "",
      "default": "rack",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osd_down_out_interval"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_osd_min_up_ratio": {
      "name": "mon_osd_min_up_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "do not automatically mark OSDs 'out' if fewer than this many OSDs are 'up'",
      "long_desc": "",
      "default": 0.29999999999999999,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osd_down_out_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_min_in_ratio": {
      "name": "mon_osd_min_in_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "do not automatically mark OSDs 'out' if fewer than this many OSDs are 'in'",
      "long_desc": "",
      "default": 0.75,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osd_down_out_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_warn_op_age": {
      "name": "mon_osd_warn_op_age",
      "type": "float",
      "level": "advanced",
      "desc": "issue REQUEST_SLOW health warning if OSD ops are slower than this age (seconds)",
      "long_desc": "",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mgr",
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_warn_num_repaired": {
      "name": "mon_osd_warn_num_repaired",
      "type": "uint",
      "level": "advanced",
      "desc": "issue OSD_TOO_MANY_REPAIRS health warning if an OSD has more than this many read repairs",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_prime_pg_temp": {
      "name": "mon_osd_prime_pg_temp",
      "type": "bool",
      "level": "dev",
      "desc": "minimize peering work by priming pg_temp values after a map change",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_prime_pg_temp_max_time": {
      "name": "mon_osd_prime_pg_temp_max_time",
      "type": "float",
      "level": "dev",
      "desc": "maximum time to spend precalculating PG mappings on map change (seconds)",
      "long_desc": "",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_prime_pg_temp_max_estimate": {
      "name": "mon_osd_prime_pg_temp_max_estimate",
      "type": "float",
      "level": "advanced",
      "desc": "calculate all PG mappings if estimated fraction of PGs that change is above this amount",
      "long_desc": "",
      "default": 0.25,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_blocklist_default_expire": {
      "name": "mon_osd_blocklist_default_expire",
      "type": "float",
      "level": "advanced",
      "desc": "Duration in seconds that blocklist entries for clients remain in the OSD map",
      "long_desc": "",
      "default": 3600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_crush_smoke_test": {
      "name": "mon_osd_crush_smoke_test",
      "type": "bool",
      "level": "advanced",
      "desc": "perform a smoke test on any new CRUSH map before accepting changes",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_smart_report_timeout": {
      "name": "mon_smart_report_timeout",
      "type": "uint",
      "level": "advanced",
      "desc": "Timeout (in seconds) for smartctl to run, default is set to 5",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_on_older_version": {
      "name": "mon_warn_on_older_version",
      "type": "bool",
      "level": "advanced",
      "desc": "issue DAEMON_OLD_VERSION health warning if daemons are not all running the same version",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_warn_older_version_delay": {
      "name": "mon_warn_older_version_delay",
      "type": "secs",
      "level": "advanced",
      "desc": "issue DAEMON_OLD_VERSION health warning after this amount of time has elapsed",
      "long_desc": "",
      "default": "604800",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_data": {
      "name": "mon_data",
      "type": "str",
      "level": "advanced",
      "desc": "path to mon database",
      "long_desc": "",
      "default": "/var/lib/ceph/mon/$cluster-$id",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update"
      ]
    }
  },
  {
    "mon_rocksdb_options": {
      "name": "mon_rocksdb_options",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "write_buffer_size=33554432,compression=kNoCompression,level_compaction_dynamic_level_bytes=true",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mon_enable_op_tracker": {
      "name": "mon_enable_op_tracker",
      "type": "bool",
      "level": "advanced",
      "desc": "enable/disable MON op tracking",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_compact_on_start": {
      "name": "mon_compact_on_start",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_compact_on_bootstrap": {
      "name": "mon_compact_on_bootstrap",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_compact_on_trim": {
      "name": "mon_compact_on_trim",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_op_complaint_time": {
      "name": "mon_op_complaint_time",
      "type": "secs",
      "level": "advanced",
      "desc": "time after which to consider a monitor operation blocked after no updates",
      "long_desc": "",
      "default": "30",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_op_log_threshold": {
      "name": "mon_op_log_threshold",
      "type": "int",
      "level": "advanced",
      "desc": "max number of slow ops to display",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_op_history_size": {
      "name": "mon_op_history_size",
      "type": "uint",
      "level": "advanced",
      "desc": "max number of completed ops to track",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_op_history_duration": {
      "name": "mon_op_history_duration",
      "type": "secs",
      "level": "advanced",
      "desc": "expiration time in seconds of historical MON OPS",
      "long_desc": "",
      "default": "600",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_op_history_slow_op_size": {
      "name": "mon_op_history_slow_op_size",
      "type": "uint",
      "level": "advanced",
      "desc": "max number of slow historical MON OPS to keep",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_op_history_slow_op_threshold": {
      "name": "mon_op_history_slow_op_threshold",
      "type": "secs",
      "level": "advanced",
      "desc": "duration of an op to be considered as a historical slow op",
      "long_desc": "",
      "default": "10",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osdmap_full_prune_enabled": {
      "name": "mon_osdmap_full_prune_enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "enables pruning full osdmap versions when we go over a given number of maps",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osdmap_full_prune_min",
        "mon_osdmap_full_prune_interval",
        "mon_osdmap_full_prune_txsize"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osdmap_full_prune_min": {
      "name": "mon_osdmap_full_prune_min",
      "type": "uint",
      "level": "advanced",
      "desc": "minimum number of versions in the store to trigger full map pruning",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osdmap_full_prune_enabled",
        "mon_osdmap_full_prune_interval",
        "mon_osdmap_full_prune_txsize"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osdmap_full_prune_interval": {
      "name": "mon_osdmap_full_prune_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "interval between maps that will not be pruned; maps in the middle will be pruned.",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osdmap_full_prune_enabled",
        "mon_osdmap_full_prune_interval",
        "mon_osdmap_full_prune_txsize"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osdmap_full_prune_txsize": {
      "name": "mon_osdmap_full_prune_txsize",
      "type": "uint",
      "level": "advanced",
      "desc": "number of maps we will prune per iteration",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "mon_osdmap_full_prune_enabled",
        "mon_osdmap_full_prune_interval",
        "mon_osdmap_full_prune_txsize"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_cache_size": {
      "name": "mon_osd_cache_size",
      "type": "int",
      "level": "advanced",
      "desc": "maximum number of OSDMaps to cache in memory",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_cache_size_min": {
      "name": "mon_osd_cache_size_min",
      "type": "size",
      "level": "advanced",
      "desc": "The minimum amount of bytes to be kept mapped in memory for osd monitor caches.",
      "long_desc": "",
      "default": "134217728",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_mapping_pgs_per_chunk": {
      "name": "mon_osd_mapping_pgs_per_chunk",
      "type": "int",
      "level": "dev",
      "desc": "granularity of PG placement calculation background work",
      "long_desc": "",
      "default": 4096,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_clean_pg_upmaps_per_chunk": {
      "name": "mon_clean_pg_upmaps_per_chunk",
      "type": "uint",
      "level": "dev",
      "desc": "granularity of PG upmap validation background work",
      "long_desc": "",
      "default": 256,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_max_creating_pgs": {
      "name": "mon_osd_max_creating_pgs",
      "type": "int",
      "level": "advanced",
      "desc": "maximum number of PGs the mon will create at once",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_osd_max_initial_pgs": {
      "name": "mon_osd_max_initial_pgs",
      "type": "int",
      "level": "advanced",
      "desc": "maximum number of PGs a pool will created with",
      "long_desc": "If the user specifies more PGs than this, the cluster will subsequently split PGs after the pool is created in order to reach the target.",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_memory_target": {
      "name": "mon_memory_target",
      "type": "size",
      "level": "basic",
      "desc": "The amount of bytes pertaining to osd monitor caches and kv cache to be kept mapped in memory with cache auto-tuning enabled",
      "long_desc": "",
      "default": "2147483648",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_memory_autotune": {
      "name": "mon_memory_autotune",
      "type": "bool",
      "level": "basic",
      "desc": "Autotune the cache memory being used for osd monitors and kv database",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mon_cpu_threads": {
      "name": "mon_cpu_threads",
      "type": "int",
      "level": "advanced",
      "desc": "worker threads for CPU intensive background work",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_tick_interval": {
      "name": "mon_tick_interval",
      "type": "int",
      "level": "advanced",
      "desc": "interval for internal mon background checks",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_session_timeout": {
      "name": "mon_session_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "close inactive mon client connections after this many seconds",
      "long_desc": "",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_subscribe_interval": {
      "name": "mon_subscribe_interval",
      "type": "float",
      "level": "dev",
      "desc": "subscribe interval for pre-jewel clients",
      "long_desc": "",
      "default": 86400,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mon_use_min_delay_socket": {
      "name": "mon_use_min_delay_socket",
      "type": "bool",
      "level": "advanced",
      "desc": "priority packets between mons",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mon"
      ],
      "see_also": [
        "osd_heartbeat_use_min_delay_socket"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_numa_prefer_iface": {
      "name": "osd_numa_prefer_iface",
      "type": "bool",
      "level": "advanced",
      "desc": "prefer IP on network interface on same numa node as storage",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_numa_auto_affinity"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_numa_auto_affinity": {
      "name": "osd_numa_auto_affinity",
      "type": "bool",
      "level": "advanced",
      "desc": "automatically set affinity to numa node when storage and network match",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_numa_node": {
      "name": "osd_numa_node",
      "type": "int",
      "level": "advanced",
      "desc": "set affinity to a numa node (-1 for none)",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_numa_auto_affinity"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "set_keepcaps": {
      "name": "set_keepcaps",
      "type": "bool",
      "level": "advanced",
      "desc": "set the keepcaps flag before changing UID, preserving the permitted capability set",
      "long_desc": "When ceph switches from root to the ceph uid, all capabilities in all sets are eraseed. If a component that is capability aware needs a specific capability, the keepcaps flag maintains the permitted capability set, allowing the capabilities in the effective set to be activated as needed.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_smart_report_timeout": {
      "name": "osd_smart_report_timeout",
      "type": "uint",
      "level": "advanced",
      "desc": "Timeout (in seconds) for smartctl to run, default is set to 5",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_check_max_object_name_len_on_startup": {
      "name": "osd_check_max_object_name_len_on_startup",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_backfills": {
      "name": "osd_max_backfills",
      "type": "uint",
      "level": "advanced",
      "desc": "Maximum number of concurrent local and remote backfills or recoveries per OSD",
      "long_desc": "There can be osd_max_backfills local reservations AND the same remote reservations per OSD. So a value of 1 lets this OSD participate as 1 PG primary in recovery and 1 shard of another recovering PG.",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_min_recovery_priority": {
      "name": "osd_min_recovery_priority",
      "type": "int",
      "level": "advanced",
      "desc": "Minimum priority below which recovery is not performed",
      "long_desc": "The purpose here is to prevent the cluster from doing *any* lower priority work (e.g., rebalancing) below this threshold and focus solely on higher priority work (e.g., replicating degraded objects).",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_backfill_retry_interval": {
      "name": "osd_backfill_retry_interval",
      "type": "float",
      "level": "advanced",
      "desc": "how frequently to retry backfill reservations after being denied (e.g., due to a full OSD)",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recovery_retry_interval": {
      "name": "osd_recovery_retry_interval",
      "type": "float",
      "level": "advanced",
      "desc": "how frequently to retry recovery reservations after being denied (e.g., due to a full OSD)",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recovery_sleep": {
      "name": "osd_recovery_sleep",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next recovery or backfill op. This setting overrides _ssd, _hdd, and _hybrid if non-zero.",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_recovery_sleep_hdd": {
      "name": "osd_recovery_sleep_hdd",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next recovery or backfill op for HDDs",
      "long_desc": "",
      "default": 0.10000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_recovery_sleep_ssd": {
      "name": "osd_recovery_sleep_ssd",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next recovery or backfill op for SSDs",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_recovery_sleep"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_recovery_sleep_hybrid": {
      "name": "osd_recovery_sleep_hybrid",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next recovery or backfill op when data is on HDD and journal is on SSD",
      "long_desc": "",
      "default": 0.025000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_recovery_sleep"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_snap_trim_sleep": {
      "name": "osd_snap_trim_sleep",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next snap trim. This setting overrides _ssd, _hdd, and _hybrid if non-zero.",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_snap_trim_sleep_hdd": {
      "name": "osd_snap_trim_sleep_hdd",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next snap trim for HDDs",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_snap_trim_sleep_ssd": {
      "name": "osd_snap_trim_sleep_ssd",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next snap trim for SSDs",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_snap_trim_sleep_hybrid": {
      "name": "osd_snap_trim_sleep_hybrid",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next snap trim when data is on HDD and journal is on SSD",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_scrub_invalid_stats": {
      "name": "osd_scrub_invalid_stats",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_scrubs": {
      "name": "osd_max_scrubs",
      "type": "int",
      "level": "advanced",
      "desc": "Maximum concurrent scrubs on a single OSD",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_during_recovery": {
      "name": "osd_scrub_during_recovery",
      "type": "bool",
      "level": "advanced",
      "desc": "Allow scrubbing when PGs on the OSD are undergoing recovery",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_debug_trim_objects": {
      "name": "osd_debug_trim_objects",
      "type": "bool",
      "level": "advanced",
      "desc": "Asserts that no clone-objects were added to a snap after we start trimming it",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_repair_during_recovery": {
      "name": "osd_repair_during_recovery",
      "type": "bool",
      "level": "advanced",
      "desc": "Allow requested repairing when PGs on the OSD are undergoing recovery",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_begin_hour": {
      "name": "osd_scrub_begin_hour",
      "type": "int",
      "level": "advanced",
      "desc": "Restrict scrubbing to this hour of the day or later",
      "long_desc": "Use osd_scrub_begin_hour=0 and osd_scrub_end_hour=0 for the entire day.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_end_hour"
      ],
      "min": 0,
      "max": 23,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_end_hour": {
      "name": "osd_scrub_end_hour",
      "type": "int",
      "level": "advanced",
      "desc": "Restrict scrubbing to hours of the day earlier than this",
      "long_desc": "Use osd_scrub_begin_hour=0 and osd_scrub_end_hour=0 for the entire day.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_begin_hour"
      ],
      "min": 0,
      "max": 23,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_begin_week_day": {
      "name": "osd_scrub_begin_week_day",
      "type": "int",
      "level": "advanced",
      "desc": "Restrict scrubbing to this day of the week or later",
      "long_desc": "0 = Sunday, 1 = Monday, etc. Use osd_scrub_begin_week_day=0 osd_scrub_end_week_day=0 for the entire week.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_end_week_day"
      ],
      "min": 0,
      "max": 6,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_end_week_day": {
      "name": "osd_scrub_end_week_day",
      "type": "int",
      "level": "advanced",
      "desc": "Restrict scrubbing to days of the week earlier than this",
      "long_desc": "0 = Sunday, 1 = Monday, etc. Use osd_scrub_begin_week_day=0 osd_scrub_end_week_day=0 for the entire week.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_begin_week_day"
      ],
      "min": 0,
      "max": 6,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_load_threshold": {
      "name": "osd_scrub_load_threshold",
      "type": "float",
      "level": "advanced",
      "desc": "Allow scrubbing when system load divided by number of CPUs is below this value",
      "long_desc": "",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_min_interval": {
      "name": "osd_scrub_min_interval",
      "type": "float",
      "level": "advanced",
      "desc": "The desired interval between scrubs of a specific PG.",
      "long_desc": "",
      "default": 86400,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_max_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_max_interval": {
      "name": "osd_scrub_max_interval",
      "type": "float",
      "level": "advanced",
      "desc": "Scrub each PG no less often than this interval",
      "long_desc": "",
      "default": 604800,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_min_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_interval_randomize_ratio": {
      "name": "osd_scrub_interval_randomize_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "Ratio of scrub interval to randomly vary",
      "long_desc": "This prevents a scrub 'stampede' by randomly varying the scrub intervals so that they are soon uniformly distributed over the week",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_min_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_backoff_ratio": {
      "name": "osd_scrub_backoff_ratio",
      "type": "float",
      "level": "dev",
      "desc": "Backoff ratio for scheduling scrubs",
      "long_desc": "Probability that a particular OSD tick instance will skip scrub scheduling. 66% means that approximately one of three ticks will cause scrub scheduling.",
      "default": 0.66000000000000003,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_chunk_min": {
      "name": "osd_scrub_chunk_min",
      "type": "int",
      "level": "advanced",
      "desc": "Minimum number of objects to deep-scrub in a single chunk",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_chunk_max"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_chunk_max": {
      "name": "osd_scrub_chunk_max",
      "type": "int",
      "level": "advanced",
      "desc": "Maximum number of objects to deep-scrub in a single chunk",
      "long_desc": "",
      "default": 25,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_chunk_min"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_shallow_scrub_chunk_min": {
      "name": "osd_shallow_scrub_chunk_min",
      "type": "int",
      "level": "advanced",
      "desc": "Minimum number of objects to scrub in a single chunk",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_shallow_scrub_chunk_max",
        "osd_scrub_chunk_min"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_shallow_scrub_chunk_max": {
      "name": "osd_shallow_scrub_chunk_max",
      "type": "int",
      "level": "advanced",
      "desc": "Maximum number of objects to scrub in a single chunk",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_shallow_scrub_chunk_min",
        "osd_scrub_chunk_max"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_sleep": {
      "name": "osd_scrub_sleep",
      "type": "float",
      "level": "advanced",
      "desc": "Duration (in seconds) of delay injected between chunks when scrubbing",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_scrub_extended_sleep": {
      "name": "osd_scrub_extended_sleep",
      "type": "float",
      "level": "advanced",
      "desc": "Duration (in seconds) of delay injected between chunks when scrubbing out of scrubbing hours",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_begin_hour",
        "osd_scrub_end_hour",
        "osd_scrub_begin_week_day",
        "osd_scrub_end_week_day"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_auto_repair": {
      "name": "osd_scrub_auto_repair",
      "type": "bool",
      "level": "advanced",
      "desc": "Automatically repair damaged objects detected during scrub",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_auto_repair_num_errors": {
      "name": "osd_scrub_auto_repair_num_errors",
      "type": "uint",
      "level": "advanced",
      "desc": "Maximum number of detected errors to automatically repair",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_scrub_auto_repair"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_max_preemptions": {
      "name": "osd_scrub_max_preemptions",
      "type": "uint",
      "level": "advanced",
      "desc": "Set the maximum number of times we will preempt a deep scrub due to a client operation before blocking client IO to complete the scrub",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": 0,
      "max": 30,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_deep_scrub_interval": {
      "name": "osd_deep_scrub_interval",
      "type": "float",
      "level": "advanced",
      "desc": "Deep scrub each PG (i.e., verify data checksums) at least this often",
      "long_desc": "",
      "default": 604800,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_deep_scrub_randomize_ratio": {
      "name": "osd_deep_scrub_randomize_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "Scrubs will randomly become deep scrubs at this rate (0.15 -> 15% of scrubs are deep)",
      "long_desc": "This prevents a deep scrub 'stampede' by spreading deep scrubs so they are uniformly distributed over the week",
      "default": 0.14999999999999999,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_deep_scrub_stride": {
      "name": "osd_deep_scrub_stride",
      "type": "size",
      "level": "advanced",
      "desc": "Number of bytes to read from an object at a time during deep scrub",
      "long_desc": "",
      "default": "524288",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_deep_scrub_keys": {
      "name": "osd_deep_scrub_keys",
      "type": "int",
      "level": "advanced",
      "desc": "Number of keys to read from an object at a time during deep scrub",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_deep_scrub_update_digest_min_age": {
      "name": "osd_deep_scrub_update_digest_min_age",
      "type": "int",
      "level": "advanced",
      "desc": "Update overall object digest only if object was last modified longer ago than this",
      "long_desc": "",
      "default": 7200,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_deep_scrub_large_omap_object_key_threshold": {
      "name": "osd_deep_scrub_large_omap_object_key_threshold",
      "type": "uint",
      "level": "advanced",
      "desc": "Warn when we encounter an object with more omap keys than this",
      "long_desc": "",
      "default": 200000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd",
        "mds"
      ],
      "see_also": [
        "osd_deep_scrub_large_omap_object_value_sum_threshold"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_deep_scrub_large_omap_object_value_sum_threshold": {
      "name": "osd_deep_scrub_large_omap_object_value_sum_threshold",
      "type": "size",
      "level": "advanced",
      "desc": "Warn when we encounter an object with more omap key bytes than this",
      "long_desc": "",
      "default": "1073741824",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_deep_scrub_large_omap_object_key_threshold"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_blocked_scrub_grace_period": {
      "name": "osd_blocked_scrub_grace_period",
      "type": "int",
      "level": "advanced",
      "desc": "Time (seconds) before issuing a cluster-log warning",
      "long_desc": "Waiting too long for an object in the scrubbed chunk to be unlocked.",
      "default": 120,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_stats_update_period_scrubbing": {
      "name": "osd_stats_update_period_scrubbing",
      "type": "int",
      "level": "advanced",
      "desc": "Stats update period (seconds) when scrubbing",
      "long_desc": "A PG actively scrubbing (or blocked while scrubbing) publishes its stats (inc. scrub/block duration) every this many seconds.",
      "default": 15,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_stats_update_period_not_scrubbing": {
      "name": "osd_stats_update_period_not_scrubbing",
      "type": "int",
      "level": "advanced",
      "desc": "Stats update period (seconds) when not scrubbing",
      "long_desc": "A PG we are a primary of, publishes its stats (inc. scrub/block duration) every this many seconds.",
      "default": 120,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_scrub_disable_reservation_queuing": {
      "name": "osd_scrub_disable_reservation_queuing",
      "type": "bool",
      "level": "advanced",
      "desc": "Disable queuing of scrub reservations",
      "long_desc": "When set - scrub replica reservations are responded to immediately, with either success or failure (the pre-Squid version behaviour). This configuration option is introduced to support mixed-version clusters and debugging, and will be removed in the next release.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_class_dir": {
      "name": "osd_class_dir",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "/usr/lib64/rados-classes",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "osd_open_classes_on_start": {
      "name": "osd_open_classes_on_start",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_class_load_list": {
      "name": "osd_class_load_list",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "cephfs hello journal lock log numops otp rbd refcount rgw rgw_gc timeindex user version cas cmpomap queue 2pc_queue fifo",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "osd_class_default_list": {
      "name": "osd_class_default_list",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "cephfs hello journal lock log numops otp rbd refcount rgw rgw_gc timeindex user version cas cmpomap queue 2pc_queue fifo",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "osd_agent_max_ops": {
      "name": "osd_agent_max_ops",
      "type": "int",
      "level": "advanced",
      "desc": "maximum concurrent tiering operations for tiering agent",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_agent_max_low_ops": {
      "name": "osd_agent_max_low_ops",
      "type": "int",
      "level": "advanced",
      "desc": "maximum concurrent low-priority tiering operations for tiering agent",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_agent_min_evict_effort": {
      "name": "osd_agent_min_evict_effort",
      "type": "float",
      "level": "advanced",
      "desc": "minimum effort to expend evicting clean objects",
      "long_desc": "",
      "default": 0.10000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": 0,
      "max": 0.98999999999999999,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_agent_quantize_effort": {
      "name": "osd_agent_quantize_effort",
      "type": "float",
      "level": "advanced",
      "desc": "size of quantize unit for eviction effort",
      "long_desc": "",
      "default": 0.10000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_agent_delay_time": {
      "name": "osd_agent_delay_time",
      "type": "float",
      "level": "advanced",
      "desc": "how long agent should sleep if it has no work to do",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_agent_hist_halflife": {
      "name": "osd_agent_hist_halflife",
      "type": "int",
      "level": "advanced",
      "desc": "halflife of agent atime and temp histograms",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_agent_slop": {
      "name": "osd_agent_slop",
      "type": "float",
      "level": "advanced",
      "desc": "slop factor to avoid switching tiering flush and eviction mode",
      "long_desc": "",
      "default": 0.02,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_find_best_info_ignore_history_les": {
      "name": "osd_find_best_info_ignore_history_les",
      "type": "bool",
      "level": "dev",
      "desc": "ignore last_epoch_started value when peering AND PROBABLY LOSE DATA",
      "long_desc": "THIS IS AN EXTREMELY DANGEROUS OPTION THAT SHOULD ONLY BE USED AT THE DIRECTION OF A DEVELOPER.  It makes peering ignore the last_epoch_started value when peering, which can allow the OSD to believe an OSD has an authoritative view of a PG's contents even when it is in fact old and stale, typically leading to data loss (by believing a stale PG is up to date).",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_uuid": {
      "name": "osd_uuid",
      "type": "uuid",
      "level": "advanced",
      "desc": "uuid label for a new OSD",
      "long_desc": "",
      "default": "00000000-0000-0000-0000-000000000000",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "osd_data": {
      "name": "osd_data",
      "type": "str",
      "level": "advanced",
      "desc": "path to OSD data",
      "long_desc": "",
      "default": "/var/lib/ceph/osd/$cluster-$id",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update"
      ]
    }
  },
  {
    "osd_journal": {
      "name": "osd_journal",
      "type": "str",
      "level": "advanced",
      "desc": "path to OSD journal (when FileStore backend is in use)",
      "long_desc": "",
      "default": "/var/lib/ceph/osd/$cluster-$id/journal",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update"
      ]
    }
  },
  {
    "osd_journal_size": {
      "name": "osd_journal_size",
      "type": "size",
      "level": "advanced",
      "desc": "size of FileStore journal (in MiB)",
      "long_desc": "",
      "default": "5120",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "create"
      ]
    }
  },
  {
    "osd_journal_flush_on_shutdown": {
      "name": "osd_journal_flush_on_shutdown",
      "type": "bool",
      "level": "advanced",
      "desc": "flush FileStore journal contents during clean OSD shutdown",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_compact_on_start": {
      "name": "osd_compact_on_start",
      "type": "bool",
      "level": "advanced",
      "desc": "compact OSD's object store's OMAP on start",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_os_flags": {
      "name": "osd_os_flags",
      "type": "uint",
      "level": "dev",
      "desc": "flags to skip filestore omap or journal initialization",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_write_size": {
      "name": "osd_max_write_size",
      "type": "size",
      "level": "advanced",
      "desc": "Maximum size of a RADOS write operation in megabytes",
      "long_desc": "This setting prevents clients from doing very large writes to RADOS.  If you set this to a value below what clients expect, they will receive an error when attempting to write to the cluster.",
      "default": "90",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "4",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_pgls": {
      "name": "osd_max_pgls",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of results when listing objects in a pool",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_client_message_size_cap": {
      "name": "osd_client_message_size_cap",
      "type": "size",
      "level": "advanced",
      "desc": "maximum memory to devote to in-flight client requests",
      "long_desc": "If this value is exceeded, the OSD will not read any new client data off of the network until memory is freed.",
      "default": "524288000",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_client_message_cap": {
      "name": "osd_client_message_cap",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of in-flight client requests",
      "long_desc": "",
      "default": 256,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_crush_update_on_start": {
      "name": "osd_crush_update_on_start",
      "type": "bool",
      "level": "advanced",
      "desc": "update OSD CRUSH location on startup",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_class_update_on_start": {
      "name": "osd_class_update_on_start",
      "type": "bool",
      "level": "advanced",
      "desc": "set OSD device class on startup",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_crush_initial_weight": {
      "name": "osd_crush_initial_weight",
      "type": "float",
      "level": "advanced",
      "desc": "if >= 0, initial CRUSH weight for newly created OSDs",
      "long_desc": "If this value is negative, the size of the OSD in TiB is used.",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_allow_recovery_below_min_size": {
      "name": "osd_allow_recovery_below_min_size",
      "type": "bool",
      "level": "dev",
      "desc": "allow replicated pools to recover with < min_size active members",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_map_share_max_epochs": {
      "name": "osd_map_share_max_epochs",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 40,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_map_cache_size": {
      "name": "osd_map_cache_size",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_pg_epoch_max_lag_factor": {
      "name": "osd_pg_epoch_max_lag_factor",
      "type": "float",
      "level": "advanced",
      "desc": "Max multiple of the map cache that PGs can lag before we throttle map injest",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_map_cache_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_inject_bad_map_crc_probability": {
      "name": "osd_inject_bad_map_crc_probability",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_inject_failure_on_pg_removal": {
      "name": "osd_inject_failure_on_pg_removal",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_markdown_period": {
      "name": "osd_max_markdown_period",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_markdown_count": {
      "name": "osd_max_markdown_count",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_thread_timeout": {
      "name": "osd_op_thread_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 15,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_thread_suicide_timeout": {
      "name": "osd_op_thread_suicide_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 150,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_pq_max_tokens_per_priority": {
      "name": "osd_op_pq_max_tokens_per_priority",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 4194304,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_pq_min_cost": {
      "name": "osd_op_pq_min_cost",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recover_clone_overlap": {
      "name": "osd_recover_clone_overlap",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_num_cache_shards": {
      "name": "osd_num_cache_shards",
      "type": "size",
      "level": "advanced",
      "desc": "The number of cache shards to use in the object store.",
      "long_desc": "",
      "default": "32",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_aggregated_slow_ops_logging": {
      "name": "osd_aggregated_slow_ops_logging",
      "type": "bool",
      "level": "advanced",
      "desc": "Allow OSD daemon to send an aggregated slow ops to the cluster log",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_num_threads_per_shard": {
      "name": "osd_op_num_threads_per_shard",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_op_num_threads_per_shard_hdd": {
      "name": "osd_op_num_threads_per_shard_hdd",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_num_threads_per_shard"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_op_num_threads_per_shard_ssd": {
      "name": "osd_op_num_threads_per_shard_ssd",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_num_threads_per_shard"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_op_num_shards": {
      "name": "osd_op_num_shards",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_op_num_shards_hdd": {
      "name": "osd_op_num_shards_hdd",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_num_shards"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_op_num_shards_ssd": {
      "name": "osd_op_num_shards_ssd",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 8,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_num_shards"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_skip_data_digest": {
      "name": "osd_skip_data_digest",
      "type": "bool",
      "level": "dev",
      "desc": "Do not store full-object checksums if the backend (bluestore) does its own checksums.  Only usable with all BlueStore OSDs.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_op_queue": {
      "name": "osd_op_queue",
      "type": "str",
      "level": "advanced",
      "desc": "which operation priority queue algorithm to use",
      "long_desc": "which operation priority queue algorithm to use",
      "default": "mclock_scheduler",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue_cut_off"
      ],
      "enum_values": [
        "wpq",
        "mclock_scheduler",
        "debug_random"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "osd_op_queue_cut_off": {
      "name": "osd_op_queue_cut_off",
      "type": "str",
      "level": "advanced",
      "desc": "the threshold between high priority ops and low priority ops",
      "long_desc": "the threshold between high priority ops that use strict priority ordering and low priority ops that use a fairness algorithm that may or may not incorporate priority",
      "default": "high",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "enum_values": [
        "low",
        "high",
        "debug_random"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "osd_mclock_scheduler_client_res": {
      "name": "osd_mclock_scheduler_client_res",
      "type": "float",
      "level": "advanced",
      "desc": "IO proportion reserved for each client (default). The default value of 0 specifies the lowest possible reservation. Any value greater than 0 and up to 1.0 specifies the minimum IO proportion to reserve for each client in terms of a fraction of the OSD's maximum IOPS capacity.",
      "long_desc": "Only considered for osd_op_queue = mclock_scheduler",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mclock_scheduler_client_wgt": {
      "name": "osd_mclock_scheduler_client_wgt",
      "type": "uint",
      "level": "advanced",
      "desc": "IO share for each client (default) over reservation",
      "long_desc": "Only considered for osd_op_queue = mclock_scheduler",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mclock_scheduler_client_lim": {
      "name": "osd_mclock_scheduler_client_lim",
      "type": "float",
      "level": "advanced",
      "desc": "IO limit for each client (default) over reservation. The default value of 0 specifies no limit enforcement, which means each client can use the maximum possible IOPS capacity of the OSD. Any value greater than 0 and up to 1.0 specifies the upper IO limit over reservation that each client receives in terms of a fraction of the OSD's maximum IOPS capacity.",
      "long_desc": "Only considered for osd_op_queue = mclock_scheduler",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mclock_scheduler_background_recovery_res": {
      "name": "osd_mclock_scheduler_background_recovery_res",
      "type": "float",
      "level": "advanced",
      "desc": "IO proportion reserved for background recovery (default). The default value of 0 specifies the lowest possible reservation. Any value greater than 0 and up to 1.0 specifies the minimum IO proportion to reserve for background recovery operations in terms of a fraction of the OSD's maximum IOPS capacity.",
      "long_desc": "Only considered for osd_op_queue = mclock_scheduler",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mclock_scheduler_background_recovery_wgt": {
      "name": "osd_mclock_scheduler_background_recovery_wgt",
      "type": "uint",
      "level": "advanced",
      "desc": "IO share for each background recovery over reservation",
      "long_desc": "Only considered for osd_op_queue = mclock_scheduler",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mclock_scheduler_background_recovery_lim": {
      "name": "osd_mclock_scheduler_background_recovery_lim",
      "type": "float",
      "level": "advanced",
      "desc": "IO limit for background recovery over reservation. The default value of 0 specifies no limit enforcement, which means background recovery operation can use the maximum possible IOPS capacity of the OSD. Any value greater than 0 and up to 1.0 specifies the upper IO limit over reservation that background recovery operation receives in terms of a fraction of the OSD's maximum IOPS capacity.",
      "long_desc": "Only considered for osd_op_queue = mclock_scheduler",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mclock_scheduler_background_best_effort_res": {
      "name": "osd_mclock_scheduler_background_best_effort_res",
      "type": "float",
      "level": "advanced",
      "desc": "IO proportion reserved for background best_effort (default). The default value of 0 specifies the lowest possible reservation. Any value greater than 0 and up to 1.0 specifies the minimum IO proportion to reserve for background best_effort operations in terms of a fraction of the OSD's maximum IOPS capacity.",
      "long_desc": "Only considered for osd_op_queue = mclock_scheduler",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mclock_scheduler_background_best_effort_wgt": {
      "name": "osd_mclock_scheduler_background_best_effort_wgt",
      "type": "uint",
      "level": "advanced",
      "desc": "IO share for each background best_effort over reservation",
      "long_desc": "Only considered for osd_op_queue = mclock_scheduler",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mclock_scheduler_background_best_effort_lim": {
      "name": "osd_mclock_scheduler_background_best_effort_lim",
      "type": "float",
      "level": "advanced",
      "desc": "IO limit for background best_effort over reservation. The default value of 0 specifies no limit enforcement, which means background best_effort operation can use the maximum possible IOPS capacity of the OSD. Any value greater than 0 and up to 1.0 specifies the upper IO limit over reservation that background best_effort operation receives in terms of a fraction of the OSD's maximum IOPS capacity.",
      "long_desc": "Only considered for osd_op_queue = mclock_scheduler",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mclock_scheduler_anticipation_timeout": {
      "name": "osd_mclock_scheduler_anticipation_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "mclock anticipation timeout in seconds",
      "long_desc": "the amount of time that mclock waits until the unused resource is forfeited",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_mclock_max_sequential_bandwidth_hdd": {
      "name": "osd_mclock_max_sequential_bandwidth_hdd",
      "type": "size",
      "level": "basic",
      "desc": "The maximum sequential bandwidth in bytes/second of the OSD (for rotational media)",
      "long_desc": "This option specifies the maximum sequential bandwidth to consider for an OSD whose underlying device type is rotational media. This is considered by the mclock scheduler to derive the cost factor to be used in QoS calculations. Only considered for osd_op_queue = mclock_scheduler",
      "default": "157286400",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_mclock_max_sequential_bandwidth_ssd": {
      "name": "osd_mclock_max_sequential_bandwidth_ssd",
      "type": "size",
      "level": "basic",
      "desc": "The maximum sequential bandwidth in bytes/second of the OSD (for solid state media)",
      "long_desc": "This option specifies the maximum sequential bandwidth to consider for an OSD whose underlying device type is solid state media. This is considered by the mclock scheduler to derive the cost factor to be used in QoS calculations. Only considered for osd_op_queue = mclock_scheduler",
      "default": "1258291200",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_mclock_max_capacity_iops_hdd": {
      "name": "osd_mclock_max_capacity_iops_hdd",
      "type": "float",
      "level": "basic",
      "desc": "Max random write IOPS capacity (at 4KiB block size) to consider per OSD (for rotational media)",
      "long_desc": "This option specifies the max OSD random write IOPS capacity per OSD. Contributes in QoS calculations when enabling a dmclock profile. Only considered for osd_op_queue = mclock_scheduler",
      "default": 315,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_mclock_max_capacity_iops_ssd": {
      "name": "osd_mclock_max_capacity_iops_ssd",
      "type": "float",
      "level": "basic",
      "desc": "Max random write IOPS capacity (at 4 KiB block size) to consider per OSD (for solid state media)",
      "long_desc": "This option specifies the max OSD random write IOPS capacity per OSD. Contributes in QoS calculations when enabling a dmclock profile. Only considered for osd_op_queue = mclock_scheduler",
      "default": 21500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_mclock_force_run_benchmark_on_init": {
      "name": "osd_mclock_force_run_benchmark_on_init",
      "type": "bool",
      "level": "advanced",
      "desc": "Force run the OSD benchmark on OSD initialization/boot-up",
      "long_desc": "This option specifies whether the OSD benchmark must be run during the OSD boot-up sequence even if historical data about the OSD iops capacity is available in the MON config store. Enable this to refresh the OSD iops capacity if the underlying device's performance characteristics have changed significantly. Only considered for osd_op_queue = mclock_scheduler.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_mclock_max_capacity_iops_hdd",
        "osd_mclock_max_capacity_iops_ssd"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_mclock_skip_benchmark": {
      "name": "osd_mclock_skip_benchmark",
      "type": "bool",
      "level": "dev",
      "desc": "Skip the OSD benchmark on OSD initialization/boot-up",
      "long_desc": "This option specifies whether the OSD benchmark must be skipped during the OSD boot-up sequence. Only considered for osd_op_queue = mclock_scheduler.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_mclock_max_capacity_iops_hdd",
        "osd_mclock_max_capacity_iops_ssd"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_mclock_profile": {
      "name": "osd_mclock_profile",
      "type": "str",
      "level": "advanced",
      "desc": "Which mclock profile to use",
      "long_desc": "This option specifies the mclock profile to enable - one among the set of built-in profiles or a custom profile. Only considered for osd_op_queue = mclock_scheduler",
      "default": "balanced",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_op_queue"
      ],
      "enum_values": [
        "balanced",
        "high_recovery_ops",
        "high_client_ops",
        "custom"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_mclock_override_recovery_settings": {
      "name": "osd_mclock_override_recovery_settings",
      "type": "bool",
      "level": "advanced",
      "desc": "Setting this option enables the override of recovery/backfill limits for the mClock scheduler.",
      "long_desc": "This option when set enables the override of the max recovery active and the max backfills limits with mClock scheduler active. These options are not modifiable when mClock scheduler is active. Any attempt to modify these values without setting this option will reset the recovery or backfill option back to its default value.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_recovery_max_active_hdd",
        "osd_recovery_max_active_ssd",
        "osd_max_backfills"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_mclock_iops_capacity_threshold_hdd": {
      "name": "osd_mclock_iops_capacity_threshold_hdd",
      "type": "float",
      "level": "basic",
      "desc": "The threshold IOPs capacity (at 4KiB block size) beyond which to ignore the OSD bench results for an OSD (for rotational media)",
      "long_desc": "This option specifies the threshold IOPS capacity for an OSD under which the OSD bench results can be considered for QoS calculations. Only considered for osd_op_queue = mclock_scheduler",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_mclock_iops_capacity_threshold_ssd": {
      "name": "osd_mclock_iops_capacity_threshold_ssd",
      "type": "float",
      "level": "basic",
      "desc": "The threshold IOPs capacity (at 4KiB block size) beyond which to ignore the OSD bench results for an OSD (for solid state media)",
      "long_desc": "This option specifies the threshold IOPS capacity for an OSD under which the OSD bench results can be considered for QoS calculations. Only considered for osd_op_queue = mclock_scheduler",
      "default": 80000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_read_ec_check_for_errors": {
      "name": "osd_read_ec_check_for_errors",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recovery_delay_start": {
      "name": "osd_recovery_delay_start",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recovery_max_active": {
      "name": "osd_recovery_max_active",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of simultaneous active recovery operations per OSD (overrides _ssd and _hdd if non-zero)",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_recovery_max_active_hdd",
        "osd_recovery_max_active_ssd"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_recovery_max_active_hdd": {
      "name": "osd_recovery_max_active_hdd",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of simultaneous active recovery operations per OSD (for rotational devices)",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_recovery_max_active",
        "osd_recovery_max_active_ssd"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_recovery_max_active_ssd": {
      "name": "osd_recovery_max_active_ssd",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of simultaneous active recovery operations per OSD (for non-rotational solid state devices)",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [
        "osd_recovery_max_active",
        "osd_recovery_max_active_hdd"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_recovery_max_single_start": {
      "name": "osd_recovery_max_single_start",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recovery_max_chunk": {
      "name": "osd_recovery_max_chunk",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "8388608",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recovery_max_omap_entries_per_chunk": {
      "name": "osd_recovery_max_omap_entries_per_chunk",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 8096,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_copyfrom_max_chunk": {
      "name": "osd_copyfrom_max_chunk",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "8388608",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_push_per_object_cost": {
      "name": "osd_push_per_object_cost",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "1000",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_push_cost": {
      "name": "osd_max_push_cost",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "8388608",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_max_push_objects": {
      "name": "osd_max_push_objects",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_recover_clone_overlap_limit": {
      "name": "osd_recover_clone_overlap_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_debug_feed_pullee": {
      "name": "osd_debug_feed_pullee",
      "type": "int",
      "level": "dev",
      "desc": "Feed a pullee, and force primary to pull a currently missing object from it",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_backfill_scan_min": {
      "name": "osd_backfill_scan_min",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 64,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_backfill_scan_max": {
      "name": "osd_backfill_scan_max",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 512,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_extblkdev_plugins": {
      "name": "osd_extblkdev_plugins",
      "type": "str",
      "level": "advanced",
      "desc": "extended block device plugins to load, provide compression feedback at runtime",
      "long_desc": "",
      "default": "vdo",
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "osd_heartbeat_min_peers": {
      "name": "osd_heartbeat_min_peers",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_delete_sleep": {
      "name": "osd_delete_sleep",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next removal transaction. This setting overrides _ssd, _hdd, and _hybrid if non-zero.",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_delete_sleep_hdd": {
      "name": "osd_delete_sleep_hdd",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next removal transaction for HDDs",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_delete_sleep_ssd": {
      "name": "osd_delete_sleep_ssd",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next removal transaction for SSDs",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_delete_sleep_hybrid": {
      "name": "osd_delete_sleep_hybrid",
      "type": "float",
      "level": "advanced",
      "desc": "Time in seconds to sleep before next removal transaction when OSD data is on HDD and OSD journal or WAL+DB is on SSD",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "osd_rocksdb_iterator_bounds_enabled": {
      "name": "osd_rocksdb_iterator_bounds_enabled",
      "type": "bool",
      "level": "dev",
      "desc": "Whether omap iterator bounds are applied to rocksdb iterator ReadOptions",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_acl_grants_max_num": {
      "name": "rgw_acl_grants_max_num",
      "type": "int",
      "level": "advanced",
      "desc": "The maximum number of ACL grants in a single request.",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_policies_max_num": {
      "name": "rgw_user_policies_max_num",
      "type": "int",
      "level": "advanced",
      "desc": "The maximum number of IAM user policies for a single user.",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_cors_rules_max_num": {
      "name": "rgw_cors_rules_max_num",
      "type": "int",
      "level": "advanced",
      "desc": "The maximum number of CORS rules in a single request.",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_delete_multi_obj_max_num": {
      "name": "rgw_delete_multi_obj_max_num",
      "type": "int",
      "level": "advanced",
      "desc": "The maximum number of objects in a single multi-object delete request.",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_website_routing_rules_max_num": {
      "name": "rgw_website_routing_rules_max_num",
      "type": "int",
      "level": "advanced",
      "desc": "The maximum number of website routing rules in a single request.",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_rados_tracing": {
      "name": "rgw_rados_tracing",
      "type": "bool",
      "level": "advanced",
      "desc": "Enables LTTng-UST tracepoints.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_op_tracing": {
      "name": "rgw_op_tracing",
      "type": "bool",
      "level": "advanced",
      "desc": "Enables LTTng-UST operator tracepoints.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_chunk_size": {
      "name": "rgw_max_chunk_size",
      "type": "size",
      "level": "advanced",
      "desc": "The maximum RGW chunk size.",
      "long_desc": "The chunk size is the size of RADOS I/O requests that RGW sends when accessing data objects. RGW read and write operations will never request more than this amount in a single request. This also defines the RGW head object size, as head operations need to be atomic, and anything larger than this would require more than a single operation. When RGW objects are written to the default storage class, up to this amount of payload data will be stored alongside metadata in the head object.",
      "default": "4194304",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_put_obj_min_window_size": {
      "name": "rgw_put_obj_min_window_size",
      "type": "size",
      "level": "advanced",
      "desc": "The minimum RADOS write window size (in bytes).",
      "long_desc": "The window size determines the total concurrent RADOS writes of a single RGW object. When writing an object RGW will send multiple chunks to RADOS. The total size of the writes does not exceed the window size. The window size may be adjusted dynamically in order to better utilize the pipe.",
      "default": "16777216",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_put_obj_max_window_size",
        "rgw_max_chunk_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_put_obj_max_window_size": {
      "name": "rgw_put_obj_max_window_size",
      "type": "size",
      "level": "advanced",
      "desc": "The maximum RADOS write window size (in bytes).",
      "long_desc": "The window size may be dynamically adjusted, but will not surpass this value.",
      "default": "67108864",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_put_obj_min_window_size",
        "rgw_max_chunk_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_put_size": {
      "name": "rgw_max_put_size",
      "type": "size",
      "level": "advanced",
      "desc": "The maximum size (in bytes) of regular (non multi-part) object upload.",
      "long_desc": "Plain object upload is capped at this amount of data. In order to upload larger objects, a special upload mechanism is required. The S3 API provides the multi-part upload, and Swift provides DLO and SLO.",
      "default": "5368709120",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_put_param_size": {
      "name": "rgw_max_put_param_size",
      "type": "size",
      "level": "advanced",
      "desc": "The maximum size (in bytes) of data input of certain RESTful requests.",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_attr_size": {
      "name": "rgw_max_attr_size",
      "type": "size",
      "level": "advanced",
      "desc": "The maximum length of metadata value. 0 skips the check",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_attr_name_len": {
      "name": "rgw_max_attr_name_len",
      "type": "size",
      "level": "advanced",
      "desc": "The maximum length of metadata name. 0 skips the check",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_attrs_num_in_req": {
      "name": "rgw_max_attrs_num_in_req",
      "type": "uint",
      "level": "advanced",
      "desc": "The maximum number of metadata items that can be put via single request",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_override_bucket_index_max_shards": {
      "name": "rgw_override_bucket_index_max_shards",
      "type": "uint",
      "level": "dev",
      "desc": "The default number of bucket index shards for newly-created buckets. This value overrides bucket_index_max_shards stored in the zone. Setting this value in the zone is preferred, because it applies globally to all radosgw daemons running in the zone.",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_bucket_index_max_aio": {
      "name": "rgw_bucket_index_max_aio",
      "type": "uint",
      "level": "advanced",
      "desc": "Max number of concurrent RADOS requests when handling bucket shards.",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_multi_obj_del_max_aio": {
      "name": "rgw_multi_obj_del_max_aio",
      "type": "uint",
      "level": "advanced",
      "desc": "Max number of concurrent RADOS requests per multi-object delete request.",
      "long_desc": "",
      "default": 16,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_enable_quota_threads": {
      "name": "rgw_enable_quota_threads",
      "type": "bool",
      "level": "advanced",
      "desc": "Enables the quota maintenance thread.",
      "long_desc": "The quota maintenance thread is responsible for quota related maintenance work. The thread itself can be disabled, but in order for quota to work correctly, at least one RGW in each zone needs to have this thread running. Having the thread enabled on multiple RGW processes within the same zone can spread some of the maintenance work between them.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_gc_threads",
        "rgw_enable_lc_threads"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_enable_gc_threads": {
      "name": "rgw_enable_gc_threads",
      "type": "bool",
      "level": "advanced",
      "desc": "Enables the garbage collection maintenance thread.",
      "long_desc": "The garbage collection maintenance thread is responsible for garbage collector maintenance work. The thread itself can be disabled, but in order for garbage collection to work correctly, at least one RGW in each zone needs to have this thread running.  Having the thread enabled on multiple RGW processes within the same zone can spread some of the maintenance work between them.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_quota_threads",
        "rgw_enable_lc_threads"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_enable_lc_threads": {
      "name": "rgw_enable_lc_threads",
      "type": "bool",
      "level": "advanced",
      "desc": "Enables the lifecycle maintenance thread. This is required on at least one rgw for each zone.",
      "long_desc": "The lifecycle maintenance thread is responsible for lifecycle related maintenance work. The thread itself can be disabled, but in order for lifecycle to work correctly, at least one RGW in each zone needs to have this thread running. Having the thread enabled on multiple RGW processes within the same zone can spread some of the maintenance work between them.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_gc_threads",
        "rgw_enable_quota_threads"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_data": {
      "name": "rgw_data",
      "type": "str",
      "level": "advanced",
      "desc": "Alternative location for RGW configuration.",
      "long_desc": "If this is set, the different Ceph system configurables (such as the keyring file will be located in the path that is specified here.",
      "default": "/var/lib/ceph/radosgw/$cluster-$id",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update"
      ]
    }
  },
  {
    "rgw_enable_apis": {
      "name": "rgw_enable_apis",
      "type": "str",
      "level": "advanced",
      "desc": "A list of set of RESTful APIs that rgw handles.",
      "long_desc": "",
      "default": "s3, s3website, swift, swift_auth, admin, sts, iam, notifications",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_cache_enabled": {
      "name": "rgw_cache_enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable RGW metadata cache.",
      "long_desc": "The metadata cache holds metadata entries that RGW requires for processing requests. Metadata entries can be user info, bucket info, and bucket instance info. If not found in the cache, entries will be fetched from the backing RADOS store.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_cache_lru_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_cache_lru_size": {
      "name": "rgw_cache_lru_size",
      "type": "int",
      "level": "advanced",
      "desc": "Max number of items in RGW metadata cache.",
      "long_desc": "When full, the RGW metadata cache evicts least recently used entries.",
      "default": 25000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_cache_enabled"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dns_name": {
      "name": "rgw_dns_name",
      "type": "str",
      "level": "advanced",
      "desc": "The host names that RGW uses.",
      "long_desc": "A comma separated list of DNS names. This is Needed for virtual hosting of buckets to work properly, unless configured via zonegroup configuration.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_dns_s3website_name": {
      "name": "rgw_dns_s3website_name",
      "type": "str",
      "level": "advanced",
      "desc": "The host name that RGW uses for static websites (S3)",
      "long_desc": "This is needed for virtual hosting of buckets, unless configured via zonegroup configuration.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_numa_node": {
      "name": "rgw_numa_node",
      "type": "int",
      "level": "advanced",
      "desc": "set rgw's cpu affinity to a numa node (-1 for none)",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "rgw_service_provider_name": {
      "name": "rgw_service_provider_name",
      "type": "str",
      "level": "advanced",
      "desc": "Service provider name which is contained in http response headers",
      "long_desc": "As S3 or other cloud storage providers do, http response headers should contain the name of the provider. This name will be placed in http header 'Server'.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_content_length_compat": {
      "name": "rgw_content_length_compat",
      "type": "bool",
      "level": "advanced",
      "desc": "Multiple content length headers compatibility",
      "long_desc": "Try to handle requests with abiguous multiple content length headers (Content-Length, Http-Content-Length).",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_relaxed_region_enforcement": {
      "name": "rgw_relaxed_region_enforcement",
      "type": "bool",
      "level": "advanced",
      "desc": "Disable region constraint enforcement",
      "long_desc": "Enable requests such as bucket creation to succeed irrespective of region restrictions (Jewel compat).",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_lifecycle_work_time": {
      "name": "rgw_lifecycle_work_time",
      "type": "str",
      "level": "advanced",
      "desc": "Lifecycle allowed work time",
      "long_desc": "Local time window in which the lifecycle maintenance thread can work. It expects 24-hour time notation. For example, \"00:00-23:59\" means starting at midnight lifecycle is allowed to run for the whole day (24 hours). When lifecycle completes, it waits for the next maintenance window. In this example, if it completes at 01:00, it will resume processing 23 hours later at the following midnight.",
      "default": "00:00-06:00",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_lc_lock_max_time": {
      "name": "rgw_lc_lock_max_time",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 90,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_lc_thread_delay": {
      "name": "rgw_lc_thread_delay",
      "type": "int",
      "level": "advanced",
      "desc": "Delay after processing of bucket listing chunks (i.e., per 1000 entries) in milliseconds",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_lc_max_worker": {
      "name": "rgw_lc_max_worker",
      "type": "int",
      "level": "advanced",
      "desc": "Number of LCWorker tasks that will be run in parallel",
      "long_desc": "Number of LCWorker tasks that will run in parallel--used to permit >1 bucket/index shards to be processed simultaneously",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_lc_max_wp_worker": {
      "name": "rgw_lc_max_wp_worker",
      "type": "int",
      "level": "advanced",
      "desc": "Number of workpool threads per LCWorker",
      "long_desc": "Number of threads in per-LCWorker workpools--used to accelerate per-bucket processing",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_lc_max_objs": {
      "name": "rgw_lc_max_objs",
      "type": "int",
      "level": "advanced",
      "desc": "Number of lifecycle data shards",
      "long_desc": "Number of RADOS objects to use for storing lifecycle index. This affects concurrency of lifecycle maintenance, as shards can be processed in parallel.",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_lc_max_rules": {
      "name": "rgw_lc_max_rules",
      "type": "uint",
      "level": "advanced",
      "desc": "Max number of lifecycle rules set on one bucket",
      "long_desc": "Number of lifecycle rules set on one bucket should be limited.",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_lc_debug_interval": {
      "name": "rgw_lc_debug_interval",
      "type": "int",
      "level": "dev",
      "desc": "The number of seconds that simulate one \"day\" in order to debug RGW LifeCycle. Do *not* modify for a production cluster.",
      "long_desc": "For debugging RGW LifeCycle, the number of seconds that are equivalent to one simulated \"day\". Values less than 1 are ignored and do not change LifeCycle behavior. For example, during debugging if one wanted every 10 minutes to be equivalent to one day, then this would be set to 600, the number of seconds in 10 minutes.",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_mp_lock_max_time": {
      "name": "rgw_mp_lock_max_time",
      "type": "int",
      "level": "advanced",
      "desc": "Multipart upload max completion time",
      "long_desc": "Time length to allow completion of a multipart upload operation. This is done to prevent concurrent completions on the same object with the same upload id.",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_script_uri": {
      "name": "rgw_script_uri",
      "type": "str",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_request_uri": {
      "name": "rgw_request_uri",
      "type": "str",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_ignore_get_invalid_range": {
      "name": "rgw_ignore_get_invalid_range",
      "type": "bool",
      "level": "advanced",
      "desc": "Treat invalid (e.g., negative) range request as full",
      "long_desc": "Treat invalid (e.g., negative) range request as request for the full object (AWS compatibility)",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_swift_url": {
      "name": "rgw_swift_url",
      "type": "str",
      "level": "advanced",
      "desc": "Swift-auth storage URL",
      "long_desc": "Used in conjunction with rgw internal swift authentication. This affects the X-Storage-Url response header value.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_swift_auth_entry"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_swift_url_prefix": {
      "name": "rgw_swift_url_prefix",
      "type": "str",
      "level": "advanced",
      "desc": "Swift URL prefix",
      "long_desc": "The URL path prefix for swift requests.",
      "default": "swift",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_swift_auth_url": {
      "name": "rgw_swift_auth_url",
      "type": "str",
      "level": "advanced",
      "desc": "Swift auth URL",
      "long_desc": "Default url to which RGW connects and verifies tokens for v1 auth (if not using internal swift auth).",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_swift_auth_entry": {
      "name": "rgw_swift_auth_entry",
      "type": "str",
      "level": "advanced",
      "desc": "Swift auth URL prefix",
      "long_desc": "URL path prefix for internal swift auth requests.",
      "default": "auth",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_swift_url"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_swift_tenant_name": {
      "name": "rgw_swift_tenant_name",
      "type": "str",
      "level": "advanced",
      "desc": "Swift tenant name",
      "long_desc": "Tenant name that is used when constructing the swift path.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_swift_account_in_url"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_swift_account_in_url": {
      "name": "rgw_swift_account_in_url",
      "type": "bool",
      "level": "advanced",
      "desc": "Swift account encoded in URL",
      "long_desc": "Whether the swift account is encoded in the uri path (AUTH_<account>).",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_swift_tenant_name"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_swift_enforce_content_length": {
      "name": "rgw_swift_enforce_content_length",
      "type": "bool",
      "level": "advanced",
      "desc": "Send content length when listing containers (Swift)",
      "long_desc": "Whether content length header is needed when listing containers. When this is set to false, RGW will send extra info for each entry in the response.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_keystone_url": {
      "name": "rgw_keystone_url",
      "type": "str",
      "level": "basic",
      "desc": "The URL to the Keystone server.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_admin_token": {
      "name": "rgw_keystone_admin_token",
      "type": "str",
      "level": "advanced",
      "desc": "DEPRECATED: The admin token (shared secret) that is used for the Keystone requests.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_admin_token_path": {
      "name": "rgw_keystone_admin_token_path",
      "type": "str",
      "level": "advanced",
      "desc": "Path to a file containing the admin token (shared secret) that is used for the Keystone requests.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_admin_user": {
      "name": "rgw_keystone_admin_user",
      "type": "str",
      "level": "advanced",
      "desc": "Keystone admin user.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_admin_password": {
      "name": "rgw_keystone_admin_password",
      "type": "str",
      "level": "advanced",
      "desc": "DEPRECATED: Keystone admin password.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_admin_password_path": {
      "name": "rgw_keystone_admin_password_path",
      "type": "str",
      "level": "advanced",
      "desc": "Path to a file containing the Keystone admin password.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_admin_tenant": {
      "name": "rgw_keystone_admin_tenant",
      "type": "str",
      "level": "advanced",
      "desc": "Keystone admin user tenant.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_admin_project": {
      "name": "rgw_keystone_admin_project",
      "type": "str",
      "level": "advanced",
      "desc": "Keystone admin user project (for Keystone v3).",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_admin_domain": {
      "name": "rgw_keystone_admin_domain",
      "type": "str",
      "level": "advanced",
      "desc": "Keystone admin user domain (for Keystone v3).",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_service_token_enabled": {
      "name": "rgw_keystone_service_token_enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "Service tokens allowing the usage of expired Keystone auth tokens",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_keystone_service_token_accepted_roles",
        "rgw_keystone_expired_token_cache_expiration"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_keystone_service_token_accepted_roles": {
      "name": "rgw_keystone_service_token_accepted_roles",
      "type": "str",
      "level": "advanced",
      "desc": "Only users with one of these roles will be valid for service users.",
      "long_desc": "",
      "default": "admin",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_keystone_service_token_enabled"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_expired_token_cache_expiration": {
      "name": "rgw_keystone_expired_token_cache_expiration",
      "type": "int",
      "level": "advanced",
      "desc": "The number of seconds to add to current time for expired token expiration",
      "long_desc": "",
      "default": 3600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_keystone_service_token_enabled"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_keystone_barbican_user": {
      "name": "rgw_keystone_barbican_user",
      "type": "str",
      "level": "advanced",
      "desc": "Keystone user to access barbican secrets.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_barbican_password": {
      "name": "rgw_keystone_barbican_password",
      "type": "str",
      "level": "advanced",
      "desc": "Keystone password for barbican user.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_barbican_tenant": {
      "name": "rgw_keystone_barbican_tenant",
      "type": "str",
      "level": "advanced",
      "desc": "Keystone barbican user tenant (Keystone v2.0).",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_barbican_project": {
      "name": "rgw_keystone_barbican_project",
      "type": "str",
      "level": "advanced",
      "desc": "Keystone barbican user project (Keystone v3).",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_barbican_domain": {
      "name": "rgw_keystone_barbican_domain",
      "type": "str",
      "level": "advanced",
      "desc": "Keystone barbican user domain.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_api_version": {
      "name": "rgw_keystone_api_version",
      "type": "int",
      "level": "advanced",
      "desc": "Version of Keystone API to use (2 or 3).",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_keystone_accepted_roles": {
      "name": "rgw_keystone_accepted_roles",
      "type": "str",
      "level": "advanced",
      "desc": "Only users with one of these roles will be served when doing Keystone authentication.",
      "long_desc": "",
      "default": "Member, admin",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_accepted_admin_roles": {
      "name": "rgw_keystone_accepted_admin_roles",
      "type": "str",
      "level": "advanced",
      "desc": "List of roles allowing user to gain admin privileges (Keystone).",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_accepted_reader_roles": {
      "name": "rgw_keystone_accepted_reader_roles",
      "type": "str",
      "level": "advanced",
      "desc": "List of roles that can only be used for reads (Keystone).",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_keystone_token_cache_size": {
      "name": "rgw_keystone_token_cache_size",
      "type": "int",
      "level": "advanced",
      "desc": "Keystone token cache size",
      "long_desc": "Max number of Keystone tokens that will be cached. Token that is not cached requires RGW to access the Keystone server when authenticating.",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_keystone_verify_ssl": {
      "name": "rgw_keystone_verify_ssl",
      "type": "bool",
      "level": "advanced",
      "desc": "Should RGW verify the Keystone server SSL certificate.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_keystone_implicit_tenants": {
      "name": "rgw_keystone_implicit_tenants",
      "type": "str",
      "level": "advanced",
      "desc": "RGW Keystone implicit tenants creation",
      "long_desc": "Implicitly create new users in their own tenant with the same name when authenticating via Keystone.  Can be limited to s3 or swift only.",
      "default": "false",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [
        "false",
        "true",
        "swift",
        "s3",
        "both",
        "0",
        "1",
        "none"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_cross_domain_policy": {
      "name": "rgw_cross_domain_policy",
      "type": "str",
      "level": "advanced",
      "desc": "RGW handle cross domain policy",
      "long_desc": "Returned cross domain policy when accessing the crossdomain.xml resource (Swift compatiility).",
      "default": "<allow-access-from domain=\"*\" secure=\"false\" />",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_healthcheck_disabling_path": {
      "name": "rgw_healthcheck_disabling_path",
      "type": "str",
      "level": "dev",
      "desc": "Swift health check api can be disabled if a file can be accessed in this path.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_s3_auth_use_rados": {
      "name": "rgw_s3_auth_use_rados",
      "type": "bool",
      "level": "advanced",
      "desc": "Should S3 authentication use credentials stored in RADOS backend.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_s3_auth_use_keystone": {
      "name": "rgw_s3_auth_use_keystone",
      "type": "bool",
      "level": "advanced",
      "desc": "Should S3 authentication use Keystone.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_s3_auth_order": {
      "name": "rgw_s3_auth_order",
      "type": "str",
      "level": "advanced",
      "desc": "Authentication strategy order to use for s3 authentication",
      "long_desc": "Order of authentication strategies to try for s3 authentication, the allowed options are a comma separated list of engines external, local. The default order is to try all the externally configured engines before attempting local rados based authentication",
      "default": "sts, external, local",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_s3_auth_disable_signature_url": {
      "name": "rgw_s3_auth_disable_signature_url",
      "type": "bool",
      "level": "advanced",
      "desc": "Should authentication with presigned URLs be disabled",
      "long_desc": "If enabled, any request that is presigned with either V2 or V4 signature will be denied",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_barbican_url": {
      "name": "rgw_barbican_url",
      "type": "str",
      "level": "advanced",
      "desc": "URL to barbican server.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_ldap_uri": {
      "name": "rgw_ldap_uri",
      "type": "str",
      "level": "advanced",
      "desc": "Space-separated list of LDAP servers in URI format, e.g., \"ldaps://<ldap.your.domain>\".",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_ldap_binddn": {
      "name": "rgw_ldap_binddn",
      "type": "str",
      "level": "advanced",
      "desc": "LDAP entry RGW will bind with (user match).",
      "long_desc": "",
      "default": "uid=admin,cn=users,dc=example,dc=com",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_ldap_searchdn": {
      "name": "rgw_ldap_searchdn",
      "type": "str",
      "level": "advanced",
      "desc": "LDAP search base (basedn).",
      "long_desc": "",
      "default": "cn=users,cn=accounts,dc=example,dc=com",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_ldap_dnattr": {
      "name": "rgw_ldap_dnattr",
      "type": "str",
      "level": "advanced",
      "desc": "LDAP attribute containing RGW user names (to form binddns).",
      "long_desc": "",
      "default": "uid",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_ldap_secret": {
      "name": "rgw_ldap_secret",
      "type": "str",
      "level": "advanced",
      "desc": "Path to file containing credentials for rgw_ldap_binddn.",
      "long_desc": "",
      "default": "/etc/openldap/secret",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_s3_auth_use_ldap": {
      "name": "rgw_s3_auth_use_ldap",
      "type": "bool",
      "level": "advanced",
      "desc": "Should S3 authentication use LDAP.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_ldap_searchfilter": {
      "name": "rgw_ldap_searchfilter",
      "type": "str",
      "level": "advanced",
      "desc": "LDAP search filter.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_opa_url": {
      "name": "rgw_opa_url",
      "type": "str",
      "level": "advanced",
      "desc": "URL to OPA server.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_opa_token": {
      "name": "rgw_opa_token",
      "type": "str",
      "level": "advanced",
      "desc": "The Bearer token OPA uses to authenticate client requests.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_opa_verify_ssl": {
      "name": "rgw_opa_verify_ssl",
      "type": "bool",
      "level": "advanced",
      "desc": "Should RGW verify the OPA server SSL certificate.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_use_opa_authz": {
      "name": "rgw_use_opa_authz",
      "type": "bool",
      "level": "advanced",
      "desc": "Should OPA be used to authorize client requests.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_admin_entry": {
      "name": "rgw_admin_entry",
      "type": "str",
      "level": "advanced",
      "desc": "Path prefix to be used for accessing RGW RESTful admin API.",
      "long_desc": "",
      "default": "admin",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_enforce_swift_acls": {
      "name": "rgw_enforce_swift_acls",
      "type": "bool",
      "level": "advanced",
      "desc": "RGW enforce swift acls",
      "long_desc": "Should RGW enforce special Swift-only ACLs. Swift has a special ACL that gives permission to access all objects in a container.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_swift_token_expiration": {
      "name": "rgw_swift_token_expiration",
      "type": "int",
      "level": "advanced",
      "desc": "Expiration time (in seconds) for token generated through RGW Swift auth.",
      "long_desc": "",
      "default": 86400,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_print_continue": {
      "name": "rgw_print_continue",
      "type": "bool",
      "level": "advanced",
      "desc": "RGW support of 100-continue",
      "long_desc": "Should RGW explicitly send 100 (continue) responses. This is mainly relevant when using FastCGI, as some FastCGI modules do not fully support this feature.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_print_prohibited_content_length": {
      "name": "rgw_print_prohibited_content_length",
      "type": "bool",
      "level": "advanced",
      "desc": "RGW RFC-7230 compatibility",
      "long_desc": "Specifies whether RGW violates RFC 7230 and sends Content-Length with 204 or 304 statuses.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_remote_addr_param": {
      "name": "rgw_remote_addr_param",
      "type": "str",
      "level": "advanced",
      "desc": "HTTP header that holds the remote address in incoming requests.",
      "long_desc": "RGW will use this header to extract requests origin. When RGW runs behind a reverse proxy, the remote address header will point at the proxy's address and not at the originator's address. Therefore it is sometimes possible to have the proxy add the originator's address in a separate HTTP header, which will allow RGW to log it correctly.",
      "default": "REMOTE_ADDR",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_ops_log"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_op_thread_timeout": {
      "name": "rgw_op_thread_timeout",
      "type": "int",
      "level": "dev",
      "desc": "Timeout for async rados coroutine operations.",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_op_thread_suicide_timeout": {
      "name": "rgw_op_thread_suicide_timeout",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_thread_pool_size": {
      "name": "rgw_thread_pool_size",
      "type": "int",
      "level": "basic",
      "desc": "RGW requests handling thread pool size.",
      "long_desc": "This parameter determines the number of concurrent requests RGW can process when using either the civetweb, or the fastcgi frontends. The higher this number is, RGW will be able to deal with more concurrent requests at the cost of more resource utilization.",
      "default": 512,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_num_control_oids": {
      "name": "rgw_num_control_oids",
      "type": "int",
      "level": "advanced",
      "desc": "Number of control objects used for cross-RGW communication.",
      "long_desc": "RGW uses certain control objects to send messages between different RGW processes running on the same zone. These messages include metadata cache invalidation info that is being sent when metadata is modified (such as user or bucket information). A higher number of control objects allows better concurrency of these messages, at the cost of more resource utilization.",
      "default": 8,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_verify_ssl": {
      "name": "rgw_verify_ssl",
      "type": "bool",
      "level": "advanced",
      "desc": "Should RGW verify SSL when connecing to a remote HTTP server",
      "long_desc": "RGW can send requests to other RGW servers (e.g., in multi-site sync work). This configurable selects whether RGW should verify the certificate for the remote peer and host.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_keystone_verify_ssl"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_lru_lanes": {
      "name": "rgw_nfs_lru_lanes",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_lru_lane_hiwat": {
      "name": "rgw_nfs_lru_lane_hiwat",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 911,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_fhcache_partitions": {
      "name": "rgw_nfs_fhcache_partitions",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_fhcache_size": {
      "name": "rgw_nfs_fhcache_size",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 2017,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_namespace_expire_secs": {
      "name": "rgw_nfs_namespace_expire_secs",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_max_gc": {
      "name": "rgw_nfs_max_gc",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_write_completion_interval_s": {
      "name": "rgw_nfs_write_completion_interval_s",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_s3_fast_attrs": {
      "name": "rgw_nfs_s3_fast_attrs",
      "type": "bool",
      "level": "advanced",
      "desc": "use fast S3 attrs from bucket index (immutable only)",
      "long_desc": "use fast S3 attrs from bucket index (assumes NFS mounts are immutable)",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_run_gc_threads": {
      "name": "rgw_nfs_run_gc_threads",
      "type": "bool",
      "level": "advanced",
      "desc": "run GC threads in librgw (default off)",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_run_lc_threads": {
      "name": "rgw_nfs_run_lc_threads",
      "type": "bool",
      "level": "advanced",
      "desc": "run lifecycle threads in librgw (default off)",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_run_quota_threads": {
      "name": "rgw_nfs_run_quota_threads",
      "type": "bool",
      "level": "advanced",
      "desc": "run quota threads in librgw (default off)",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_run_sync_thread": {
      "name": "rgw_nfs_run_sync_thread",
      "type": "bool",
      "level": "advanced",
      "desc": "run sync thread in librgw (default off)",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_nfs_frontends": {
      "name": "rgw_nfs_frontends",
      "type": "str",
      "level": "basic",
      "desc": "RGW frontends configuration when running as librgw/nfs",
      "long_desc": "A comma-delimited list of frontends configuration. Each configuration contains the type of the frontend followed by an optional space delimited set of key=value config parameters.",
      "default": "rgw-nfs",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_frontends"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_rados_pool_autoscale_bias": {
      "name": "rgw_rados_pool_autoscale_bias",
      "type": "float",
      "level": "advanced",
      "desc": "pg_autoscale_bias value for RGW metadata (omap-heavy) pools",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": 0.01,
      "max": 100000,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_rados_pool_recovery_priority": {
      "name": "rgw_rados_pool_recovery_priority",
      "type": "uint",
      "level": "advanced",
      "desc": "recovery_priority value for RGW metadata (omap-heavy) pools",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": 18446744073709551606,
      "max": 10,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_zone": {
      "name": "rgw_zone",
      "type": "str",
      "level": "advanced",
      "desc": "Zone name",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_zonegroup",
        "rgw_realm"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_zone_id": {
      "name": "rgw_zone_id",
      "type": "str",
      "level": "advanced",
      "desc": "Zone ID",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_zone",
        "rgw_zonegroup",
        "rgw_realm"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_zone_root_pool": {
      "name": "rgw_zone_root_pool",
      "type": "str",
      "level": "advanced",
      "desc": "Zone root pool name",
      "long_desc": "The zone root pool, is the pool where the RGW zone configuration located.",
      "default": ".rgw.root",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_zonegroup_root_pool",
        "rgw_realm_root_pool",
        "rgw_period_root_pool"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_default_zone_info_oid": {
      "name": "rgw_default_zone_info_oid",
      "type": "str",
      "level": "advanced",
      "desc": "Default zone info object id",
      "long_desc": "Name of the RADOS object that holds the default zone information.",
      "default": "default.zone",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_region": {
      "name": "rgw_region",
      "type": "str",
      "level": "advanced",
      "desc": "Region name",
      "long_desc": "Obsolete config option. The rgw_zonegroup option should be used instead.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_zonegroup"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_region_root_pool": {
      "name": "rgw_region_root_pool",
      "type": "str",
      "level": "advanced",
      "desc": "Region root pool",
      "long_desc": "Obsolete config option. The rgw_zonegroup_root_pool should be used instead.",
      "default": ".rgw.root",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_zonegroup_root_pool"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_default_region_info_oid": {
      "name": "rgw_default_region_info_oid",
      "type": "str",
      "level": "advanced",
      "desc": "Default region info object id",
      "long_desc": "Obsolete config option. The rgw_default_zonegroup_info_oid should be used instead.",
      "default": "default.region",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_default_zonegroup_info_oid"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_zonegroup": {
      "name": "rgw_zonegroup",
      "type": "str",
      "level": "advanced",
      "desc": "Zonegroup name",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_zone",
        "rgw_realm"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_zonegroup_id": {
      "name": "rgw_zonegroup_id",
      "type": "str",
      "level": "advanced",
      "desc": "Zonegroup ID",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_zone",
        "rgw_zonegroup",
        "rgw_realm"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_zonegroup_root_pool": {
      "name": "rgw_zonegroup_root_pool",
      "type": "str",
      "level": "advanced",
      "desc": "Zonegroup root pool",
      "long_desc": "The zonegroup root pool, is the pool where the RGW zonegroup configuration located.",
      "default": ".rgw.root",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_zone_root_pool",
        "rgw_realm_root_pool",
        "rgw_period_root_pool"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_default_zonegroup_info_oid": {
      "name": "rgw_default_zonegroup_info_oid",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "default.zonegroup",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_realm": {
      "name": "rgw_realm",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_realm_id": {
      "name": "rgw_realm_id",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_realm_root_pool": {
      "name": "rgw_realm_root_pool",
      "type": "str",
      "level": "advanced",
      "desc": "Realm root pool",
      "long_desc": "The realm root pool, is the pool where the RGW realm configuration located.",
      "default": ".rgw.root",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_zonegroup_root_pool",
        "rgw_zone_root_pool",
        "rgw_period_root_pool"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_default_realm_info_oid": {
      "name": "rgw_default_realm_info_oid",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "default.realm",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_period_root_pool": {
      "name": "rgw_period_root_pool",
      "type": "str",
      "level": "advanced",
      "desc": "Period root pool",
      "long_desc": "The period root pool, is the pool where the RGW period configuration located.",
      "default": ".rgw.root",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_zonegroup_root_pool",
        "rgw_zone_root_pool",
        "rgw_realm_root_pool"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_period_latest_epoch_info_oid": {
      "name": "rgw_period_latest_epoch_info_oid",
      "type": "str",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": ".latest_epoch",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_log_nonexistent_bucket": {
      "name": "rgw_log_nonexistent_bucket",
      "type": "bool",
      "level": "advanced",
      "desc": "Should RGW log operations on bucket that does not exist",
      "long_desc": "This config option applies to the ops log. When this option is set, the ops log will log operations that are sent to non existing buckets. These operations inherently fail, and do not correspond to a specific user.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_ops_log"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_log_object_name": {
      "name": "rgw_log_object_name",
      "type": "str",
      "level": "advanced",
      "desc": "Ops log object name format",
      "long_desc": "Defines the format of the RADOS objects names that ops log uses to store ops log data",
      "default": "%Y-%m-%d-%H-%i-%n",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_ops_log"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_log_object_name_utc": {
      "name": "rgw_log_object_name_utc",
      "type": "bool",
      "level": "advanced",
      "desc": "Should ops log object name based on UTC",
      "long_desc": "If set, the names of the RADOS objects that hold the ops log data will be based on UTC time zone. If not set, it will use the local time zone.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_ops_log",
        "rgw_log_object_name"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_usage_max_shards": {
      "name": "rgw_usage_max_shards",
      "type": "int",
      "level": "advanced",
      "desc": "Number of shards for usage log.",
      "long_desc": "The number of RADOS objects that RGW will use in order to store the usage log data.",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_usage_log"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_usage_max_user_shards": {
      "name": "rgw_usage_max_user_shards",
      "type": "int",
      "level": "advanced",
      "desc": "Number of shards for single user in usage log",
      "long_desc": "The number of shards that a single user will span over in the usage log.",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_usage_log"
      ],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_enable_ops_log": {
      "name": "rgw_enable_ops_log",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable ops log",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_log_nonexistent_bucket",
        "rgw_log_object_name",
        "rgw_ops_log_rados",
        "rgw_ops_log_socket_path",
        "rgw_ops_log_file_path"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_enable_usage_log": {
      "name": "rgw_enable_usage_log",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable the usage log",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_usage_max_shards"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_ops_log_rados": {
      "name": "rgw_ops_log_rados",
      "type": "bool",
      "level": "advanced",
      "desc": "Use RADOS for ops log",
      "long_desc": "If set, RGW will store ops log information in RADOS. WARNING, there is no automation to clean up these log entries, so by default they will pile up without bound. This MUST NOT be enabled unless the admin has a strategy to manage and trim these log entries with `radosgw-admin log rm`.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_ops_log",
        "rgw_log_object_name_utc",
        "rgw_log_object_name"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_ops_log_socket_path": {
      "name": "rgw_ops_log_socket_path",
      "type": "str",
      "level": "advanced",
      "desc": "Unix domain socket path for ops log.",
      "long_desc": "Path to unix domain socket that RGW will listen for connection on. When connected, RGW will send ops log data through it.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_ops_log",
        "rgw_ops_log_data_backlog"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_ops_log_file_path": {
      "name": "rgw_ops_log_file_path",
      "type": "str",
      "level": "advanced",
      "desc": "File-system path for ops log.",
      "long_desc": "Path to file that RGW will log ops logs to. A cephadm deployment will automatically rotate these logs under /var/log/ceph/. Other deployments should arrange for similar log rotation.",
      "default": "",
      "daemon_default": "/var/log/ceph/ops-log-$cluster-$name.log",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_ops_log"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_ops_log_data_backlog": {
      "name": "rgw_ops_log_data_backlog",
      "type": "size",
      "level": "advanced",
      "desc": "Ops log socket backlog",
      "long_desc": "Maximum amount of data backlog that RGW can keep when ops log is configured to send info through unix domain socket. When data backlog is higher than this, ops log entries will be lost. In order to avoid ops log information loss, the listener needs to clear data (by reading it) quickly enough.",
      "default": "5242880",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_ops_log",
        "rgw_ops_log_socket_path"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_usage_log_flush_threshold": {
      "name": "rgw_usage_log_flush_threshold",
      "type": "int",
      "level": "advanced",
      "desc": "Number of entries in usage log before flushing",
      "long_desc": "This is the max number of entries that will be held in the usage log, before it will be flushed to the backend. Note that the usage log is periodically flushed, even if number of entries does not reach this threshold. A usage log entry corresponds to one or more operations on a single bucket.i",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_usage_log",
        "rgw_usage_log_tick_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_usage_log_tick_interval": {
      "name": "rgw_usage_log_tick_interval",
      "type": "int",
      "level": "advanced",
      "desc": "Number of seconds between usage log flush cycles",
      "long_desc": "The number of seconds between consecutive usage log flushes. The usage log will also flush itself to the backend if the number of pending entries reaches a certain threshold.",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_enable_usage_log",
        "rgw_usage_log_flush_threshold"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_init_timeout": {
      "name": "rgw_init_timeout",
      "type": "int",
      "level": "basic",
      "desc": "Initialization timeout",
      "long_desc": "The time length (in seconds) that RGW will allow for its initialization. RGW process will give up and quit if initialization is not complete after this amount of time.",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_mime_types_file": {
      "name": "rgw_mime_types_file",
      "type": "str",
      "level": "basic",
      "desc": "Path to local mime types file",
      "long_desc": "The mime types file is needed in Swift when uploading an object. If object's content type is not specified, RGW will use data from this file to assign a content type to the object.",
      "default": "/etc/mime.types",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_gc_max_objs": {
      "name": "rgw_gc_max_objs",
      "type": "int",
      "level": "advanced",
      "desc": "Number of shards for garbage collector data",
      "long_desc": "The number of garbage collector data shards, is the number of RADOS objects that RGW will use to store the garbage collection information on.",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_gc_obj_min_wait",
        "rgw_gc_processor_max_time",
        "rgw_gc_processor_period",
        "rgw_gc_max_concurrent_io"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_gc_obj_min_wait": {
      "name": "rgw_gc_obj_min_wait",
      "type": "int",
      "level": "advanced",
      "desc": "Garbage collection object expiration time",
      "long_desc": "The length of time (in seconds) that the RGW collector will wait before purging a deleted object's data. RGW will not remove object immediately, as object could still have readers. A mechanism exists to increase the object's expiration time when it's being read. The recommended value of its lower limit is 30 minutes",
      "default": 7200,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_gc_max_objs",
        "rgw_gc_processor_max_time",
        "rgw_gc_processor_period",
        "rgw_gc_max_concurrent_io"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_gc_processor_max_time": {
      "name": "rgw_gc_processor_max_time",
      "type": "int",
      "level": "advanced",
      "desc": "Length of time GC processor can lease shard",
      "long_desc": "Garbage collection thread in RGW process holds a lease on its data shards. These objects contain the information about the objects that need to be removed. RGW takes a lease in order to prevent multiple RGW processes from handling the same objects concurrently. This time signifies that maximum amount of time (in seconds) that RGW is allowed to hold that lease. In the case where RGW goes down uncleanly, this is the amount of time where processing of that data shard will be blocked.",
      "default": 3600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_gc_max_objs",
        "rgw_gc_obj_min_wait",
        "rgw_gc_processor_period",
        "rgw_gc_max_concurrent_io"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_gc_processor_period": {
      "name": "rgw_gc_processor_period",
      "type": "int",
      "level": "advanced",
      "desc": "Garbage collector cycle run time",
      "long_desc": "The amount of time between the start of consecutive runs of the garbage collector threads. If garbage collector runs takes more than this period, it will not wait before running again.",
      "default": 3600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_gc_max_objs",
        "rgw_gc_obj_min_wait",
        "rgw_gc_processor_max_time",
        "rgw_gc_max_concurrent_io",
        "rgw_gc_max_trim_chunk"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_gc_max_concurrent_io": {
      "name": "rgw_gc_max_concurrent_io",
      "type": "int",
      "level": "advanced",
      "desc": "Max concurrent RADOS IO operations for garbage collection",
      "long_desc": "The maximum number of concurrent IO operations that the RGW garbage collection thread will use when purging old data.",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_gc_max_objs",
        "rgw_gc_obj_min_wait",
        "rgw_gc_processor_max_time",
        "rgw_gc_max_trim_chunk"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_gc_max_trim_chunk": {
      "name": "rgw_gc_max_trim_chunk",
      "type": "int",
      "level": "advanced",
      "desc": "Max number of keys to remove from garbage collector log in a single operation",
      "long_desc": "",
      "default": 16,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_gc_max_objs",
        "rgw_gc_obj_min_wait",
        "rgw_gc_processor_max_time",
        "rgw_gc_max_concurrent_io"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_gc_max_deferred_entries_size": {
      "name": "rgw_gc_max_deferred_entries_size",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum allowed size of deferred entries in queue head for gc",
      "long_desc": "",
      "default": 3072,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_gc_max_queue_size": {
      "name": "rgw_gc_max_queue_size",
      "type": "uint",
      "level": "advanced",
      "desc": "Maximum allowed queue size for gc",
      "long_desc": "The maximum allowed size of each gc queue, and its value should not be greater than (osd_max_object_size - rgw_gc_max_deferred_entries_size - 1K).",
      "default": 134213632,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "osd_max_object_size",
        "rgw_gc_max_deferred_entries_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_gc_max_deferred": {
      "name": "rgw_gc_max_deferred",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of maximum deferred data entries to be stored in queue for gc",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_s3_success_create_obj_status": {
      "name": "rgw_s3_success_create_obj_status",
      "type": "int",
      "level": "advanced",
      "desc": "HTTP return code override for object creation",
      "long_desc": "If not zero, this is the HTTP return code that will be returned on a successful S3 object creation.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_s3_client_max_sig_ver": {
      "name": "rgw_s3_client_max_sig_ver",
      "type": "int",
      "level": "advanced",
      "desc": "Max S3 authentication signature version",
      "long_desc": "If greater than zero, would force max signature version to use",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_resolve_cname": {
      "name": "rgw_resolve_cname",
      "type": "bool",
      "level": "advanced",
      "desc": "Support vanity domain names via CNAME",
      "long_desc": "If true, RGW will query DNS when detecting that it's serving a request that was sent to a host in another domain. If a CNAME record is configured for that domain it will use it instead. This gives user to have the ability of creating a unique domain of their own to point at data in their bucket.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_obj_stripe_size": {
      "name": "rgw_obj_stripe_size",
      "type": "size",
      "level": "advanced",
      "desc": "RGW object stripe size",
      "long_desc": "The size of an object stripe for RGW objects. This is the maximum size a backing RADOS object will have. RGW objects that are larger than this will span over multiple objects.",
      "default": "4194304",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_extended_http_attrs": {
      "name": "rgw_extended_http_attrs",
      "type": "str",
      "level": "advanced",
      "desc": "RGW support extended HTTP attrs",
      "long_desc": "Add new set of attributes that could be set on an object. These extra attributes can be set through HTTP header fields when putting the objects. If set, these attributes will return as HTTP fields when doing GET/HEAD on the object.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_exit_timeout_secs": {
      "name": "rgw_exit_timeout_secs",
      "type": "int",
      "level": "advanced",
      "desc": "RGW shutdown timeout",
      "long_desc": "Number of seconds to wait for a process before exiting unconditionally.",
      "default": 120,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_get_obj_window_size": {
      "name": "rgw_get_obj_window_size",
      "type": "size",
      "level": "advanced",
      "desc": "RGW object read window size",
      "long_desc": "The window size in bytes for a single object read request",
      "default": "16777216",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_get_obj_max_req_size": {
      "name": "rgw_get_obj_max_req_size",
      "type": "size",
      "level": "advanced",
      "desc": "RGW object read chunk size",
      "long_desc": "The maximum request size of a single object read operation sent to RADOS",
      "default": "4194304",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_relaxed_s3_bucket_names": {
      "name": "rgw_relaxed_s3_bucket_names",
      "type": "bool",
      "level": "advanced",
      "desc": "RGW enable relaxed S3 bucket names",
      "long_desc": "RGW enable relaxed S3 bucket name rules for US region buckets.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_defer_to_bucket_acls": {
      "name": "rgw_defer_to_bucket_acls",
      "type": "str",
      "level": "advanced",
      "desc": "Bucket ACLs override object ACLs",
      "long_desc": "If not empty, a string that selects that mode of operation. 'recurse' will use bucket's ACL for the authorization. 'full-control' will allow users that users that have full control permission on the bucket have access to the object.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_list_buckets_max_chunk": {
      "name": "rgw_list_buckets_max_chunk",
      "type": "int",
      "level": "advanced",
      "desc": "Max number of buckets to retrieve in a single listing operation",
      "long_desc": "When RGW fetches lists of user's buckets from the backend, this is the max number of entries it will try to retrieve in a single operation. Note that the backend may choose to return a smaller number of entries.",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_md_log_max_shards": {
      "name": "rgw_md_log_max_shards",
      "type": "int",
      "level": "advanced",
      "desc": "RGW number of metadata log shards",
      "long_desc": "The number of shards the RGW metadata log entries will reside in. This affects the metadata sync parallelism as a shard can only be processed by a single RGW at a time",
      "default": 64,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_curl_buffersize": {
      "name": "rgw_curl_buffersize",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "Pass a long specifying your preferred size (in bytes) for the receivebuffer in libcurl. See: https://curl.se/libcurl/c/CURLOPT_BUFFERSIZE.html",
      "default": 524288,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": 1024,
      "max": 524288,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_curl_wait_timeout_ms": {
      "name": "rgw_curl_wait_timeout_ms",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_curl_low_speed_limit": {
      "name": "rgw_curl_low_speed_limit",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "It contains the average transfer speed in bytes per second that the transfer should be below during rgw_curl_low_speed_time seconds for libcurl to consider it to be too slow and abort. Set it zero to disable this.",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_curl_low_speed_time": {
      "name": "rgw_curl_low_speed_time",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "It contains the time in number seconds that the transfer speed should be below the rgw_curl_low_speed_limit for the library to consider it too slow and abort. Set it zero to disable this.",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_curl_tcp_keepalive": {
      "name": "rgw_curl_tcp_keepalive",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "Enable TCP keepalive on the HTTP client sockets managed by libcurl. This does not apply to connections received by the HTTP frontend, but only to HTTP requests sent by radosgw. Examples include requests to Keystone for authentication, sync requests from multisite, and requests to key management servers for SSE.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_copy_obj_progress": {
      "name": "rgw_copy_obj_progress",
      "type": "bool",
      "level": "advanced",
      "desc": "Send progress report through copy operation",
      "long_desc": "If true, RGW will send progress information when copy operation is executed.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_copy_obj_progress_every_bytes": {
      "name": "rgw_copy_obj_progress_every_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "Send copy-object progress info after these many bytes",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_copy_obj_concurrent_io": {
      "name": "rgw_max_copy_obj_concurrent_io",
      "type": "int",
      "level": "advanced",
      "desc": "Number of refcount operations to process concurrently when executing copy_obj",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_obj_etag_verify": {
      "name": "rgw_sync_obj_etag_verify",
      "type": "bool",
      "level": "advanced",
      "desc": "Verify if the object copied from remote is identical to its source",
      "long_desc": "If true, this option computes the MD5 checksum of the data which is written at the destination and checks if it is identical to the ETAG stored in the source. It ensures integrity of the objects fetched from a remote server over HTTP including multisite sync.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_obj_tombstone_cache_size": {
      "name": "rgw_obj_tombstone_cache_size",
      "type": "int",
      "level": "advanced",
      "desc": "Max number of entries to keep in tombstone cache",
      "long_desc": "The tombstone cache is used when doing a multi-zone data sync. RGW keeps there information about removed objects which is needed in order to prevent re-syncing of objects that were already removed.",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_data_log_window": {
      "name": "rgw_data_log_window",
      "type": "int",
      "level": "advanced",
      "desc": "Data log time window",
      "long_desc": "The data log keeps information about buckets that have objectst that were modified within a specific timeframe. The sync process then knows which buckets are needed to be scanned for data sync.",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_data_log_changes_size": {
      "name": "rgw_data_log_changes_size",
      "type": "int",
      "level": "dev",
      "desc": "Max size of pending changes in data log",
      "long_desc": "RGW will trigger update to the data log if the number of pending entries reached this number.",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_data_log_num_shards": {
      "name": "rgw_data_log_num_shards",
      "type": "int",
      "level": "advanced",
      "desc": "Number of data log shards",
      "long_desc": "The number of shards the RGW data log entries will reside in. This affects the data sync parallelism as a shard can only be processed by a single RGW at a time.",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_data_log_obj_prefix": {
      "name": "rgw_data_log_obj_prefix",
      "type": "str",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "data_log",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_data_sync_poll_interval": {
      "name": "rgw_data_sync_poll_interval",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_meta_sync_poll_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_meta_sync_poll_interval": {
      "name": "rgw_meta_sync_poll_interval",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_data_sync_poll_interval"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_bucket_sync_spawn_window": {
      "name": "rgw_bucket_sync_spawn_window",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_data_sync_spawn_window",
        "rgw_meta_sync_spawn_window"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_data_sync_spawn_window": {
      "name": "rgw_data_sync_spawn_window",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_bucket_sync_spawn_window",
        "rgw_meta_sync_spawn_window"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_meta_sync_spawn_window": {
      "name": "rgw_meta_sync_spawn_window",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_bucket_sync_spawn_window",
        "rgw_data_sync_spawn_window"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_bucket_quota_ttl": {
      "name": "rgw_bucket_quota_ttl",
      "type": "int",
      "level": "advanced",
      "desc": "Bucket quota stats cache TTL",
      "long_desc": "Length of time for bucket stats to be cached within RGW instance.",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_bucket_quota_cache_size": {
      "name": "rgw_bucket_quota_cache_size",
      "type": "int",
      "level": "advanced",
      "desc": "RGW quota stats cache size",
      "long_desc": "Maximum number of entries in the quota stats cache.",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_bucket_default_quota_max_objects": {
      "name": "rgw_bucket_default_quota_max_objects",
      "type": "int",
      "level": "basic",
      "desc": "Default quota for max objects in a bucket",
      "long_desc": "The default quota configuration for max number of objects in a bucket. A negative number means 'unlimited'.",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_bucket_default_quota_max_size": {
      "name": "rgw_bucket_default_quota_max_size",
      "type": "int",
      "level": "advanced",
      "desc": "Default quota for total size in a bucket",
      "long_desc": "The default quota configuration for total size of objects in a bucket. A negative number means 'unlimited'.",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_expose_bucket": {
      "name": "rgw_expose_bucket",
      "type": "bool",
      "level": "advanced",
      "desc": "Send Bucket HTTP header with the response",
      "long_desc": "If true, RGW will send a Bucket HTTP header with the responses. The header will contain the name of the bucket the operation happened on.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_frontends": {
      "name": "rgw_frontends",
      "type": "str",
      "level": "basic",
      "desc": "RGW frontends configuration",
      "long_desc": "A comma delimited list of frontends configuration. Each configuration contains the type of the frontend followed by an optional space delimited set of key=value config parameters.",
      "default": "beast port=7480",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_frontend_defaults": {
      "name": "rgw_frontend_defaults",
      "type": "str",
      "level": "advanced",
      "desc": "RGW frontends default configuration",
      "long_desc": "A comma delimited list of default frontends configuration.",
      "default": "beast ssl_certificate=config://rgw/cert/$realm/$zone.crt ssl_private_key=config://rgw/cert/$realm/$zone.key",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_beast_enable_async": {
      "name": "rgw_beast_enable_async",
      "type": "bool",
      "level": "dev",
      "desc": "Enable async request processing under beast using coroutines",
      "long_desc": "When enabled, the beast frontend will process requests using coroutines, allowing the concurrent processing of several requests on the same thread. When disabled, the number of concurrent requests will be limited by the thread count, but debugging and tracing the synchronous calls can be easier.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_quota_bucket_sync_interval": {
      "name": "rgw_user_quota_bucket_sync_interval",
      "type": "int",
      "level": "advanced",
      "desc": "User quota bucket sync interval",
      "long_desc": "Time period for accumulating modified buckets before syncing these stats.",
      "default": 180,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_quota_sync_interval": {
      "name": "rgw_user_quota_sync_interval",
      "type": "int",
      "level": "advanced",
      "desc": "User quota sync interval",
      "long_desc": "Time period for accumulating modified buckets before syncing entire user stats.",
      "default": 86400,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_quota_sync_idle_users": {
      "name": "rgw_user_quota_sync_idle_users",
      "type": "bool",
      "level": "advanced",
      "desc": "Should sync idle users quota",
      "long_desc": "Whether stats for idle users be fully synced.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_quota_sync_wait_time": {
      "name": "rgw_user_quota_sync_wait_time",
      "type": "int",
      "level": "advanced",
      "desc": "User quota full-sync wait time",
      "long_desc": "Minimum time between two full stats sync for non-idle users.",
      "default": 86400,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_default_quota_max_objects": {
      "name": "rgw_user_default_quota_max_objects",
      "type": "int",
      "level": "basic",
      "desc": "User quota max objects",
      "long_desc": "The default quota configuration for total number of objects for a single user. A negative number means 'unlimited'.",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_default_quota_max_size": {
      "name": "rgw_user_default_quota_max_size",
      "type": "int",
      "level": "basic",
      "desc": "User quota max size",
      "long_desc": "The default quota configuration for total size of objects for a single user. A negative number means 'unlimited'.",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_account_default_quota_max_objects": {
      "name": "rgw_account_default_quota_max_objects",
      "type": "int",
      "level": "basic",
      "desc": "Account quota max objects",
      "long_desc": "The default quota configuration for total number of objects for a single account. A negative number means 'unlimited'.",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_account_default_quota_max_size": {
      "name": "rgw_account_default_quota_max_size",
      "type": "int",
      "level": "basic",
      "desc": "Account quota max size",
      "long_desc": "The default quota configuration for total size of objects for a single account. A negative number means 'unlimited'.",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_multipart_min_part_size": {
      "name": "rgw_multipart_min_part_size",
      "type": "size",
      "level": "advanced",
      "desc": "Minimum S3 multipart-upload part size",
      "long_desc": "When doing a multipart upload, each part (other than the last part) must be at least this size.",
      "default": "5242880",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_multipart_part_upload_limit": {
      "name": "rgw_multipart_part_upload_limit",
      "type": "int",
      "level": "advanced",
      "desc": "Max number of parts in multipart upload",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_slo_entries": {
      "name": "rgw_max_slo_entries",
      "type": "int",
      "level": "advanced",
      "desc": "Max number of entries in Swift Static Large Object manifest",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_olh_pending_timeout_sec": {
      "name": "rgw_olh_pending_timeout_sec",
      "type": "int",
      "level": "dev",
      "desc": "Max time for pending OLH change to complete",
      "long_desc": "OLH is a versioned object's logical head. Operations on it are journaled and as pending before completion. If an operation doesn't complete with this amount of seconds, we remove the operation from the journal.",
      "default": 3600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_max_buckets": {
      "name": "rgw_user_max_buckets",
      "type": "int",
      "level": "basic",
      "desc": "Max number of buckets per user",
      "long_desc": "A user can create at most this number of buckets. Zero means no limit; a negative value means users cannot create any new buckets, although users will retain buckets already created.",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_objexp_gc_interval": {
      "name": "rgw_objexp_gc_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "Swift objects expirer garbage collector interval",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_objexp_hints_num_shards": {
      "name": "rgw_objexp_hints_num_shards",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of object expirer data shards",
      "long_desc": "The number of shards the (Swift) object expirer will store its data on.",
      "default": 127,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_objexp_chunk_size": {
      "name": "rgw_objexp_chunk_size",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_enable_static_website": {
      "name": "rgw_enable_static_website",
      "type": "bool",
      "level": "basic",
      "desc": "Enable static website APIs",
      "long_desc": "This configurable controls whether RGW handles the website control APIs. RGW can server static websites if s3website hostnames are configured, and unrelated to this configurable.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_unique_email": {
      "name": "rgw_user_unique_email",
      "type": "bool",
      "level": "basic",
      "desc": "Require local RGW users to have unique email addresses",
      "long_desc": "Enforce builtin user accounts to have unique email addresses.  This setting is historical.  In future, non-enforcement of email address uniqueness is likely to become the default.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_log_http_headers": {
      "name": "rgw_log_http_headers",
      "type": "str",
      "level": "basic",
      "desc": "List of HTTP headers to log",
      "long_desc": "A comma delimited list of HTTP headers to log when seen, ignores case (e.g., http_x_forwarded_for).",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_num_async_rados_threads": {
      "name": "rgw_num_async_rados_threads",
      "type": "int",
      "level": "advanced",
      "desc": "Number of concurrent RADOS operations in multisite sync",
      "long_desc": "The number of concurrent RADOS IO operations that will be triggered for handling multisite sync operations. This includes control related work, and not the actual sync operations.",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_md_notify_interval_msec": {
      "name": "rgw_md_notify_interval_msec",
      "type": "int",
      "level": "advanced",
      "desc": "Length of time to aggregate metadata changes",
      "long_desc": "Length of time (in milliseconds) in which the master zone aggregates all the metadata changes that occurred, before sending notifications to all the other zones.",
      "default": 200,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_run_sync_thread": {
      "name": "rgw_run_sync_thread",
      "type": "bool",
      "level": "advanced",
      "desc": "Should run sync thread",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_lease_period": {
      "name": "rgw_sync_lease_period",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 120,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_log_trim_interval": {
      "name": "rgw_sync_log_trim_interval",
      "type": "int",
      "level": "advanced",
      "desc": "Sync log trim interval",
      "long_desc": "Time in seconds between attempts to trim sync logs.",
      "default": 1200,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_log_trim_max_buckets": {
      "name": "rgw_sync_log_trim_max_buckets",
      "type": "int",
      "level": "advanced",
      "desc": "Maximum number of buckets to trim per interval",
      "long_desc": "The maximum number of buckets to consider for bucket index log trimming each trim interval, regardless of the number of bucket index shards. Priority is given to buckets with the most sync activity over the last trim interval.",
      "default": 16,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_sync_log_trim_interval",
        "rgw_sync_log_trim_min_cold_buckets",
        "rgw_sync_log_trim_concurrent_buckets"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_log_trim_min_cold_buckets": {
      "name": "rgw_sync_log_trim_min_cold_buckets",
      "type": "int",
      "level": "advanced",
      "desc": "Minimum number of cold buckets to trim per interval",
      "long_desc": "Of the `rgw_sync_log_trim_max_buckets` selected for bucket index log trimming each trim interval, at least this many of them must be 'cold' buckets. These buckets are selected in order from the list of all bucket instances, to guarantee that all buckets will be visited eventually.",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_sync_log_trim_interval",
        "rgw_sync_log_trim_max_buckets",
        "rgw_sync_log_trim_concurrent_buckets"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_log_trim_concurrent_buckets": {
      "name": "rgw_sync_log_trim_concurrent_buckets",
      "type": "int",
      "level": "advanced",
      "desc": "Maximum number of buckets to trim in parallel",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_sync_log_trim_interval",
        "rgw_sync_log_trim_max_buckets",
        "rgw_sync_log_trim_min_cold_buckets"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_data_inject_err_probability": {
      "name": "rgw_sync_data_inject_err_probability",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_meta_inject_err_probability": {
      "name": "rgw_sync_meta_inject_err_probability",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_data_full_inject_err_probability": {
      "name": "rgw_sync_data_full_inject_err_probability",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_trace_history_size": {
      "name": "rgw_sync_trace_history_size",
      "type": "size",
      "level": "advanced",
      "desc": "Sync trace history size",
      "long_desc": "Maximum number of complete sync trace entries to keep.",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_trace_per_node_log_size": {
      "name": "rgw_sync_trace_per_node_log_size",
      "type": "int",
      "level": "advanced",
      "desc": "Sync trace per-node log size",
      "long_desc": "The number of log entries to keep per sync-trace node.",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sync_trace_servicemap_update_interval": {
      "name": "rgw_sync_trace_servicemap_update_interval",
      "type": "int",
      "level": "advanced",
      "desc": "Sync-trace service-map update interval",
      "long_desc": "Number of seconds between service-map updates of sync-trace events.",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_period_push_interval": {
      "name": "rgw_period_push_interval",
      "type": "float",
      "level": "advanced",
      "desc": "Period push interval",
      "long_desc": "Number of seconds to wait before retrying 'period push' operation.",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_period_push_interval_max": {
      "name": "rgw_period_push_interval_max",
      "type": "float",
      "level": "advanced",
      "desc": "Period push maximum interval",
      "long_desc": "The max number of seconds to wait before retrying 'period push' after exponential backoff.",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_safe_max_objects_per_shard": {
      "name": "rgw_safe_max_objects_per_shard",
      "type": "int",
      "level": "advanced",
      "desc": "Safe number of objects per shard",
      "long_desc": "This is the max number of objects per bucket index shard that RGW considers safe. RGW will warn if it identifies a bucket where its per-shard count is higher than a percentage of this number.",
      "default": 102400,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_shard_warning_threshold"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_shard_warning_threshold": {
      "name": "rgw_shard_warning_threshold",
      "type": "float",
      "level": "advanced",
      "desc": "Warn about max objects per shard",
      "long_desc": "Warn if number of objects per shard in a specific bucket passed this percentage of the safe number.",
      "default": 90,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_safe_max_objects_per_shard"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_swift_versioning_enabled": {
      "name": "rgw_swift_versioning_enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable Swift versioning",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_swift_custom_header": {
      "name": "rgw_swift_custom_header",
      "type": "str",
      "level": "advanced",
      "desc": "Enable swift custom header",
      "long_desc": "If not empty, specifies a name of HTTP header that can include custom data. When uploading an object, if this header is passed RGW will store this header info and it will be available when listing the bucket.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_swift_need_stats": {
      "name": "rgw_swift_need_stats",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable stats on bucket listing in Swift",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_reshard_num_logs": {
      "name": "rgw_reshard_num_logs",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 16,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw",
        "rgw"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_reshard_bucket_lock_duration": {
      "name": "rgw_reshard_bucket_lock_duration",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of seconds the timeout on the reshard locks (bucket reshard lock and reshard log lock) are set to. As a reshard proceeds these locks can be renewed/extended. If too short, reshards cannot complete and will fail, causing a future reshard attempt. If too long a hung or crashed reshard attempt will keep the bucket locked for an extended period, not allowing RGW to detect the failed reshard attempt and recover.",
      "long_desc": "",
      "default": 360,
      "daemon_default": "",
      "tags": [
        "performance"
      ],
      "services": [
        "rgw",
        "rgw"
      ],
      "see_also": [],
      "min": 30,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_debug_inject_latency_bi_unlink": {
      "name": "rgw_debug_inject_latency_bi_unlink",
      "type": "uint",
      "level": "dev",
      "desc": "Latency (in seconds) injected before rgw bucket index unlink op calls to simulate queueing latency and validate behavior of simultaneuous delete requests which target the same object.",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_debug_inject_set_olh_err": {
      "name": "rgw_debug_inject_set_olh_err",
      "type": "uint",
      "level": "dev",
      "desc": "Whether to inject errors between rados olh modification initialization and bucket index instance linking. The value determines the error code. This exists for development and testing purposes to help simulate cases where bucket index entries aren't cleaned up by the request thread after an error scenario.",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_debug_inject_olh_cancel_modification_err": {
      "name": "rgw_debug_inject_olh_cancel_modification_err",
      "type": "bool",
      "level": "dev",
      "desc": "Whether to inject an error to simulate a failure to cancel olh modification. This exists for development and testing purposes.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_reshard_batch_size": {
      "name": "rgw_reshard_batch_size",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of reshard entries to batch together before sending the operations to the CLS back-end",
      "long_desc": "",
      "default": 64,
      "daemon_default": "",
      "tags": [
        "performance"
      ],
      "services": [
        "rgw",
        "rgw"
      ],
      "see_also": [],
      "min": 8,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_reshard_max_aio": {
      "name": "rgw_reshard_max_aio",
      "type": "uint",
      "level": "advanced",
      "desc": "Maximum number of outstanding asynchronous I/O operations to allow at a time during resharding",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [
        "performance"
      ],
      "services": [
        "rgw",
        "rgw"
      ],
      "see_also": [],
      "min": 16,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_trust_forwarded_https": {
      "name": "rgw_trust_forwarded_https",
      "type": "bool",
      "level": "advanced",
      "desc": "Trust Forwarded and X-Forwarded-Proto headers",
      "long_desc": "When a proxy in front of radosgw is used for ssl termination, radosgw does not know whether incoming http connections are secure. Enable this option to trust the Forwarded and X-Forwarded-Proto headers sent by the proxy when determining whether the connection is secure. This is required for some features, such as server side encryption. (Never enable this setting if you do not have a trusted proxy in front of radosgw, or else malicious users will be able to set these headers in any request.)",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_require_ssl"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_crypt_require_ssl": {
      "name": "rgw_crypt_require_ssl",
      "type": "bool",
      "level": "advanced",
      "desc": "Requests including encryption key headers must be sent over ssl",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_crypt_default_encryption_key": {
      "name": "rgw_crypt_default_encryption_key",
      "type": "str",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_s3_kms_backend": {
      "name": "rgw_crypt_s3_kms_backend",
      "type": "str",
      "level": "advanced",
      "desc": "Where the SSE-KMS encryption keys are stored. Supported KMS systems are OpenStack Barbican ('barbican', the default) and HashiCorp Vault ('vault').",
      "long_desc": "",
      "default": "barbican",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [
        "barbican",
        "vault",
        "testing",
        "kmip"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_s3_kms_encryption_keys": {
      "name": "rgw_crypt_s3_kms_encryption_keys",
      "type": "str",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_vault_auth": {
      "name": "rgw_crypt_vault_auth",
      "type": "str",
      "level": "advanced",
      "desc": "Type of authentication method to be used with Vault.",
      "long_desc": "",
      "default": "token",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_s3_kms_backend",
        "rgw_crypt_vault_addr",
        "rgw_crypt_vault_token_file"
      ],
      "enum_values": [
        "token",
        "agent"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_vault_token_file": {
      "name": "rgw_crypt_vault_token_file",
      "type": "str",
      "level": "advanced",
      "desc": "If authentication method is 'token', provide a path to the token file, which for security reasons should readable only by Rados Gateway.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_s3_kms_backend",
        "rgw_crypt_vault_auth",
        "rgw_crypt_vault_addr"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_vault_addr": {
      "name": "rgw_crypt_vault_addr",
      "type": "str",
      "level": "advanced",
      "desc": "Vault server base address.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_s3_kms_backend",
        "rgw_crypt_vault_auth",
        "rgw_crypt_vault_prefix"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_vault_prefix": {
      "name": "rgw_crypt_vault_prefix",
      "type": "str",
      "level": "advanced",
      "desc": "Vault secret URL prefix, which can be used to restrict access to a particular subset of the Vault secret space.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_s3_kms_backend",
        "rgw_crypt_vault_addr",
        "rgw_crypt_vault_auth"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_vault_secret_engine": {
      "name": "rgw_crypt_vault_secret_engine",
      "type": "str",
      "level": "advanced",
      "desc": "Vault Secret Engine to be used to retrieve encryption keys.",
      "long_desc": "",
      "default": "transit",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_s3_kms_backend",
        "rgw_crypt_vault_auth",
        "rgw_crypt_vault_addr"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_vault_namespace": {
      "name": "rgw_crypt_vault_namespace",
      "type": "str",
      "level": "advanced",
      "desc": "Vault Namespace to be used to select your tenant",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_s3_kms_backend",
        "rgw_crypt_vault_auth",
        "rgw_crypt_vault_addr"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_vault_verify_ssl": {
      "name": "rgw_crypt_vault_verify_ssl",
      "type": "bool",
      "level": "advanced",
      "desc": "Should RGW verify the vault server SSL certificate.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_crypt_vault_ssl_cacert": {
      "name": "rgw_crypt_vault_ssl_cacert",
      "type": "str",
      "level": "advanced",
      "desc": "Path for custom ca certificate for accessing vault server",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_vault_ssl_clientcert": {
      "name": "rgw_crypt_vault_ssl_clientcert",
      "type": "str",
      "level": "advanced",
      "desc": "Path for custom client certificate for accessing vault server",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_vault_ssl_clientkey": {
      "name": "rgw_crypt_vault_ssl_clientkey",
      "type": "str",
      "level": "advanced",
      "desc": "Path for private key required for client cert",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_kmip_addr": {
      "name": "rgw_crypt_kmip_addr",
      "type": "str",
      "level": "advanced",
      "desc": "kmip server address",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_kmip_ca_path": {
      "name": "rgw_crypt_kmip_ca_path",
      "type": "str",
      "level": "advanced",
      "desc": "ca for kmip servers",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_kmip_username": {
      "name": "rgw_crypt_kmip_username",
      "type": "str",
      "level": "advanced",
      "desc": "when authenticating via username",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_kmip_password": {
      "name": "rgw_crypt_kmip_password",
      "type": "str",
      "level": "advanced",
      "desc": "optional w/ username",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_kmip_client_cert": {
      "name": "rgw_crypt_kmip_client_cert",
      "type": "str",
      "level": "advanced",
      "desc": "connect using client certificate",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_kmip_client_key": {
      "name": "rgw_crypt_kmip_client_key",
      "type": "str",
      "level": "advanced",
      "desc": "connect using client certificate",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_kmip_kms_key_template": {
      "name": "rgw_crypt_kmip_kms_key_template",
      "type": "str",
      "level": "advanced",
      "desc": "sse-kms; kmip key names",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_kmip_s3_key_template": {
      "name": "rgw_crypt_kmip_s3_key_template",
      "type": "str",
      "level": "advanced",
      "desc": "sse-s3; kmip key template",
      "long_desc": "",
      "default": "$keyid",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_suppress_logs": {
      "name": "rgw_crypt_suppress_logs",
      "type": "bool",
      "level": "advanced",
      "desc": "Suppress logs that might print client key",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_backend": {
      "name": "rgw_crypt_sse_s3_backend",
      "type": "str",
      "level": "advanced",
      "desc": "Where the SSE-S3 encryption keys are stored. The only valid choice here is HashiCorp Vault ('vault').",
      "long_desc": "",
      "default": "vault",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [
        "vault"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_vault_secret_engine": {
      "name": "rgw_crypt_sse_s3_vault_secret_engine",
      "type": "str",
      "level": "advanced",
      "desc": "Vault Secret Engine to be used to retrieve encryption keys.",
      "long_desc": "",
      "default": "transit",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_sse_s3_backend",
        "rgw_crypt_sse_s3_vault_auth",
        "rgw_crypt_sse_s3_vault_addr"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_key_template": {
      "name": "rgw_crypt_sse_s3_key_template",
      "type": "str",
      "level": "advanced",
      "desc": "template for per-bucket sse-s3 keys in vault.",
      "long_desc": "This is the template for per-bucket sse-s3 keys. This string may include ``%bucket_id`` which will be expanded out to the bucket marker, a unique uuid assigned to that bucket. It could contain ``%owner_id``, which will expand out to the owner's id. Any other use of % is reserved and should not be used. If the template contains ``%bucket_id``, associated bucket keys will be automatically removed when the bucket is removed.",
      "default": "%bucket_id",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_sse_s3_backend",
        "rgw_crypt_sse_s3_vault_auth",
        "rgw_crypt_sse_s3_vault_addr"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_vault_auth": {
      "name": "rgw_crypt_sse_s3_vault_auth",
      "type": "str",
      "level": "advanced",
      "desc": "Type of authentication method to be used with SSE-S3 and Vault.",
      "long_desc": "",
      "default": "token",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_sse_s3_backend",
        "rgw_crypt_sse_s3_vault_addr",
        "rgw_crypt_sse_s3_vault_token_file"
      ],
      "enum_values": [
        "token",
        "agent"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_vault_token_file": {
      "name": "rgw_crypt_sse_s3_vault_token_file",
      "type": "str",
      "level": "advanced",
      "desc": "If authentication method is 'token', provide a path to the token file, which for security reasons should readable only by Rados Gateway.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_sse_s3_backend",
        "rgw_crypt_sse_s3_vault_auth",
        "rgw_crypt_sse_s3_vault_addr"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_vault_addr": {
      "name": "rgw_crypt_sse_s3_vault_addr",
      "type": "str",
      "level": "advanced",
      "desc": "SSE-S3 Vault server base address.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_sse_s3_backend",
        "rgw_crypt_sse_s3_vault_auth",
        "rgw_crypt_sse_s3_vault_prefix"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_vault_prefix": {
      "name": "rgw_crypt_sse_s3_vault_prefix",
      "type": "str",
      "level": "advanced",
      "desc": "SSE-S3 Vault secret URL prefix, which can be used to restrict access to a particular subset of the Vault secret space.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_sse_s3_backend",
        "rgw_crypt_sse_s3_vault_addr",
        "rgw_crypt_sse_s3_vault_auth"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_vault_namespace": {
      "name": "rgw_crypt_sse_s3_vault_namespace",
      "type": "str",
      "level": "advanced",
      "desc": "Vault Namespace to be used to select your tenant",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_crypt_sse_s3_backend",
        "rgw_crypt_sse_s3_vault_auth",
        "rgw_crypt_sse_s3_vault_addr"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_vault_verify_ssl": {
      "name": "rgw_crypt_sse_s3_vault_verify_ssl",
      "type": "bool",
      "level": "advanced",
      "desc": "Should RGW verify the vault server SSL certificate.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_vault_ssl_cacert": {
      "name": "rgw_crypt_sse_s3_vault_ssl_cacert",
      "type": "str",
      "level": "advanced",
      "desc": "Path for custom ca certificate for accessing vault server",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_vault_ssl_clientcert": {
      "name": "rgw_crypt_sse_s3_vault_ssl_clientcert",
      "type": "str",
      "level": "advanced",
      "desc": "Path for custom client certificate for accessing vault server",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_crypt_sse_s3_vault_ssl_clientkey": {
      "name": "rgw_crypt_sse_s3_vault_ssl_clientkey",
      "type": "str",
      "level": "advanced",
      "desc": "Path for private key required for client cert",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_list_bucket_min_readahead": {
      "name": "rgw_list_bucket_min_readahead",
      "type": "int",
      "level": "advanced",
      "desc": "Minimum number of entries to request from rados for bucket listing",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_rest_getusage_op_compat": {
      "name": "rgw_rest_getusage_op_compat",
      "type": "bool",
      "level": "advanced",
      "desc": "REST GetUsage request backward compatibility",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_torrent_flag": {
      "name": "rgw_torrent_flag",
      "type": "bool",
      "level": "advanced",
      "desc": "When true, uploaded objects will calculate and store a SHA256 hash of object data so the object can be retrieved as a torrent file",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_torrent_tracker": {
      "name": "rgw_torrent_tracker",
      "type": "str",
      "level": "advanced",
      "desc": "Torrent field announce and announce list",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_torrent_createby": {
      "name": "rgw_torrent_createby",
      "type": "str",
      "level": "advanced",
      "desc": "torrent field created by",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_torrent_comment": {
      "name": "rgw_torrent_comment",
      "type": "str",
      "level": "advanced",
      "desc": "Torrent field comment",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_torrent_encoding": {
      "name": "rgw_torrent_encoding",
      "type": "str",
      "level": "advanced",
      "desc": "torrent field encoding",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_data_notify_interval_msec": {
      "name": "rgw_data_notify_interval_msec",
      "type": "int",
      "level": "advanced",
      "desc": "data changes notification interval to followers",
      "long_desc": "In multisite, radosgw will occasionally broadcast new entries in its data changes log to peer zones, so they can prioritize sync of some of the most recent changes. Can be disabled with 0.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_torrent_origin": {
      "name": "rgw_torrent_origin",
      "type": "str",
      "level": "advanced",
      "desc": "Torrent origin",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_torrent_sha_unit": {
      "name": "rgw_torrent_sha_unit",
      "type": "size",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "524288",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_torrent_max_size": {
      "name": "rgw_torrent_max_size",
      "type": "size",
      "level": "advanced",
      "desc": "Objects over this size will not store torrent info.",
      "long_desc": "",
      "default": "5368709120",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_torrent_flag"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dynamic_resharding": {
      "name": "rgw_dynamic_resharding",
      "type": "bool",
      "level": "basic",
      "desc": "Enable dynamic resharding",
      "long_desc": "If true, RGW will dynamically increase the number of shards in buckets that have a high number of objects per shard.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_max_objs_per_shard",
        "rgw_max_dynamic_shards"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_objs_per_shard": {
      "name": "rgw_max_objs_per_shard",
      "type": "uint",
      "level": "basic",
      "desc": "Max objects per shard for dynamic resharding",
      "long_desc": "This is the max number of objects per bucket index shard that RGW will allow with dynamic resharding. RGW will trigger an automatic reshard operation on the bucket if it exceeds this number.",
      "default": 100000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dynamic_resharding",
        "rgw_max_dynamic_shards"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_dynamic_shards": {
      "name": "rgw_max_dynamic_shards",
      "type": "uint",
      "level": "advanced",
      "desc": "Max shards that dynamic resharding can create",
      "long_desc": "This is the maximum number of bucket index shards that dynamic sharding is able to create on its own. This does not limit user requested resharding. Ideally this value is a prime number.",
      "default": 1999,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dynamic_resharding",
        "rgw_max_objs_per_shard"
      ],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_reshard_thread_interval": {
      "name": "rgw_reshard_thread_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of seconds between processing of reshard log entries",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": 10,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_cache_expiry_interval": {
      "name": "rgw_cache_expiry_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of seconds before entries in the cache are assumed stale and re-fetched. Zero is never.",
      "long_desc": "The Rados Gateway stores metadata and objects in an internal cache. This should be kept consistent by the OSD's relaying notify events between multiple watching RGW processes. In the event that this notification protocol fails, bounding the length of time that any data in the cache will be assumed valid will ensure that any RGW instance that falls out of sync will eventually recover. This seems to be an issue mostly for large numbers of RGW instances under heavy use. If you would like to turn off cache expiry, set this value to zero.",
      "default": 900,
      "daemon_default": "",
      "tags": [
        "performance"
      ],
      "services": [
        "rgw",
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_inject_notify_timeout_probability": {
      "name": "rgw_inject_notify_timeout_probability",
      "type": "float",
      "level": "dev",
      "desc": "Likelihood of ignoring a notify",
      "long_desc": "This is the probability that the RGW cache will ignore a cache notify message. It exists to help with the development and testing of cache consistency and recovery improvements. Please do not set it in a production cluster, as it actively causes failures. Set this to a floating point value between 0 and 1.",
      "default": 0,
      "daemon_default": "",
      "tags": [
        "fault injection",
        "testing"
      ],
      "services": [
        "rgw",
        "rgw"
      ],
      "see_also": [],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_notify_retries": {
      "name": "rgw_max_notify_retries",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of attempts to notify peers before giving up.",
      "long_desc": "The number of times we will attempt to update a peer's cache in the event of error before giving up. This is unlikely to be an issue unless your cluster is very heavily loaded. Beware that increasing this value may cause some operations to take longer in exceptional cases and thus may, rarely, cause clients to time out.",
      "default": 10,
      "daemon_default": "",
      "tags": [
        "error recovery"
      ],
      "services": [
        "rgw",
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sts_entry": {
      "name": "rgw_sts_entry",
      "type": "str",
      "level": "advanced",
      "desc": "STS URL prefix",
      "long_desc": "URL path prefix for internal STS requests.",
      "default": "sts",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_sts_key": {
      "name": "rgw_sts_key",
      "type": "str",
      "level": "advanced",
      "desc": "STS Key",
      "long_desc": "Key used for encrypting/ decrypting session token.",
      "default": "sts",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_s3_auth_use_sts": {
      "name": "rgw_s3_auth_use_sts",
      "type": "bool",
      "level": "advanced",
      "desc": "Should S3 authentication use STS.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sts_max_session_duration": {
      "name": "rgw_sts_max_session_duration",
      "type": "uint",
      "level": "advanced",
      "desc": "Session token max duration",
      "long_desc": "This option can be used to configure the upper limit of the durationSeconds of temporary credentials returned by 'GetSessionToken'.",
      "default": 43200,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_sts_min_session_duration"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sts_min_session_duration": {
      "name": "rgw_sts_min_session_duration",
      "type": "uint",
      "level": "advanced",
      "desc": "Minimum allowed duration of a session",
      "long_desc": "This option can be used to configure the lower limit of durationSeconds of temporary credentials returned by 'AssumeRole*' calls.",
      "default": 900,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_sts_max_session_duration"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_max_listing_results": {
      "name": "rgw_max_listing_results",
      "type": "uint",
      "level": "advanced",
      "desc": "Upper bound on results in listing operations, ListBucket max-keys",
      "long_desc": "This caps the maximum permitted value for listing-like operations in RGW S3. Affects ListBucket(max-keys), ListBucketVersions(max-keys), ListBucketMultipartUploads(max-uploads), ListMultipartUploadParts(max-parts)",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw",
        "rgw"
      ],
      "see_also": [],
      "min": 1,
      "max": 100000,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_sts_token_introspection_url": {
      "name": "rgw_sts_token_introspection_url",
      "type": "str",
      "level": "advanced",
      "desc": "STS Web Token introspection URL",
      "long_desc": "URL for introspecting an STS Web Token.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_sts_client_id": {
      "name": "rgw_sts_client_id",
      "type": "str",
      "level": "advanced",
      "desc": "Client Id",
      "long_desc": "Client Id needed for introspecting a Web Token.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_sts_client_secret": {
      "name": "rgw_sts_client_secret",
      "type": "str",
      "level": "advanced",
      "desc": "Client Secret",
      "long_desc": "Client Secret needed for introspecting a Web Token.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_max_concurrent_requests": {
      "name": "rgw_max_concurrent_requests",
      "type": "int",
      "level": "basic",
      "desc": "Maximum number of concurrent HTTP requests.",
      "long_desc": "Maximum number of concurrent HTTP requests that the beast frontend will process. Tuning this can help to limit memory usage under heavy load.",
      "default": 1024,
      "daemon_default": "",
      "tags": [
        "performance"
      ],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_frontends"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_scheduler_type": {
      "name": "rgw_scheduler_type",
      "type": "str",
      "level": "advanced",
      "desc": "Set the type of dmclock scheduler, defaults to throttler Other valid values are dmclock which is experimental",
      "long_desc": "",
      "default": "throttler",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_dmclock_admin_res": {
      "name": "rgw_dmclock_admin_res",
      "type": "float",
      "level": "advanced",
      "desc": "mclock reservation for admin requests",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_admin_wgt",
        "rgw_dmclock_admin_lim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_admin_wgt": {
      "name": "rgw_dmclock_admin_wgt",
      "type": "float",
      "level": "advanced",
      "desc": "mclock weight for admin requests",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_admin_res",
        "rgw_dmclock_admin_lim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_admin_lim": {
      "name": "rgw_dmclock_admin_lim",
      "type": "float",
      "level": "advanced",
      "desc": "mclock limit for admin requests",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_admin_res",
        "rgw_dmclock_admin_wgt"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_auth_res": {
      "name": "rgw_dmclock_auth_res",
      "type": "float",
      "level": "advanced",
      "desc": "mclock reservation for object data requests",
      "long_desc": "",
      "default": 200,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_auth_wgt",
        "rgw_dmclock_auth_lim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_auth_wgt": {
      "name": "rgw_dmclock_auth_wgt",
      "type": "float",
      "level": "advanced",
      "desc": "mclock weight for object data requests",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_auth_res",
        "rgw_dmclock_auth_lim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_auth_lim": {
      "name": "rgw_dmclock_auth_lim",
      "type": "float",
      "level": "advanced",
      "desc": "mclock limit for object data requests",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_auth_res",
        "rgw_dmclock_auth_wgt"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_data_res": {
      "name": "rgw_dmclock_data_res",
      "type": "float",
      "level": "advanced",
      "desc": "mclock reservation for object data requests",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_data_wgt",
        "rgw_dmclock_data_lim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_data_wgt": {
      "name": "rgw_dmclock_data_wgt",
      "type": "float",
      "level": "advanced",
      "desc": "mclock weight for object data requests",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_data_res",
        "rgw_dmclock_data_lim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_data_lim": {
      "name": "rgw_dmclock_data_lim",
      "type": "float",
      "level": "advanced",
      "desc": "mclock limit for object data requests",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_data_res",
        "rgw_dmclock_data_wgt"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_metadata_res": {
      "name": "rgw_dmclock_metadata_res",
      "type": "float",
      "level": "advanced",
      "desc": "mclock reservation for metadata requests",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_metadata_wgt",
        "rgw_dmclock_metadata_lim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_metadata_wgt": {
      "name": "rgw_dmclock_metadata_wgt",
      "type": "float",
      "level": "advanced",
      "desc": "mclock weight for metadata requests",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_metadata_res",
        "rgw_dmclock_metadata_lim"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_dmclock_metadata_lim": {
      "name": "rgw_dmclock_metadata_lim",
      "type": "float",
      "level": "advanced",
      "desc": "mclock limit for metadata requests",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_dmclock_metadata_res",
        "rgw_dmclock_metadata_wgt"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_default_data_log_backing": {
      "name": "rgw_default_data_log_backing",
      "type": "str",
      "level": "advanced",
      "desc": "Default backing store for the RGW data sync log",
      "long_desc": "Whether to use the older OMAP backing store or the high performance FIFO based backing store by default. This only covers the creation of the log on startup if none exists.",
      "default": "fifo",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [
        "fifo",
        "omap"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_d3n_l1_local_datacache_enabled": {
      "name": "rgw_d3n_l1_local_datacache_enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable datacenter-scale dataset delivery local cache",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_d3n_l1_datacache_persistent_path": {
      "name": "rgw_d3n_l1_datacache_persistent_path",
      "type": "str",
      "level": "advanced",
      "desc": "path for the directory for storing the local cache objects data",
      "long_desc": "",
      "default": "/tmp/rgw_datacache/",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_d3n_l1_datacache_size": {
      "name": "rgw_d3n_l1_datacache_size",
      "type": "size",
      "level": "advanced",
      "desc": "datacache maximum size on disk in bytes",
      "long_desc": "",
      "default": "1073741824",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_d3n_l1_evict_cache_on_start": {
      "name": "rgw_d3n_l1_evict_cache_on_start",
      "type": "bool",
      "level": "advanced",
      "desc": "clear the content of the persistent data cache directory on start",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_d3n_l1_fadvise": {
      "name": "rgw_d3n_l1_fadvise",
      "type": "int",
      "level": "advanced",
      "desc": "posix_fadvise() flag for access pattern of cache files",
      "long_desc": "for example to bypass the page-cache - POSIX_FADV_DONTNEED=4",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_d3n_l1_eviction_policy": {
      "name": "rgw_d3n_l1_eviction_policy",
      "type": "str",
      "level": "advanced",
      "desc": "select the d3n cache eviction policy",
      "long_desc": "",
      "default": "lru",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [
        "lru",
        "random"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_d3n_libaio_aio_threads": {
      "name": "rgw_d3n_libaio_aio_threads",
      "type": "int",
      "level": "advanced",
      "desc": "specifies the maximum number of worker threads that may be used by libaio",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_thread_pool_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_d3n_libaio_aio_num": {
      "name": "rgw_d3n_libaio_aio_num",
      "type": "int",
      "level": "advanced",
      "desc": "specifies the maximum number of simultaneous I/O requests that libaio expects to enqueue",
      "long_desc": "",
      "default": 64,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_thread_pool_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_backend_store": {
      "name": "rgw_backend_store",
      "type": "str",
      "level": "advanced",
      "desc": "experimental Option to set backend store type",
      "long_desc": "defaults to rados. Other valid values are dbstore, motr, and daos (All experimental).",
      "default": "rados",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [
        "rados",
        "dbstore",
        "motr",
        "daos"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_config_store": {
      "name": "rgw_config_store",
      "type": "str",
      "level": "advanced",
      "desc": "Configuration storage backend",
      "long_desc": "",
      "default": "rados",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [
        "rados",
        "dbstore",
        "json"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_filter": {
      "name": "rgw_filter",
      "type": "str",
      "level": "advanced",
      "desc": "experimental Option to set a filter",
      "long_desc": "defaults to none. Other valid values are base and d4n (both experimental).",
      "default": "none",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [
        "none",
        "base",
        "d4n",
        "posix"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "dbstore_db_dir": {
      "name": "dbstore_db_dir",
      "type": "str",
      "level": "advanced",
      "desc": "path for the directory for storing the db backend store data",
      "long_desc": "",
      "default": "/var/lib/ceph/radosgw",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "dbstore_db_name_prefix": {
      "name": "dbstore_db_name_prefix",
      "type": "str",
      "level": "advanced",
      "desc": "prefix to the file names created by db backend store",
      "long_desc": "",
      "default": "dbstore",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "dbstore_config_uri": {
      "name": "dbstore_config_uri",
      "type": "str",
      "level": "advanced",
      "desc": "Config database URI. URIs beginning with file: refer to local files opened with SQLite.",
      "long_desc": "",
      "default": "file:/var/lib/ceph/radosgw/dbstore-config.db",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_config_store"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_json_config": {
      "name": "rgw_json_config",
      "type": "str",
      "level": "advanced",
      "desc": "Path to a json file that contains the static zone and zonegroup configuration. Requires rgw_config_store=json.",
      "long_desc": "",
      "default": "/var/lib/ceph/radosgw/config.json",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_config_store"
      ],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "motr_profile_fid": {
      "name": "motr_profile_fid",
      "type": "str",
      "level": "advanced",
      "desc": "experimental Option to set Motr profile fid",
      "long_desc": "example value 0x7000000000000001:0x4f",
      "default": "0x7000000000000001:0x0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "motr_my_fid": {
      "name": "motr_my_fid",
      "type": "str",
      "level": "advanced",
      "desc": "experimental Option to set my Motr fid",
      "long_desc": "example value 0x7200000000000001:0x29",
      "default": "0x7200000000000001:0x0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "motr_admin_fid": {
      "name": "motr_admin_fid",
      "type": "str",
      "level": "advanced",
      "desc": "Admin Tool Motr FID for admin-level access.",
      "long_desc": "example value 0x7200000000000001:0x2c",
      "default": "0x7200000000000001:0x0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "motr_admin_endpoint": {
      "name": "motr_admin_endpoint",
      "type": "str",
      "level": "advanced",
      "desc": "experimental Option to set Admin Motr endpoint address",
      "long_desc": "example value 192.168.180.182@tcp:12345:4:1",
      "default": "192.168.180.182@tcp:12345:4:1",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "motr_my_endpoint": {
      "name": "motr_my_endpoint",
      "type": "str",
      "level": "advanced",
      "desc": "experimental Option to set my Motr endpoint address",
      "long_desc": "example value 192.168.180.182@tcp:12345:4:1",
      "default": "192.168.180.182@tcp:12345:4:1",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "motr_ha_endpoint": {
      "name": "motr_ha_endpoint",
      "type": "str",
      "level": "advanced",
      "desc": "experimental Option to set Motr HA agent endpoint address",
      "long_desc": "example value 192.168.180.182@tcp:12345:1:1",
      "default": "192.168.180.182@tcp:12345:1:1",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "motr_tracing_enabled": {
      "name": "motr_tracing_enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "Set to true when Motr client debugging is needed",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_posix_base_path": {
      "name": "rgw_posix_base_path",
      "type": "str",
      "level": "advanced",
      "desc": "experimental Option to set base path for POSIX Driver",
      "long_desc": "Base path for the POSIX driver.  All operations are relative to this path. Defaults to /tmp/rgw_posix_driver",
      "default": "/tmp/rgw_posix_driver",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_posix_database_root": {
      "name": "rgw_posix_database_root",
      "type": "str",
      "level": "advanced",
      "desc": "experimental Path to parent of POSIX Driver LMDB bucket listing cache",
      "long_desc": "Parent directory of LMDB bucket listing cache databases.",
      "default": "/var/lib/ceph/radosgw",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_posix_cache_max_buckets": {
      "name": "rgw_posix_cache_max_buckets",
      "type": "int",
      "level": "advanced",
      "desc": "experimental Number of buckets to maintain in the ordered listing cache",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_posix_cache_lanes": {
      "name": "rgw_posix_cache_lanes",
      "type": "int",
      "level": "advanced",
      "desc": "experimental Number of lanes in cache LRU",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_posix_cache_partitions": {
      "name": "rgw_posix_cache_partitions",
      "type": "int",
      "level": "advanced",
      "desc": "experimental Number of partitions in cache AVL",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_posix_cache_lmdb_count": {
      "name": "rgw_posix_cache_lmdb_count",
      "type": "int",
      "level": "advanced",
      "desc": "experimental Number of lmdb partitions in the ordered listing cache",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_luarocks_location": {
      "name": "rgw_luarocks_location",
      "type": "str",
      "level": "advanced",
      "desc": "Directory where luarocks install packages from allowlist",
      "long_desc": "",
      "default": "/tmp/rgw_luarocks/$name",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "rgwlc_auto_session_clear": {
      "name": "rgwlc_auto_session_clear",
      "type": "bool",
      "level": "advanced",
      "desc": "Automatically clear stale lifecycle sessions (i.e., after 2 idle processing cycles)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgwlc_skip_bucket_step": {
      "name": "rgwlc_skip_bucket_step",
      "type": "bool",
      "level": "advanced",
      "desc": "Conditionally skip the processing (but not the scheduling) of bucket lifecycle",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_pending_bucket_index_op_expiration": {
      "name": "rgw_pending_bucket_index_op_expiration",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of seconds a pending operation can remain in bucket index shard.",
      "long_desc": "Number of seconds a pending operation can remain in bucket index shard before it expires. Used for transactional bucket index operations, and if the operation does not complete in this time period, the operation will be dropped.",
      "default": 120,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw",
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_bucket_index_transaction_instrumentation": {
      "name": "rgw_bucket_index_transaction_instrumentation",
      "type": "bool",
      "level": "dev",
      "desc": "Turns on extra instrumentation surrounding bucket index transactions.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw",
        "osd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_allow_notification_secrets_in_cleartext": {
      "name": "rgw_allow_notification_secrets_in_cleartext",
      "type": "bool",
      "level": "advanced",
      "desc": "Allows sending secrets (e.g. passwords) over non encrypted HTTP messages.",
      "long_desc": "When bucket notification endpoint require secrets (e.g. passwords), we allow the topic creation only over HTTPS messages. This parameter can be set to \"true\" to bypass this check. Use this only if radosgw is on a trusted private network, and the message broker cannot be configured without password authentication. Otherwise, this will leak the credentials of your message broker and compromise its security.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_trust_forwarded_https"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "daos_pool": {
      "name": "daos_pool",
      "type": "str",
      "level": "advanced",
      "desc": "DAOS Pool to use",
      "long_desc": "",
      "default": "tank",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rgw_policy_reject_invalid_principals": {
      "name": "rgw_policy_reject_invalid_principals",
      "type": "bool",
      "level": "basic",
      "desc": "Whether to reject policies with invalid principals",
      "long_desc": "If true, policies with invalid principals will be rejected. We don't support Canonical User identifiers or some other form of policies that Amazon does, so if you are mirroring policies between RGW and AWS, you may wish to set this to false.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_d4n_host": {
      "name": "rgw_d4n_host",
      "type": "str",
      "level": "advanced",
      "desc": "The rgw directory host",
      "long_desc": "",
      "default": "127.0.0.1",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "rgw_d4n_port": {
      "name": "rgw_d4n_port",
      "type": "int",
      "level": "advanced",
      "desc": "The rgw directory port",
      "long_desc": "",
      "default": 6379,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "rgw_topic_persistency_time_to_live": {
      "name": "rgw_topic_persistency_time_to_live",
      "type": "uint",
      "level": "advanced",
      "desc": "The rgw retention of persistent topics by time (seconds)",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "rgw_topic_persistency_max_retries": {
      "name": "rgw_topic_persistency_max_retries",
      "type": "uint",
      "level": "advanced",
      "desc": "The maximum number sending a persistent notification would be tried. Note that the value of one would mean no retries, and the value of zero would mean that the notification would be tried indefinitely",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "rgw_topic_persistency_sleep_duration": {
      "name": "rgw_topic_persistency_sleep_duration",
      "type": "uint",
      "level": "advanced",
      "desc": "The minimum time (in seconds) between two tries of the same persistent notification. note that the actual time between the tries may be longer",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "rgw_lua_max_memory_per_state": {
      "name": "rgw_lua_max_memory_per_state",
      "type": "uint",
      "level": "advanced",
      "desc": "Max size of memory used by a single lua state",
      "long_desc": "This is the maximum size in bytes that a lua state can allocate for its own use. Note that this does not include any memory that can be accessed from lua, but managed by the RGW. If not set, it would use a default of 128K. If set to zero, the amount of memory would only be limited by the system.",
      "default": 128000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_topic_require_publish_policy": {
      "name": "rgw_topic_require_publish_policy",
      "type": "bool",
      "level": "basic",
      "desc": "Whether to validate user permissions to publish notifications to topics.",
      "long_desc": "If true, all users (other then the owner of the topic) will need to have a policy to publish notifications to topics. The topic policy can be set by owner via CreateTopic() or SetTopicAttribute(). Following permissions can be granted \"sns:Publish\", \"sns:GetTopicAttributes\", \"sns:SetTopicAttributes\", \"sns:DeleteTopic\" and \"sns:CreateTopic\" via Policy. NOTE that even if set to \"false\" topics will still follow the policies if set on them.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_counters_cache": {
      "name": "rgw_user_counters_cache",
      "type": "bool",
      "level": "dev",
      "desc": "enable a rgw perf counters cache for counters with user label",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_user_counters_cache_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_user_counters_cache_size": {
      "name": "rgw_user_counters_cache_size",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of labeled perf counters the user perf counters cache can store",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_user_counters_cache"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_bucket_counters_cache": {
      "name": "rgw_bucket_counters_cache",
      "type": "bool",
      "level": "dev",
      "desc": "enable a rgw perf counters cache for counters with bucket label",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_bucket_counters_cache_size"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_bucket_counters_cache_size": {
      "name": "rgw_bucket_counters_cache_size",
      "type": "uint",
      "level": "advanced",
      "desc": "Number of labeled perf counters the bucket perf counters cache can store",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [
        "rgw_bucket_counters_cache"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_kafka_connection_idle": {
      "name": "rgw_kafka_connection_idle",
      "type": "uint",
      "level": "advanced",
      "desc": "Time in seconds to delete idle kafka connections",
      "long_desc": "A conection will be considered \"idle\" if no messages are sent to it for more than the time defined. Note that the connection will not be considered idle, even if it is down, as long as there are attempts to send messages to it.",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_kafka_sleep_timeout": {
      "name": "rgw_kafka_sleep_timeout",
      "type": "uint",
      "level": "advanced",
      "desc": "Time in milliseconds to sleep while polling for kafka replies",
      "long_desc": "This will be used to prevent busy waiting for the kafka replies As well as for the cases where the broker is down and we try to reconnect. The same values times 3 will be used to sleep if there were no messages sent or received across all kafka connections",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rgw_kafka_message_timeout": {
      "name": "rgw_kafka_message_timeout",
      "type": "uint",
      "level": "advanced",
      "desc": "This is the maximum time in milliseconds to deliver a message (including retries)",
      "long_desc": "Delivery error occurs when the message timeout is exceeded. Value must be greater than zero, if set to zero, a value of 1 millisecond will be used.",
      "default": 5000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rgw"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_default_pool": {
      "name": "rbd_default_pool",
      "type": "str",
      "level": "advanced",
      "desc": "default pool for storing new images",
      "long_desc": "",
      "default": "rbd",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_default_data_pool": {
      "name": "rbd_default_data_pool",
      "type": "str",
      "level": "advanced",
      "desc": "default pool for storing data blocks for new images",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_default_features": {
      "name": "rbd_default_features",
      "type": "str",
      "level": "advanced",
      "desc": "default v2 image features for new images",
      "long_desc": "RBD features are only applicable for v2 images. This setting accepts either an integer bitmask value or comma-delimited string of RBD feature names. This setting is always internally stored as an integer bitmask value. The mapping between feature bitmask value and feature name is as follows: +1 -> layering, +2 -> striping, +4 -> exclusive-lock, +8 -> object-map, +16 -> fast-diff, +32 -> deep-flatten, +64 -> journaling, +128 -> data-pool",
      "default": "layering,exclusive-lock,object-map,fast-diff,deep-flatten",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "rbd_op_threads": {
      "name": "rbd_op_threads",
      "type": "uint",
      "level": "advanced",
      "desc": "number of threads to utilize for internal processing",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_op_thread_timeout": {
      "name": "rbd_op_thread_timeout",
      "type": "uint",
      "level": "advanced",
      "desc": "time in seconds for detecting a hung thread",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_disable_zero_copy_writes": {
      "name": "rbd_disable_zero_copy_writes",
      "type": "bool",
      "level": "advanced",
      "desc": "Disable the use of zero-copy writes to ensure unstable writes from clients cannot cause a CRC mismatch",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_non_blocking_aio": {
      "name": "rbd_non_blocking_aio",
      "type": "bool",
      "level": "advanced",
      "desc": "process AIO ops from a dispatch thread to prevent blocking",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_cache": {
      "name": "rbd_cache",
      "type": "bool",
      "level": "advanced",
      "desc": "whether to enable caching (writeback unless rbd_cache_max_dirty is 0)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_cache_policy": {
      "name": "rbd_cache_policy",
      "type": "str",
      "level": "advanced",
      "desc": "cache policy for handling writes.",
      "long_desc": "",
      "default": "writearound",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [
        "writethrough",
        "writeback",
        "writearound"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_cache_writethrough_until_flush": {
      "name": "rbd_cache_writethrough_until_flush",
      "type": "bool",
      "level": "advanced",
      "desc": "whether to make writeback caching writethrough until flush is called, to be sure the user of librbd will send flushes so that writeback is safe",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_cache_size": {
      "name": "rbd_cache_size",
      "type": "size",
      "level": "advanced",
      "desc": "cache size in bytes",
      "long_desc": "",
      "default": "33554432",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_cache_max_dirty": {
      "name": "rbd_cache_max_dirty",
      "type": "size",
      "level": "advanced",
      "desc": "dirty limit in bytes - set to 0 for write-through caching",
      "long_desc": "",
      "default": "25165824",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_cache_target_dirty": {
      "name": "rbd_cache_target_dirty",
      "type": "size",
      "level": "advanced",
      "desc": "target dirty limit in bytes",
      "long_desc": "",
      "default": "16777216",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_cache_max_dirty_age": {
      "name": "rbd_cache_max_dirty_age",
      "type": "float",
      "level": "advanced",
      "desc": "seconds in cache before writeback starts",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_cache_max_dirty_object": {
      "name": "rbd_cache_max_dirty_object",
      "type": "uint",
      "level": "advanced",
      "desc": "dirty limit for objects - set to 0 for auto calculate from rbd_cache_size",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_cache_block_writes_upfront": {
      "name": "rbd_cache_block_writes_upfront",
      "type": "bool",
      "level": "advanced",
      "desc": "whether to block writes to the cache before the aio_write call completes",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_parent_cache_enabled": {
      "name": "rbd_parent_cache_enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "whether to enable rbd shared ro cache",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_concurrent_management_ops": {
      "name": "rbd_concurrent_management_ops",
      "type": "uint",
      "level": "advanced",
      "desc": "how many operations can be in flight for a management operation like deleting or resizing an image",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_balance_snap_reads": {
      "name": "rbd_balance_snap_reads",
      "type": "bool",
      "level": "advanced",
      "desc": "distribute snap read requests to random OSD",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [
        "rbd_read_from_replica_policy"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_localize_snap_reads": {
      "name": "rbd_localize_snap_reads",
      "type": "bool",
      "level": "advanced",
      "desc": "localize snap read requests to closest OSD",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [
        "rbd_read_from_replica_policy"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_balance_parent_reads": {
      "name": "rbd_balance_parent_reads",
      "type": "bool",
      "level": "advanced",
      "desc": "distribute parent read requests to random OSD",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [
        "rbd_read_from_replica_policy"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_localize_parent_reads": {
      "name": "rbd_localize_parent_reads",
      "type": "bool",
      "level": "advanced",
      "desc": "localize parent requests to closest OSD",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [
        "rbd_read_from_replica_policy"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_sparse_read_threshold_bytes": {
      "name": "rbd_sparse_read_threshold_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "threshold for issuing a sparse-read",
      "long_desc": "minimum number of sequential bytes to read against an object before issuing a sparse-read request to the cluster. 0 implies it must be a full object read to issue a sparse-read, 1 implies always use sparse-read, and any value larger than the maximum object size will disable sparse-read for all requests",
      "default": "65536",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_readahead_trigger_requests": {
      "name": "rbd_readahead_trigger_requests",
      "type": "uint",
      "level": "advanced",
      "desc": "number of sequential requests necessary to trigger readahead",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_readahead_max_bytes": {
      "name": "rbd_readahead_max_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "set to 0 to disable readahead",
      "long_desc": "",
      "default": "524288",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_readahead_disable_after_bytes": {
      "name": "rbd_readahead_disable_after_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "how many bytes are read in total before readahead is disabled",
      "long_desc": "",
      "default": "52428800",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_clone_copy_on_read": {
      "name": "rbd_clone_copy_on_read",
      "type": "bool",
      "level": "advanced",
      "desc": "copy-up parent image blocks to clone upon read request",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_blocklist_on_break_lock": {
      "name": "rbd_blocklist_on_break_lock",
      "type": "bool",
      "level": "advanced",
      "desc": "whether to blocklist clients whose lock was broken",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_blocklist_expire_seconds": {
      "name": "rbd_blocklist_expire_seconds",
      "type": "uint",
      "level": "advanced",
      "desc": "number of seconds to blocklist - set to 0 for OSD default",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_request_timed_out_seconds": {
      "name": "rbd_request_timed_out_seconds",
      "type": "uint",
      "level": "advanced",
      "desc": "number of seconds before maintenance request times out",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_skip_partial_discard": {
      "name": "rbd_skip_partial_discard",
      "type": "bool",
      "level": "advanced",
      "desc": "skip discard (zero) of unaligned extents within an object",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_discard_granularity_bytes": {
      "name": "rbd_discard_granularity_bytes",
      "type": "uint",
      "level": "advanced",
      "desc": "minimum aligned size of discard operations",
      "long_desc": "",
      "default": 65536,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 4096,
      "max": 33554432,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_enable_alloc_hint": {
      "name": "rbd_enable_alloc_hint",
      "type": "bool",
      "level": "advanced",
      "desc": "when writing a object, it will issue a hint to osd backend to indicate the expected size object need",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_compression_hint": {
      "name": "rbd_compression_hint",
      "type": "str",
      "level": "basic",
      "desc": "Compression hint to send to the OSDs during writes",
      "long_desc": "",
      "default": "none",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [
        "none",
        "compressible",
        "incompressible"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "rbd_read_from_replica_policy": {
      "name": "rbd_read_from_replica_policy",
      "type": "str",
      "level": "basic",
      "desc": "Read replica policy send to the OSDS during reads",
      "long_desc": "",
      "default": "default",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [
        "default",
        "balance",
        "localize"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "rbd_tracing": {
      "name": "rbd_tracing",
      "type": "bool",
      "level": "advanced",
      "desc": "true if LTTng-UST tracepoints should be enabled",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_blkin_trace_all": {
      "name": "rbd_blkin_trace_all",
      "type": "bool",
      "level": "advanced",
      "desc": "create a blkin trace for all RBD requests",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_validate_pool": {
      "name": "rbd_validate_pool",
      "type": "bool",
      "level": "dev",
      "desc": "validate empty pools for RBD compatibility",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_validate_names": {
      "name": "rbd_validate_names",
      "type": "bool",
      "level": "advanced",
      "desc": "validate new image names for RBD compatibility",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_invalidate_object_map_on_timeout": {
      "name": "rbd_invalidate_object_map_on_timeout",
      "type": "bool",
      "level": "dev",
      "desc": "true if object map should be invalidated when load or update timeout",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_auto_exclusive_lock_until_manual_request": {
      "name": "rbd_auto_exclusive_lock_until_manual_request",
      "type": "bool",
      "level": "advanced",
      "desc": "automatically acquire/release exclusive lock until it is explicitly requested",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_move_to_trash_on_remove": {
      "name": "rbd_move_to_trash_on_remove",
      "type": "bool",
      "level": "basic",
      "desc": "automatically move images to the trash when deleted",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_move_to_trash_on_remove_expire_seconds": {
      "name": "rbd_move_to_trash_on_remove_expire_seconds",
      "type": "uint",
      "level": "basic",
      "desc": "default number of seconds to protect deleted images in the trash",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_move_parent_to_trash_on_remove": {
      "name": "rbd_move_parent_to_trash_on_remove",
      "type": "bool",
      "level": "basic",
      "desc": "move parent with clone format v2 children to the trash when deleted",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirroring_resync_after_disconnect": {
      "name": "rbd_mirroring_resync_after_disconnect",
      "type": "bool",
      "level": "advanced",
      "desc": "automatically start image resync after mirroring is disconnected due to being laggy",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirroring_delete_delay": {
      "name": "rbd_mirroring_delete_delay",
      "type": "uint",
      "level": "advanced",
      "desc": "time-delay in seconds for rbd-mirror delete propagation",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirroring_replay_delay": {
      "name": "rbd_mirroring_replay_delay",
      "type": "uint",
      "level": "advanced",
      "desc": "time-delay in seconds for rbd-mirror asynchronous replication",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirroring_max_mirroring_snapshots": {
      "name": "rbd_mirroring_max_mirroring_snapshots",
      "type": "uint",
      "level": "advanced",
      "desc": "mirroring snapshots limit",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 3,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_default_format": {
      "name": "rbd_default_format",
      "type": "uint",
      "level": "advanced",
      "desc": "default image format for new images",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_default_order": {
      "name": "rbd_default_order",
      "type": "uint",
      "level": "advanced",
      "desc": "default order (data block object size) for new images",
      "long_desc": "This configures the default object size for new images. The value is used as a power of two, meaning ``default_object_size = 2 ^ rbd_default_order``. Configure a value between 12 and 25 (inclusive), translating to 4KiB lower and 32MiB upper limit.",
      "default": 22,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_default_stripe_count": {
      "name": "rbd_default_stripe_count",
      "type": "uint",
      "level": "advanced",
      "desc": "default stripe count for new images",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_default_stripe_unit": {
      "name": "rbd_default_stripe_unit",
      "type": "size",
      "level": "advanced",
      "desc": "default stripe width for new images",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_default_map_options": {
      "name": "rbd_default_map_options",
      "type": "str",
      "level": "advanced",
      "desc": "default krbd map options",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_default_clone_format": {
      "name": "rbd_default_clone_format",
      "type": "str",
      "level": "advanced",
      "desc": "default internal format for handling clones",
      "long_desc": "This sets the internal format for tracking cloned images. The setting of '1' requires attaching to protected snapshots that cannot be removed until the clone is removed/flattened. The setting of '2' will allow clones to be attached to any snapshot and permits removing in-use parent snapshots but requires Mimic or later clients. The default setting of 'auto' will use the v2 format if the cluster is configured to require mimic or later clients.",
      "default": "auto",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [
        "1",
        "2",
        "auto"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "rbd_journal_order": {
      "name": "rbd_journal_order",
      "type": "uint",
      "level": "advanced",
      "desc": "default order (object size) for journal data objects",
      "long_desc": "",
      "default": 24,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 12,
      "max": 26,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_journal_splay_width": {
      "name": "rbd_journal_splay_width",
      "type": "uint",
      "level": "advanced",
      "desc": "number of active journal objects",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_journal_commit_age": {
      "name": "rbd_journal_commit_age",
      "type": "float",
      "level": "advanced",
      "desc": "commit time interval, seconds",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_journal_object_writethrough_until_flush": {
      "name": "rbd_journal_object_writethrough_until_flush",
      "type": "bool",
      "level": "advanced",
      "desc": "when enabled, the rbd_journal_object_flush* configuration options are ignored until the first flush so that batched journal IO is known to be safe for consistency",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_journal_object_flush_interval": {
      "name": "rbd_journal_object_flush_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of pending commits per journal object",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_journal_object_flush_bytes": {
      "name": "rbd_journal_object_flush_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "maximum number of pending bytes per journal object",
      "long_desc": "",
      "default": "1048576",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_journal_object_flush_age": {
      "name": "rbd_journal_object_flush_age",
      "type": "float",
      "level": "advanced",
      "desc": "maximum age (in seconds) for pending commits",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_journal_object_max_in_flight_appends": {
      "name": "rbd_journal_object_max_in_flight_appends",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of in-flight appends per journal object",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_journal_pool": {
      "name": "rbd_journal_pool",
      "type": "str",
      "level": "advanced",
      "desc": "pool for journal objects",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_journal_max_payload_bytes": {
      "name": "rbd_journal_max_payload_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "maximum journal payload size before splitting",
      "long_desc": "",
      "default": "16384",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_journal_max_concurrent_object_sets": {
      "name": "rbd_journal_max_concurrent_object_sets",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of object sets a journal client can be behind before it is automatically unregistered",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_iops_limit": {
      "name": "rbd_qos_iops_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired limit of IO operations per second",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_bps_limit": {
      "name": "rbd_qos_bps_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired limit of IO bytes per second",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_read_iops_limit": {
      "name": "rbd_qos_read_iops_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired limit of read operations per second",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_write_iops_limit": {
      "name": "rbd_qos_write_iops_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired limit of write operations per second",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_read_bps_limit": {
      "name": "rbd_qos_read_bps_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired limit of read bytes per second",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_write_bps_limit": {
      "name": "rbd_qos_write_bps_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired limit of write bytes per second",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_iops_burst": {
      "name": "rbd_qos_iops_burst",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst limit of IO operations",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_bps_burst": {
      "name": "rbd_qos_bps_burst",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst limit of IO bytes",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_read_iops_burst": {
      "name": "rbd_qos_read_iops_burst",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst limit of read operations",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_write_iops_burst": {
      "name": "rbd_qos_write_iops_burst",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst limit of write operations",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_read_bps_burst": {
      "name": "rbd_qos_read_bps_burst",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst limit of read bytes",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_write_bps_burst": {
      "name": "rbd_qos_write_bps_burst",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst limit of write bytes",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_iops_burst_seconds": {
      "name": "rbd_qos_iops_burst_seconds",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst duration in seconds of IO operations",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_bps_burst_seconds": {
      "name": "rbd_qos_bps_burst_seconds",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst duration in seconds of IO bytes",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_read_iops_burst_seconds": {
      "name": "rbd_qos_read_iops_burst_seconds",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst duration in seconds of read operations",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_write_iops_burst_seconds": {
      "name": "rbd_qos_write_iops_burst_seconds",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst duration in seconds of write operations",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_read_bps_burst_seconds": {
      "name": "rbd_qos_read_bps_burst_seconds",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst duration in seconds of read bytes",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_write_bps_burst_seconds": {
      "name": "rbd_qos_write_bps_burst_seconds",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst duration in seconds of write bytes",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_schedule_tick_min": {
      "name": "rbd_qos_schedule_tick_min",
      "type": "uint",
      "level": "advanced",
      "desc": "minimum schedule tick (in milliseconds) for QoS",
      "long_desc": "This determines the minimum time (in milliseconds) at which I/Os can become unblocked if the limit of a throttle is hit. In terms of the token bucket algorithm, this is the minimum interval at which tokens are added to the bucket.",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_qos_exclude_ops": {
      "name": "rbd_qos_exclude_ops",
      "type": "str",
      "level": "advanced",
      "desc": "optionally exclude ops from QoS",
      "long_desc": "Optionally exclude ops from QoS. This setting accepts either an integer bitmask value or comma-delimited string of op names. This setting is always internally stored as an integer bitmask value. The mapping between op bitmask value and op name is as follows: +1 -> read, +2 -> write, +4 -> discard, +8 -> write_same, +16 -> compare_and_write",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "rbd_discard_on_zeroed_write_same": {
      "name": "rbd_discard_on_zeroed_write_same",
      "type": "bool",
      "level": "advanced",
      "desc": "discard data on zeroed write same instead of writing zero",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mtime_update_interval": {
      "name": "rbd_mtime_update_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "RBD Image modify timestamp refresh interval. Set to 0 to disable modify timestamp update.",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 0,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_atime_update_interval": {
      "name": "rbd_atime_update_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "RBD Image access timestamp refresh interval. Set to 0 to disable access timestamp update.",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 0,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_io_scheduler": {
      "name": "rbd_io_scheduler",
      "type": "str",
      "level": "advanced",
      "desc": "RBD IO scheduler",
      "long_desc": "",
      "default": "simple",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [
        "none",
        "simple"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_io_scheduler_simple_max_delay": {
      "name": "rbd_io_scheduler_simple_max_delay",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum io delay (in milliseconds) for simple io scheduler (if set to 0 dalay is calculated based on latency stats)",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 0,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_persistent_cache_mode": {
      "name": "rbd_persistent_cache_mode",
      "type": "str",
      "level": "advanced",
      "desc": "enable persistent write back cache for this volume",
      "long_desc": "",
      "default": "disabled",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [
        "disabled",
        "rwl",
        "ssd"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_persistent_cache_size": {
      "name": "rbd_persistent_cache_size",
      "type": "uint",
      "level": "advanced",
      "desc": "size of the persistent write back cache for this volume",
      "long_desc": "",
      "default": 1073741824,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 1073741824,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_persistent_cache_path": {
      "name": "rbd_persistent_cache_path",
      "type": "str",
      "level": "advanced",
      "desc": "location of the persistent write back cache in a DAX-enabled filesystem on persistent memory",
      "long_desc": "",
      "default": "/tmp",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_quiesce_notification_attempts": {
      "name": "rbd_quiesce_notification_attempts",
      "type": "uint",
      "level": "dev",
      "desc": "the number of quiesce notification attempts",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_default_snapshot_quiesce_mode": {
      "name": "rbd_default_snapshot_quiesce_mode",
      "type": "str",
      "level": "advanced",
      "desc": "default snapshot quiesce mode",
      "long_desc": "",
      "default": "required",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [
        "required",
        "ignore-error",
        "skip"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_plugins": {
      "name": "rbd_plugins",
      "type": "str",
      "level": "advanced",
      "desc": "comma-delimited list of librbd plugins to enable",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_config_pool_override_update_timestamp": {
      "name": "rbd_config_pool_override_update_timestamp",
      "type": "uint",
      "level": "dev",
      "desc": "timestamp of last update to pool-level config overrides",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_journal_commit_age": {
      "name": "rbd_mirror_journal_commit_age",
      "type": "float",
      "level": "advanced",
      "desc": "commit time interval, seconds",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_journal_poll_age": {
      "name": "rbd_mirror_journal_poll_age",
      "type": "float",
      "level": "advanced",
      "desc": "maximum age (in seconds) between successive journal polls",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_sync_point_update_age": {
      "name": "rbd_mirror_sync_point_update_age",
      "type": "float",
      "level": "advanced",
      "desc": "number of seconds between each update of the image sync point object number",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_concurrent_image_syncs": {
      "name": "rbd_mirror_concurrent_image_syncs",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of image syncs in parallel",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_pool_replayers_refresh_interval": {
      "name": "rbd_mirror_pool_replayers_refresh_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "interval to refresh peers in rbd-mirror daemon",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_concurrent_image_deletions": {
      "name": "rbd_mirror_concurrent_image_deletions",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of image deletions in parallel",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_delete_retry_interval": {
      "name": "rbd_mirror_delete_retry_interval",
      "type": "float",
      "level": "advanced",
      "desc": "interval to check and retry the failed deletion requests",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_image_state_check_interval": {
      "name": "rbd_mirror_image_state_check_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "interval to get images from pool watcher and set sources in replayer",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_leader_heartbeat_interval": {
      "name": "rbd_mirror_leader_heartbeat_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "interval (in seconds) between mirror leader heartbeats",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_leader_max_missed_heartbeats": {
      "name": "rbd_mirror_leader_max_missed_heartbeats",
      "type": "uint",
      "level": "advanced",
      "desc": "number of missed heartbeats for non-lock owner to attempt to acquire lock",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_leader_max_acquire_attempts_before_break": {
      "name": "rbd_mirror_leader_max_acquire_attempts_before_break",
      "type": "uint",
      "level": "advanced",
      "desc": "number of failed attempts to acquire lock after missing heartbeats before breaking lock",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_image_policy_type": {
      "name": "rbd_mirror_image_policy_type",
      "type": "str",
      "level": "advanced",
      "desc": "active/active policy type for mapping images to instances",
      "long_desc": "",
      "default": "simple",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "enum_values": [
        "none",
        "simple"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "rbd_mirror_image_policy_migration_throttle": {
      "name": "rbd_mirror_image_policy_migration_throttle",
      "type": "uint",
      "level": "advanced",
      "desc": "number of seconds after which an image can be reshuffled (migrated) again",
      "long_desc": "",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_image_policy_update_throttle_interval": {
      "name": "rbd_mirror_image_policy_update_throttle_interval",
      "type": "float",
      "level": "advanced",
      "desc": "interval (in seconds) to throttle images for mirror daemon peer updates",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_image_policy_rebalance_timeout": {
      "name": "rbd_mirror_image_policy_rebalance_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "number of seconds policy should be idle before triggering reshuffle (rebalance) of images",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_perf_stats_prio": {
      "name": "rbd_mirror_perf_stats_prio",
      "type": "int",
      "level": "advanced",
      "desc": "Priority level for mirror daemon replication perf counters",
      "long_desc": "The daemon will send perf counter data to the manager daemon if the priority is not lower than mgr_stats_threshold.",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": 0,
      "max": 11,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_image_perf_stats_prio": {
      "name": "rbd_mirror_image_perf_stats_prio",
      "type": "int",
      "level": "advanced",
      "desc": "Priority level for mirror daemon per-image replication perf counters",
      "long_desc": "The daemon will send per-image perf counter data to the manager daemon if the priority is not lower than mgr_stats_threshold.",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [],
      "min": 0,
      "max": 11,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_memory_autotune": {
      "name": "rbd_mirror_memory_autotune",
      "type": "bool",
      "level": "dev",
      "desc": "Automatically tune the ratio of caches while respecting min values.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [
        "rbd_mirror_memory_target"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_memory_target": {
      "name": "rbd_mirror_memory_target",
      "type": "size",
      "level": "basic",
      "desc": "When tcmalloc and cache autotuning is enabled, try to keep this many bytes mapped in memory.",
      "long_desc": "",
      "default": "4294967296",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [
        "rbd_mirror_memory_autotune"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_memory_base": {
      "name": "rbd_mirror_memory_base",
      "type": "size",
      "level": "dev",
      "desc": "When tcmalloc and cache autotuning is enabled, estimate the minimum amount of memory in bytes the rbd-mirror daemon will need.",
      "long_desc": "",
      "default": "805306368",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [
        "rbd_mirror_memory_autotune"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_memory_expected_fragmentation": {
      "name": "rbd_mirror_memory_expected_fragmentation",
      "type": "float",
      "level": "dev",
      "desc": "When tcmalloc and cache autotuning is enabled, estimate the percent of memory fragmentation.",
      "long_desc": "",
      "default": 0.14999999999999999,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [
        "rbd_mirror_memory_autotune"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_memory_cache_min": {
      "name": "rbd_mirror_memory_cache_min",
      "type": "size",
      "level": "dev",
      "desc": "When tcmalloc and cache autotuning is enabled, set the minimum amount of memory used for cache.",
      "long_desc": "",
      "default": "134217728",
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [
        "rbd_mirror_memory_autotune"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_memory_cache_resize_interval": {
      "name": "rbd_mirror_memory_cache_resize_interval",
      "type": "float",
      "level": "dev",
      "desc": "When tcmalloc and cache autotuning is enabled, wait this many seconds between resizing caches.",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [
        "rbd_mirror_memory_autotune"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "rbd_mirror_memory_cache_autotune_interval": {
      "name": "rbd_mirror_memory_cache_autotune_interval",
      "type": "float",
      "level": "dev",
      "desc": "The number of seconds to wait between rebalances when cache autotune is enabled.",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "rbd-mirror"
      ],
      "see_also": [
        "rbd_mirror_memory_autotune"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_path": {
      "name": "immutable_object_cache_path",
      "type": "str",
      "level": "advanced",
      "desc": "immutable object cache data dir",
      "long_desc": "",
      "default": "/tmp/ceph_immutable_object_cache",
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "immutable_object_cache_sock": {
      "name": "immutable_object_cache_sock",
      "type": "str",
      "level": "advanced",
      "desc": "immutable object cache domain socket",
      "long_desc": "",
      "default": "/var/run/ceph/immutable_object_cache_sock",
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "immutable_object_cache_max_size": {
      "name": "immutable_object_cache_max_size",
      "type": "size",
      "level": "advanced",
      "desc": "max immutable object cache data size",
      "long_desc": "",
      "default": "1073741824",
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_max_inflight_ops": {
      "name": "immutable_object_cache_max_inflight_ops",
      "type": "uint",
      "level": "advanced",
      "desc": "max inflight promoting requests for immutable object cache daemon",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_client_dedicated_thread_num": {
      "name": "immutable_object_cache_client_dedicated_thread_num",
      "type": "uint",
      "level": "advanced",
      "desc": "immutable object cache client dedicated thread number",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_watermark": {
      "name": "immutable_object_cache_watermark",
      "type": "float",
      "level": "advanced",
      "desc": "immutable object cache water mark",
      "long_desc": "",
      "default": 0.90000000000000002,
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_qos_schedule_tick_min": {
      "name": "immutable_object_cache_qos_schedule_tick_min",
      "type": "millisecs",
      "level": "advanced",
      "desc": "minimum schedule tick for immutable object cache",
      "long_desc": "",
      "default": "50",
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "1",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_qos_iops_limit": {
      "name": "immutable_object_cache_qos_iops_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired immutable object cache IO operations limit per second",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_qos_iops_burst": {
      "name": "immutable_object_cache_qos_iops_burst",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst limit of immutable object cache IO operations",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_qos_iops_burst_seconds": {
      "name": "immutable_object_cache_qos_iops_burst_seconds",
      "type": "secs",
      "level": "advanced",
      "desc": "the desired burst duration in seconds of immutable object cache IO operations",
      "long_desc": "",
      "default": "1",
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "1",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_qos_bps_limit": {
      "name": "immutable_object_cache_qos_bps_limit",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired immutable object cache IO bytes limit per second",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_qos_bps_burst": {
      "name": "immutable_object_cache_qos_bps_burst",
      "type": "uint",
      "level": "advanced",
      "desc": "the desired burst limit of immutable object cache IO bytes",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "immutable_object_cache_qos_bps_burst_seconds": {
      "name": "immutable_object_cache_qos_bps_burst_seconds",
      "type": "secs",
      "level": "advanced",
      "desc": "the desired burst duration in seconds of immutable object cache IO bytes",
      "long_desc": "",
      "default": "1",
      "daemon_default": "",
      "tags": [],
      "services": [
        "immutable-object-cache"
      ],
      "see_also": [],
      "min": "1",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_alternate_name_max": {
      "name": "mds_alternate_name_max",
      "type": "size",
      "level": "advanced",
      "desc": "set the maximum length of alternate names for dentries",
      "long_desc": "",
      "default": "8192",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_fscrypt_last_block_max_size": {
      "name": "mds_fscrypt_last_block_max_size",
      "type": "size",
      "level": "advanced",
      "desc": "maximum size of the last block without the header along with a truncate request when the fscrypt is enabled.",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_valgrind_exit": {
      "name": "mds_valgrind_exit",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_standby_replay_damaged": {
      "name": "mds_standby_replay_damaged",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_numa_node": {
      "name": "mds_numa_node",
      "type": "int",
      "level": "advanced",
      "desc": "set mds's cpu affinity to a numa node (-1 for none)",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "mds_data": {
      "name": "mds_data",
      "type": "str",
      "level": "advanced",
      "desc": "path to MDS data and keyring",
      "long_desc": "",
      "default": "/var/lib/ceph/mds/$cluster-$id",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update"
      ]
    }
  },
  {
    "mds_join_fs": {
      "name": "mds_join_fs",
      "type": "str",
      "level": "basic",
      "desc": "file system MDS prefers to join",
      "long_desc": "This setting indicates which file system name the MDS should prefer to join (affinity). The monitors will try to have the MDS cluster safely reach a state where all MDS have strong affinity, even via failovers to a standby.",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_cache_trim_interval": {
      "name": "mds_cache_trim_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "interval in seconds between cache trimming",
      "long_desc": "",
      "default": "1",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_cache_quiesce_delay": {
      "name": "mds_cache_quiesce_delay",
      "type": "millisecs",
      "level": "dev",
      "desc": "delay before starting recursive quiesce inode operations",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_cache_quiesce_splitauth": {
      "name": "mds_cache_quiesce_splitauth",
      "type": "bool",
      "level": "advanced",
      "desc": "allow recursive quiesce across auth boundaries",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_cache_release_free_interval": {
      "name": "mds_cache_release_free_interval",
      "type": "secs",
      "level": "dev",
      "desc": "interval in seconds between heap releases",
      "long_desc": "",
      "default": "10",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_cache_memory_limit": {
      "name": "mds_cache_memory_limit",
      "type": "size",
      "level": "basic",
      "desc": "target maximum memory usage of MDS cache",
      "long_desc": "This sets a target maximum memory usage of the MDS cache and is the primary tunable to limit the MDS memory usage. The MDS will try to stay under a reservation of this limit (by default 95%; 1 - mds_cache_reservation) by trimming unused metadata in its cache and recalling cached items in the client caches. It is possible for the MDS to exceed this limit due to slow recall from clients. The mds_health_cache_threshold (150%) sets a cache full threshold for when the MDS signals a cluster health warning.",
      "default": "4294967296",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_cache_reservation": {
      "name": "mds_cache_reservation",
      "type": "float",
      "level": "advanced",
      "desc": "amount of memory to reserve for future cached objects",
      "long_desc": "",
      "default": 0.050000000000000003,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_health_cache_threshold": {
      "name": "mds_health_cache_threshold",
      "type": "float",
      "level": "advanced",
      "desc": "threshold for cache size to generate health warning",
      "long_desc": "",
      "default": 1.5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_cache_mid": {
      "name": "mds_cache_mid",
      "type": "float",
      "level": "advanced",
      "desc": "midpoint for MDS cache LRU",
      "long_desc": "",
      "default": 0.69999999999999996,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_cache_trim_decay_rate": {
      "name": "mds_cache_trim_decay_rate",
      "type": "float",
      "level": "advanced",
      "desc": "decay rate for trimming MDS cache throttle",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_cache_trim_threshold": {
      "name": "mds_cache_trim_threshold",
      "type": "size",
      "level": "advanced",
      "desc": "threshold for number of dentries that can be trimmed",
      "long_desc": "",
      "default": "262144",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_cache_quiesce_decay_rate": {
      "name": "mds_cache_quiesce_decay_rate",
      "type": "float",
      "level": "advanced",
      "desc": "decay rate for quiescing inodes throttle",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_cache_quiesce_threshold": {
      "name": "mds_cache_quiesce_threshold",
      "type": "size",
      "level": "advanced",
      "desc": "threshold for number of inodes that can be quiesced",
      "long_desc": "",
      "default": "524288",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_cache_quiesce_sleep": {
      "name": "mds_cache_quiesce_sleep",
      "type": "millisecs",
      "level": "advanced",
      "desc": "sleep time for request after passing quiesce threshold",
      "long_desc": "",
      "default": "200",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_max_file_recover": {
      "name": "mds_max_file_recover",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of files to recover file sizes in parallel",
      "long_desc": "",
      "default": 32,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_dir_max_commit_size": {
      "name": "mds_dir_max_commit_size",
      "type": "int",
      "level": "advanced",
      "desc": "maximum size in megabytes for a RADOS write to a directory",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_dir_keys_per_op": {
      "name": "mds_dir_keys_per_op",
      "type": "int",
      "level": "advanced",
      "desc": "number of directory entries to read in one RADOS operation",
      "long_desc": "",
      "default": 16384,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_decay_halflife": {
      "name": "mds_decay_halflife",
      "type": "float",
      "level": "advanced",
      "desc": "rate of decay for temperature counters on each directory for balancing",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_beacon_interval": {
      "name": "mds_beacon_interval",
      "type": "float",
      "level": "advanced",
      "desc": "interval in seconds between MDS beacon messages sent to monitors",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_beacon_grace": {
      "name": "mds_beacon_grace",
      "type": "float",
      "level": "advanced",
      "desc": "tolerance in seconds for missed MDS beacons to monitors",
      "long_desc": "",
      "default": 15,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_heartbeat_reset_grace": {
      "name": "mds_heartbeat_reset_grace",
      "type": "uint",
      "level": "advanced",
      "desc": "the basic unit of tolerance in how many circles in a loop, which will keep running by holding the mds_lock, it must trigger to reset heartbeat",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_heartbeat_grace": {
      "name": "mds_heartbeat_grace",
      "type": "float",
      "level": "advanced",
      "desc": "tolerance in seconds for MDS internal heartbeat",
      "long_desc": "",
      "default": 15,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_enforce_unique_name": {
      "name": "mds_enforce_unique_name",
      "type": "bool",
      "level": "advanced",
      "desc": "require MDS name is unique in the cluster",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_session_blocklist_on_timeout": {
      "name": "mds_session_blocklist_on_timeout",
      "type": "bool",
      "level": "advanced",
      "desc": "blocklist clients whose sessions have become stale",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_session_blocklist_on_evict": {
      "name": "mds_session_blocklist_on_evict",
      "type": "bool",
      "level": "advanced",
      "desc": "blocklist clients that have been evicted",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_sessionmap_keys_per_op": {
      "name": "mds_sessionmap_keys_per_op",
      "type": "uint",
      "level": "advanced",
      "desc": "number of omap keys to read from the SessionMap in one operation",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_recall_max_caps": {
      "name": "mds_recall_max_caps",
      "type": "size",
      "level": "advanced",
      "desc": "maximum number of caps to recall from client session in single recall",
      "long_desc": "",
      "default": "30000",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_recall_max_decay_rate": {
      "name": "mds_recall_max_decay_rate",
      "type": "float",
      "level": "advanced",
      "desc": "decay rate for throttle on recalled caps on a session",
      "long_desc": "",
      "default": 1.5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_recall_max_decay_threshold": {
      "name": "mds_recall_max_decay_threshold",
      "type": "size",
      "level": "advanced",
      "desc": "decay threshold for throttle on recalled caps on a session",
      "long_desc": "",
      "default": "131072",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_recall_global_max_decay_threshold": {
      "name": "mds_recall_global_max_decay_threshold",
      "type": "size",
      "level": "advanced",
      "desc": "decay threshold for throttle on recalled caps globally",
      "long_desc": "",
      "default": "131072",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_recall_warning_threshold": {
      "name": "mds_recall_warning_threshold",
      "type": "size",
      "level": "advanced",
      "desc": "decay threshold for warning on slow session cap recall",
      "long_desc": "",
      "default": "262144",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_recall_warning_decay_rate": {
      "name": "mds_recall_warning_decay_rate",
      "type": "float",
      "level": "advanced",
      "desc": "decay rate for warning on slow session cap recall",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_session_cache_liveness_decay_rate": {
      "name": "mds_session_cache_liveness_decay_rate",
      "type": "float",
      "level": "advanced",
      "desc": "decay rate for session liveness leading to preemptive cap recall",
      "long_desc": "This determines how long a session needs to be quiescent before the MDS begins preemptively recalling capabilities. The default of 5 minutes will cause 10 halvings of the decay counter after 1 hour, or 1/1024. The default magnitude of 10 (1^10 or 1024) is chosen so that the MDS considers a previously chatty session (approximately) to be quiescent after 1 hour.",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [
        "mds_session_cache_liveness_magnitude"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_session_cache_liveness_magnitude": {
      "name": "mds_session_cache_liveness_magnitude",
      "type": "size",
      "level": "advanced",
      "desc": "decay magnitude for preemptively recalling caps on quiet client",
      "long_desc": "This is the order of magnitude difference (in base 2) of the internal liveness decay counter and the number of capabilities the session holds. When this difference occurs, the MDS treats the session as quiescent and begins recalling capabilities.",
      "default": "10",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [
        "mds_session_cache_liveness_decay_rate"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_session_cap_acquisition_decay_rate": {
      "name": "mds_session_cap_acquisition_decay_rate",
      "type": "float",
      "level": "advanced",
      "desc": "decay rate for session readdir caps leading to readdir throttle",
      "long_desc": "The half-life for the session cap acquisition counter of caps acquired by readdir. This is used for throttling readdir requests from clients.",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_session_cap_acquisition_throttle": {
      "name": "mds_session_cap_acquisition_throttle",
      "type": "uint",
      "level": "advanced",
      "desc": "threshold at which the cap acquisition decay counter throttles",
      "long_desc": "",
      "default": 100000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_session_max_caps_throttle_ratio": {
      "name": "mds_session_max_caps_throttle_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "ratio of mds_max_caps_per_client that client must exceed before readdir may be throttled by cap acquisition throttle",
      "long_desc": "",
      "default": 1.1000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_cap_acquisition_throttle_retry_request_timeout": {
      "name": "mds_cap_acquisition_throttle_retry_request_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "timeout in seconds after which a client request is retried due to cap acquisition throttling",
      "long_desc": "",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_freeze_tree_timeout": {
      "name": "mds_freeze_tree_timeout",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_health_summarize_threshold": {
      "name": "mds_health_summarize_threshold",
      "type": "int",
      "level": "advanced",
      "desc": "threshold of number of clients to summarize late client recall",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_reconnect_timeout": {
      "name": "mds_reconnect_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "timeout in seconds to wait for clients to reconnect during MDS reconnect recovery state",
      "long_desc": "",
      "default": 45,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_deny_all_reconnect": {
      "name": "mds_deny_all_reconnect",
      "type": "bool",
      "level": "advanced",
      "desc": "flag to deny all client reconnects during failover",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_dir_prefetch": {
      "name": "mds_dir_prefetch",
      "type": "bool",
      "level": "advanced",
      "desc": "flag to prefetch entire dir",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_tick_interval": {
      "name": "mds_tick_interval",
      "type": "float",
      "level": "advanced",
      "desc": "time in seconds between upkeep tasks",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_dirstat_min_interval": {
      "name": "mds_dirstat_min_interval",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_scatter_nudge_interval": {
      "name": "mds_scatter_nudge_interval",
      "type": "float",
      "level": "advanced",
      "desc": "minimum interval between scatter lock updates",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_client_prealloc_inos": {
      "name": "mds_client_prealloc_inos",
      "type": "int",
      "level": "advanced",
      "desc": "number of unused inodes to pre-allocate to clients for file creation",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_client_delegate_inos_pct": {
      "name": "mds_client_delegate_inos_pct",
      "type": "uint",
      "level": "advanced",
      "desc": "percentage of preallocated inos to delegate to client",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_early_reply": {
      "name": "mds_early_reply",
      "type": "bool",
      "level": "advanced",
      "desc": "additional reply to clients that metadata requests are complete but not yet durable",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_replay_unsafe_with_closed_session": {
      "name": "mds_replay_unsafe_with_closed_session",
      "type": "bool",
      "level": "advanced",
      "desc": "complete all the replay request when mds is restarted, no matter the session is closed or not",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "mds_default_dir_hash": {
      "name": "mds_default_dir_hash",
      "type": "int",
      "level": "advanced",
      "desc": "hash function to select directory fragment for dentry name",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_log_pause": {
      "name": "mds_log_pause",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_log_event_large_threshold": {
      "name": "mds_log_event_large_threshold",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 524288,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": 1024,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_log_skip_corrupt_events": {
      "name": "mds_log_skip_corrupt_events",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_log_skip_unbounded_events": {
      "name": "mds_log_skip_unbounded_events",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_log_max_events": {
      "name": "mds_log_max_events",
      "type": "int",
      "level": "advanced",
      "desc": "maximum number of events in the MDS journal (-1 is unlimited)",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_log_events_per_segment": {
      "name": "mds_log_events_per_segment",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of events in an MDS journal segment",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_log_major_segment_event_ratio": {
      "name": "mds_log_major_segment_event_ratio",
      "type": "uint",
      "level": "advanced",
      "desc": "multiple of mds_log_events_per_segment between major segments",
      "long_desc": "",
      "default": 12,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [
        "mds_log_events_per_segment"
      ],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_log_segment_size": {
      "name": "mds_log_segment_size",
      "type": "size",
      "level": "advanced",
      "desc": "size in bytes of each MDS log segment",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_log_max_segments": {
      "name": "mds_log_max_segments",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of segments which may be untrimmed",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": 8,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_log_warn_factor": {
      "name": "mds_log_warn_factor",
      "type": "float",
      "level": "advanced",
      "desc": "trigger MDS_HEALTH_TRIM warning when the mds log is longer than mds_log_max_segments * mds_log_warn_factor",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_bal_export_pin": {
      "name": "mds_bal_export_pin",
      "type": "bool",
      "level": "advanced",
      "desc": "allow setting directory export pins to particular ranks",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_export_ephemeral_random": {
      "name": "mds_export_ephemeral_random",
      "type": "bool",
      "level": "advanced",
      "desc": "allow ephemeral random pinning of the loaded subtrees",
      "long_desc": "probabilistically pin the loaded directory inode and the subtree beneath it to an MDS based on the consistent hash of the inode number. The higher this value the more likely the loaded subtrees get pinned",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_export_ephemeral_random_max": {
      "name": "mds_export_ephemeral_random_max",
      "type": "float",
      "level": "advanced",
      "desc": "the maximum percent permitted for random ephemeral pin policy",
      "long_desc": "",
      "default": 0.01,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [
        "mds_export_ephemeral_random"
      ],
      "min": 0,
      "max": 1,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_export_ephemeral_distributed": {
      "name": "mds_export_ephemeral_distributed",
      "type": "bool",
      "level": "advanced",
      "desc": "allow ephemeral distributed pinning of the loaded subtrees",
      "long_desc": "pin the immediate child directories of the loaded directory inode based on the consistent hash of the child's inode number. ",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_export_ephemeral_distributed_factor": {
      "name": "mds_export_ephemeral_distributed_factor",
      "type": "float",
      "level": "advanced",
      "desc": "multiple of max_mds for splitting and distributing directory",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": 1,
      "max": 100,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_bal_sample_interval": {
      "name": "mds_bal_sample_interval",
      "type": "float",
      "level": "advanced",
      "desc": "interval in seconds between balancer ticks",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_replicate_threshold": {
      "name": "mds_bal_replicate_threshold",
      "type": "float",
      "level": "advanced",
      "desc": "hot popularity threshold to replicate a subtree",
      "long_desc": "",
      "default": 8000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_unreplicate_threshold": {
      "name": "mds_bal_unreplicate_threshold",
      "type": "float",
      "level": "advanced",
      "desc": "cold popularity threshold to merge subtrees",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_split_size": {
      "name": "mds_bal_split_size",
      "type": "int",
      "level": "advanced",
      "desc": "minimum size of directory fragment before splitting",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_split_rd": {
      "name": "mds_bal_split_rd",
      "type": "float",
      "level": "advanced",
      "desc": "hot read popularity threshold for splitting a directory fragment",
      "long_desc": "",
      "default": 25000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_split_wr": {
      "name": "mds_bal_split_wr",
      "type": "float",
      "level": "advanced",
      "desc": "hot write popularity threshold for splitting a directory fragment",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_split_bits": {
      "name": "mds_bal_split_bits",
      "type": "int",
      "level": "advanced",
      "desc": "power of two child fragments for a fragment on split",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": 1,
      "max": 24,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_merge_size": {
      "name": "mds_bal_merge_size",
      "type": "int",
      "level": "advanced",
      "desc": "size of fragments where merging should occur",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_interval": {
      "name": "mds_bal_interval",
      "type": "int",
      "level": "advanced",
      "desc": "interval between MDS balancer cycles",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_fragment_interval": {
      "name": "mds_bal_fragment_interval",
      "type": "int",
      "level": "advanced",
      "desc": "delay in seconds before interrupting client IO to perform splits",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_fragment_size_max": {
      "name": "mds_bal_fragment_size_max",
      "type": "int",
      "level": "advanced",
      "desc": "maximum size of a directory fragment before new creat/links fail",
      "long_desc": "",
      "default": 100000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_fragment_fast_factor": {
      "name": "mds_bal_fragment_fast_factor",
      "type": "float",
      "level": "advanced",
      "desc": "ratio of mds_bal_split_size at which fast fragment splitting occurs",
      "long_desc": "",
      "default": 1.5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_fragment_dirs": {
      "name": "mds_bal_fragment_dirs",
      "type": "bool",
      "level": "advanced",
      "desc": "enable directory fragmentation",
      "long_desc": "Directory fragmentation is a standard feature of CephFS that allows sharding directories across multiple objects for performance and stability. Additionally, this allows fragments to be distributed across multiple active MDSs to increase throughput. Disabling (new) fragmentation should only be done in exceptional circumstances and may lead to performance issues.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_idle_threshold": {
      "name": "mds_bal_idle_threshold",
      "type": "float",
      "level": "advanced",
      "desc": "idle metadata popularity threshold before rebalancing",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_max": {
      "name": "mds_bal_max",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_max_until": {
      "name": "mds_bal_max_until",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_mode": {
      "name": "mds_bal_mode",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_min_rebalance": {
      "name": "mds_bal_min_rebalance",
      "type": "float",
      "level": "dev",
      "desc": "amount overloaded over internal target before balancer begins offloading",
      "long_desc": "",
      "default": 0.10000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_overload_epochs": {
      "name": "mds_bal_overload_epochs",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_min_start": {
      "name": "mds_bal_min_start",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0.20000000000000001,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_need_min": {
      "name": "mds_bal_need_min",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0.80000000000000004,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_need_max": {
      "name": "mds_bal_need_max",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1.2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_midchunk": {
      "name": "mds_bal_midchunk",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0.29999999999999999,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_minchunk": {
      "name": "mds_bal_minchunk",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0.001,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_bal_target_decay": {
      "name": "mds_bal_target_decay",
      "type": "float",
      "level": "advanced",
      "desc": "rate of decay for export targets communicated to clients",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_oft_prefetch_dirfrags": {
      "name": "mds_oft_prefetch_dirfrags",
      "type": "bool",
      "level": "advanced",
      "desc": "prefetch dirfrags recorded in open file table on startup",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "mds_replay_interval": {
      "name": "mds_replay_interval",
      "type": "float",
      "level": "advanced",
      "desc": "time in seconds between replay of updates to journal by standby replay MDS",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_shutdown_check": {
      "name": "mds_shutdown_check",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_thrash_exports": {
      "name": "mds_thrash_exports",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_thrash_fragments": {
      "name": "mds_thrash_fragments",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_dump_cache_on_map": {
      "name": "mds_dump_cache_on_map",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_dump_cache_after_rejoin": {
      "name": "mds_dump_cache_after_rejoin",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_verify_scatter": {
      "name": "mds_verify_scatter",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_debug_scatterstat": {
      "name": "mds_debug_scatterstat",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_debug_frag": {
      "name": "mds_debug_frag",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_debug_auth_pins": {
      "name": "mds_debug_auth_pins",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_debug_subtrees": {
      "name": "mds_debug_subtrees",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_abort_on_newly_corrupt_dentry": {
      "name": "mds_abort_on_newly_corrupt_dentry",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_go_bad_corrupt_dentry": {
      "name": "mds_go_bad_corrupt_dentry",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_inject_rename_corrupt_dentry_first": {
      "name": "mds_inject_rename_corrupt_dentry_first",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_inject_journal_corrupt_dentry_first": {
      "name": "mds_inject_journal_corrupt_dentry_first",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_shutdown_at": {
      "name": "mds_kill_shutdown_at",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_kill_mdstable_at": {
      "name": "mds_kill_mdstable_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_max_export_size": {
      "name": "mds_max_export_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "20971520",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_export_at": {
      "name": "mds_kill_export_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_import_at": {
      "name": "mds_kill_import_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_link_at": {
      "name": "mds_kill_link_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_rename_at": {
      "name": "mds_kill_rename_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_openc_at": {
      "name": "mds_kill_openc_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_journal_at": {
      "name": "mds_kill_journal_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_journal_expire_at": {
      "name": "mds_kill_journal_expire_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_journal_replay_at": {
      "name": "mds_kill_journal_replay_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_journal_format": {
      "name": "mds_journal_format",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_create_at": {
      "name": "mds_kill_create_at",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_inject_health_dummy": {
      "name": "mds_inject_health_dummy",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_kill_after_journal_logs_flushed": {
      "name": "mds_kill_after_journal_logs_flushed",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_inject_skip_replaying_inotable": {
      "name": "mds_inject_skip_replaying_inotable",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_inject_traceless_reply_probability": {
      "name": "mds_inject_traceless_reply_probability",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_wipe_sessions": {
      "name": "mds_wipe_sessions",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_wipe_ino_prealloc": {
      "name": "mds_wipe_ino_prealloc",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_skip_ino": {
      "name": "mds_skip_ino",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_enable_op_tracker": {
      "name": "mds_enable_op_tracker",
      "type": "bool",
      "level": "advanced",
      "desc": "track remote operation progression and statistics",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_op_history_size": {
      "name": "mds_op_history_size",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum size for list of historical operations",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_op_history_duration": {
      "name": "mds_op_history_duration",
      "type": "uint",
      "level": "advanced",
      "desc": "expiration time in seconds of historical operations",
      "long_desc": "",
      "default": 600,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_op_history_slow_op_size": {
      "name": "mds_op_history_slow_op_size",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum size for list of historical slow operations",
      "long_desc": "",
      "default": 20,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_op_history_slow_op_threshold": {
      "name": "mds_op_history_slow_op_threshold",
      "type": "uint",
      "level": "advanced",
      "desc": "track the op if over this threshold",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_op_complaint_time": {
      "name": "mds_op_complaint_time",
      "type": "float",
      "level": "advanced",
      "desc": "time in seconds to consider an operation blocked after no updates",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_op_log_threshold": {
      "name": "mds_op_log_threshold",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_snap_min_uid": {
      "name": "mds_snap_min_uid",
      "type": "uint",
      "level": "advanced",
      "desc": "minimum uid of client to perform snapshots",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_snap_max_uid": {
      "name": "mds_snap_max_uid",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum uid of client to perform snapshots",
      "long_desc": "",
      "default": 4294967294,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_snap_rstat": {
      "name": "mds_snap_rstat",
      "type": "bool",
      "level": "advanced",
      "desc": "enabled nested rstat for snapshots",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_verify_backtrace": {
      "name": "mds_verify_backtrace",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_max_completed_flushes": {
      "name": "mds_max_completed_flushes",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 100000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_max_completed_requests": {
      "name": "mds_max_completed_requests",
      "type": "uint",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 100000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_action_on_write_error": {
      "name": "mds_action_on_write_error",
      "type": "uint",
      "level": "advanced",
      "desc": "action to take when MDS cannot write to RADOS (0:ignore, 1:read-only, 2:suicide)",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_mon_shutdown_timeout": {
      "name": "mds_mon_shutdown_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "time to wait for mon to receive damaged MDS rank notification",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_max_purge_files": {
      "name": "mds_max_purge_files",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of deleted files to purge in parallel",
      "long_desc": "",
      "default": 64,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_max_purge_ops": {
      "name": "mds_max_purge_ops",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of purge operations performed in parallel",
      "long_desc": "",
      "default": 8192,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_max_purge_ops_per_pg": {
      "name": "mds_max_purge_ops_per_pg",
      "type": "float",
      "level": "advanced",
      "desc": "number of parallel purge operations performed per PG",
      "long_desc": "",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_purge_queue_busy_flush_period": {
      "name": "mds_purge_queue_busy_flush_period",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_root_ino_uid": {
      "name": "mds_root_ino_uid",
      "type": "int",
      "level": "advanced",
      "desc": "default uid for new root directory",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_root_ino_gid": {
      "name": "mds_root_ino_gid",
      "type": "int",
      "level": "advanced",
      "desc": "default gid for new root directory",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_max_scrub_ops_in_progress": {
      "name": "mds_max_scrub_ops_in_progress",
      "type": "int",
      "level": "advanced",
      "desc": "maximum number of scrub operations performed in parallel",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_forward_all_requests_to_auth": {
      "name": "mds_forward_all_requests_to_auth",
      "type": "bool",
      "level": "advanced",
      "desc": "always process op on auth mds",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_damage_table_max_entries": {
      "name": "mds_damage_table_max_entries",
      "type": "int",
      "level": "advanced",
      "desc": "maximum number of damage table entries",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_client_writeable_range_max_inc_objs": {
      "name": "mds_client_writeable_range_max_inc_objs",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of objects in writeable range of a file for a client",
      "long_desc": "",
      "default": 1024,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_min_caps_per_client": {
      "name": "mds_min_caps_per_client",
      "type": "uint",
      "level": "advanced",
      "desc": "minimum number of capabilities a client may hold",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_min_caps_working_set": {
      "name": "mds_min_caps_working_set",
      "type": "uint",
      "level": "advanced",
      "desc": "number of capabilities a client may hold without cache pressure warnings generated",
      "long_desc": "",
      "default": 10000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_max_caps_per_client": {
      "name": "mds_max_caps_per_client",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of capabilities a client may hold",
      "long_desc": "",
      "default": 1048576,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_hack_allow_loading_invalid_metadata": {
      "name": "mds_hack_allow_loading_invalid_metadata",
      "type": "bool",
      "level": "advanced",
      "desc": "INTENTIONALLY CAUSE DATA LOSS by bypasing checks for invalid metadata on disk. Allows testing repair tools.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_defer_session_stale": {
      "name": "mds_defer_session_stale",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_inject_migrator_session_race": {
      "name": "mds_inject_migrator_session_race",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_request_load_average_decay_rate": {
      "name": "mds_request_load_average_decay_rate",
      "type": "float",
      "level": "advanced",
      "desc": "rate of decay in seconds for calculating request load average",
      "long_desc": "",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_cap_revoke_eviction_timeout": {
      "name": "mds_cap_revoke_eviction_timeout",
      "type": "float",
      "level": "advanced",
      "desc": "number of seconds after which clients which have not responded to cap revoke messages by the MDS are evicted.",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_dump_cache_threshold_formatter": {
      "name": "mds_dump_cache_threshold_formatter",
      "type": "size",
      "level": "dev",
      "desc": "threshold for cache usage to disallow \"dump cache\" operation to formatter",
      "long_desc": "Disallow MDS from dumping caches to formatter via \"dump cache\" command if cache usage exceeds this threshold.",
      "default": "1073741824",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_dump_cache_threshold_file": {
      "name": "mds_dump_cache_threshold_file",
      "type": "size",
      "level": "dev",
      "desc": "threshold for cache usage to disallow \"dump cache\" operation to file",
      "long_desc": "Disallow MDS from dumping caches to file via \"dump cache\" command if cache usage exceeds this threshold.",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_task_status_update_interval": {
      "name": "mds_task_status_update_interval",
      "type": "float",
      "level": "dev",
      "desc": "task status update interval to manager",
      "long_desc": "interval (in seconds) for sending mds task status to ceph manager",
      "default": 2,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_max_snaps_per_dir": {
      "name": "mds_max_snaps_per_dir",
      "type": "uint",
      "level": "advanced",
      "desc": "max snapshots per directory",
      "long_desc": "maximum number of snapshots that can be created per directory",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": 0,
      "max": 4096,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_asio_thread_count": {
      "name": "mds_asio_thread_count",
      "type": "uint",
      "level": "advanced",
      "desc": "Size of thread pool for ASIO completions",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [
        "mds"
      ],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "mds_ping_grace": {
      "name": "mds_ping_grace",
      "type": "secs",
      "level": "advanced",
      "desc": "timeout after which an MDS is considered laggy by rank 0 MDS.",
      "long_desc": "timeout for replying to a ping message sent by rank 0 after which an active MDS considered laggy (delayed metrics) by rank 0.",
      "default": "15",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_ping_interval": {
      "name": "mds_ping_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "interval in seconds for sending ping messages to active MDSs.",
      "long_desc": "interval in seconds for rank 0 to send ping messages to all active MDSs.",
      "default": "5",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_metrics_update_interval": {
      "name": "mds_metrics_update_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "interval in seconds for metrics data update.",
      "long_desc": "interval in seconds after which active MDSs send client metrics data to rank 0.",
      "default": "2",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_dir_max_entries": {
      "name": "mds_dir_max_entries",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of entries per directory before new creat/links fail",
      "long_desc": "The maximum number of entries before any new entries are rejected with ENOSPC.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_sleep_rank_change": {
      "name": "mds_sleep_rank_change",
      "type": "float",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_connect_bootstrapping": {
      "name": "mds_connect_bootstrapping",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_symlink_recovery": {
      "name": "mds_symlink_recovery",
      "type": "bool",
      "level": "advanced",
      "desc": "Stores symlink target on the first data object of symlink file. Allows recover of symlink using recovery tools.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_extraordinary_events_dump_interval": {
      "name": "mds_extraordinary_events_dump_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "Interval in seconds for dumping the recent in-memory logs when there is an extra-ordinary event.",
      "long_desc": "Interval in seconds for dumping the recent in-memory logs when there is an extra-ordinary event. The default is ``0`` (disabled). The log level should be ``< 10`` and the gather level should be ``>=10`` in debug_mds for enabling this option.",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "0",
      "max": "60",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "defer_client_eviction_on_laggy_osds": {
      "name": "defer_client_eviction_on_laggy_osds",
      "type": "bool",
      "level": "advanced",
      "desc": "Do not evict client if any osd is laggy",
      "long_desc": "Laggy OSD(s) can make clients laggy or unresponsive, this can lead to their eviction, this option once enabled can help defer client eviction.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_session_metadata_threshold": {
      "name": "mds_session_metadata_threshold",
      "type": "size",
      "level": "advanced",
      "desc": "Evict non-advancing client-tid sessions exceeding the config size.",
      "long_desc": "Evict clients which are not advancing their request tids which causes a large buildup of session metadata (`completed_requests`) in the MDS causing the MDS to go read-only since the RADOS operation exceeds the size threashold. This config is the maximum size (in bytes) that a session metadata (encoded) can grow.",
      "default": "16777216",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_log_trim_threshold": {
      "name": "mds_log_trim_threshold",
      "type": "size",
      "level": "advanced",
      "desc": "MDS log trim threshold",
      "long_desc": "The threshold of the number of log segment that can be trimmed.",
      "default": "128",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [
        "mds_log_max_events",
        "mds_log_max_segments"
      ],
      "min": "1",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_log_trim_decay_rate": {
      "name": "mds_log_trim_decay_rate",
      "type": "float",
      "level": "advanced",
      "desc": "MDS log trim decay rate",
      "long_desc": "The decay rate for trimming the MDS log. Increasing this value leads to the MDS spending less time in trimming the log.",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [
        "mds_log_max_events",
        "mds_log_max_segments"
      ],
      "min": 0.01,
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mds_log_trim_upkeep_interval": {
      "name": "mds_log_trim_upkeep_interval",
      "type": "millisecs",
      "level": "advanced",
      "desc": "MDS log trimming interval",
      "long_desc": "Interval in milliseconds to trim MDS logs.",
      "default": "1000",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "client_cache_size": {
      "name": "client_cache_size",
      "type": "size",
      "level": "basic",
      "desc": "soft maximum number of directory entries in client cache",
      "long_desc": "",
      "default": "16384",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_cache_mid": {
      "name": "client_cache_mid",
      "type": "float",
      "level": "advanced",
      "desc": "mid-point of client cache LRU",
      "long_desc": "",
      "default": 0.75,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_use_random_mds": {
      "name": "client_use_random_mds",
      "type": "bool",
      "level": "dev",
      "desc": "issue new requests to a random active MDS",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_mount_timeout": {
      "name": "client_mount_timeout",
      "type": "secs",
      "level": "advanced",
      "desc": "timeout for mounting CephFS (seconds)",
      "long_desc": "",
      "default": "300",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_tick_interval": {
      "name": "client_tick_interval",
      "type": "secs",
      "level": "dev",
      "desc": "seconds between client upkeep ticks",
      "long_desc": "",
      "default": "1",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_trace": {
      "name": "client_trace",
      "type": "str",
      "level": "dev",
      "desc": "file containing trace of client operations",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "client_readahead_min": {
      "name": "client_readahead_min",
      "type": "size",
      "level": "advanced",
      "desc": "minimum bytes to readahead in a file",
      "long_desc": "",
      "default": "131072",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_readahead_max_bytes": {
      "name": "client_readahead_max_bytes",
      "type": "size",
      "level": "advanced",
      "desc": "maximum bytes to readahead in a file (zero is unlimited)",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_readahead_max_periods": {
      "name": "client_readahead_max_periods",
      "type": "int",
      "level": "advanced",
      "desc": "maximum stripe periods to readahead in a file",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_reconnect_stale": {
      "name": "client_reconnect_stale",
      "type": "bool",
      "level": "advanced",
      "desc": "reconnect when the session becomes stale",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_snapdir": {
      "name": "client_snapdir",
      "type": "str",
      "level": "advanced",
      "desc": "pseudo directory for snapshot access to a directory",
      "long_desc": "",
      "default": ".snap",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "client_mountpoint": {
      "name": "client_mountpoint",
      "type": "str",
      "level": "advanced",
      "desc": "default mount-point",
      "long_desc": "",
      "default": "/",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "client_mount_uid": {
      "name": "client_mount_uid",
      "type": "int",
      "level": "advanced",
      "desc": "uid to mount as",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_mount_gid": {
      "name": "client_mount_gid",
      "type": "int",
      "level": "advanced",
      "desc": "gid to mount as",
      "long_desc": "",
      "default": -1,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_notify_timeout": {
      "name": "client_notify_timeout",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "osd_client_watch_timeout": {
      "name": "osd_client_watch_timeout",
      "type": "int",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": 30,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_caps_release_delay": {
      "name": "client_caps_release_delay",
      "type": "secs",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "5",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_quota_df": {
      "name": "client_quota_df",
      "type": "bool",
      "level": "advanced",
      "desc": "show quota usage for statfs (df)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_oc": {
      "name": "client_oc",
      "type": "bool",
      "level": "advanced",
      "desc": "enable object caching",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_oc_size": {
      "name": "client_oc_size",
      "type": "size",
      "level": "advanced",
      "desc": "maximum size of object cache",
      "long_desc": "",
      "default": "209715200",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "client_oc_max_dirty": {
      "name": "client_oc_max_dirty",
      "type": "size",
      "level": "advanced",
      "desc": "maximum size of dirty pages in object cache",
      "long_desc": "",
      "default": "104857600",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "client_oc_target_dirty": {
      "name": "client_oc_target_dirty",
      "type": "size",
      "level": "advanced",
      "desc": "target size of dirty pages object cache",
      "long_desc": "",
      "default": "8388608",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "client_oc_max_dirty_age": {
      "name": "client_oc_max_dirty_age",
      "type": "float",
      "level": "advanced",
      "desc": "maximum age of dirty pages in object cache (seconds)",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "client_oc_max_objects": {
      "name": "client_oc_max_objects",
      "type": "int",
      "level": "advanced",
      "desc": "maximum number of objects in cache",
      "long_desc": "",
      "default": 1000,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "client_debug_getattr_caps": {
      "name": "client_debug_getattr_caps",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_debug_force_sync_read": {
      "name": "client_debug_force_sync_read",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_debug_inject_tick_delay": {
      "name": "client_debug_inject_tick_delay",
      "type": "secs",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_debug_inject_features": {
      "name": "client_debug_inject_features",
      "type": "str",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "client_max_inline_size": {
      "name": "client_max_inline_size",
      "type": "size",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "4096",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_inject_release_failure": {
      "name": "client_inject_release_failure",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_inject_fixed_oldest_tid": {
      "name": "client_inject_fixed_oldest_tid",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_metadata": {
      "name": "client_metadata",
      "type": "str",
      "level": "advanced",
      "desc": "metadata key=value comma-delimited pairs appended to session metadata",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "client_acl_type": {
      "name": "client_acl_type",
      "type": "str",
      "level": "advanced",
      "desc": "ACL type to enforce (none or \"posix_acl\")",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "client_permissions": {
      "name": "client_permissions",
      "type": "bool",
      "level": "advanced",
      "desc": "client-enforced permission checking",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_dirsize_rbytes": {
      "name": "client_dirsize_rbytes",
      "type": "bool",
      "level": "advanced",
      "desc": "set the directory size as the number of file bytes recursively used",
      "long_desc": "This option enables a CephFS feature that stores the recursive directory size (the bytes used by files in the directory and its descendents) in the st_size field of the stat structure.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "client_force_lazyio": {
      "name": "client_force_lazyio",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_use_invalidate_cb": {
      "name": "fuse_use_invalidate_cb",
      "type": "bool",
      "level": "advanced",
      "desc": "use fuse 2.8+ invalidate callback to keep page cache consistent",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_disable_pagecache": {
      "name": "fuse_disable_pagecache",
      "type": "bool",
      "level": "advanced",
      "desc": "disable page caching in the kernel for this FUSE mount",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_allow_other": {
      "name": "fuse_allow_other",
      "type": "bool",
      "level": "advanced",
      "desc": "pass allow_other to FUSE on mount",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_default_permissions": {
      "name": "fuse_default_permissions",
      "type": "bool",
      "level": "advanced",
      "desc": "pass default_permisions to FUSE on mount",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "fuse_splice_read": {
      "name": "fuse_splice_read",
      "type": "bool",
      "level": "advanced",
      "desc": "enable splice read to reduce the memory copies",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_splice_write": {
      "name": "fuse_splice_write",
      "type": "bool",
      "level": "advanced",
      "desc": "enable splice write to reduce the memory copies",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_splice_move": {
      "name": "fuse_splice_move",
      "type": "bool",
      "level": "advanced",
      "desc": "enable splice move to reduce the memory copies",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_big_writes": {
      "name": "fuse_big_writes",
      "type": "bool",
      "level": "advanced",
      "desc": "big_writes is deprecated in libfuse 3.0.0",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_max_write": {
      "name": "fuse_max_write",
      "type": "size",
      "level": "advanced",
      "desc": "set the maximum number of bytes in a single write operation",
      "long_desc": "Set the maximum number of bytes in a single write operation that may pass atomically through FUSE. The FUSE default is 128kB and may be indicated by setting this option to 0.",
      "default": "0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_atomic_o_trunc": {
      "name": "fuse_atomic_o_trunc",
      "type": "bool",
      "level": "advanced",
      "desc": "pass atomic_o_trunc flag to FUSE on mount",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_debug": {
      "name": "fuse_debug",
      "type": "bool",
      "level": "advanced",
      "desc": "enable debugging for the libfuse",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "fuse_multithreaded": {
      "name": "fuse_multithreaded",
      "type": "bool",
      "level": "advanced",
      "desc": "allow parallel processing through FUSE library",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_require_active_mds": {
      "name": "fuse_require_active_mds",
      "type": "bool",
      "level": "advanced",
      "desc": "require active MDSs in the file system when mounting",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_syncfs_on_mksnap": {
      "name": "fuse_syncfs_on_mksnap",
      "type": "bool",
      "level": "advanced",
      "desc": "synchronize all local metadata/file changes after snapshot",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "fuse_set_user_groups": {
      "name": "fuse_set_user_groups",
      "type": "bool",
      "level": "advanced",
      "desc": "check for ceph-fuse to consider supplementary groups for permissions",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_try_dentry_invalidate": {
      "name": "client_try_dentry_invalidate",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_max_retries_on_remount_failure": {
      "name": "client_max_retries_on_remount_failure",
      "type": "uint",
      "level": "advanced",
      "desc": "number of consecutive failed remount attempts for invalidating kernel dcache after which client would abort.",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_die_on_failed_remount": {
      "name": "client_die_on_failed_remount",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_die_on_failed_dentry_invalidate": {
      "name": "client_die_on_failed_dentry_invalidate",
      "type": "bool",
      "level": "advanced",
      "desc": "kill the client when no dentry invalidation options are available",
      "long_desc": "The CephFS client requires a mechanism to invalidate dentries in the caller (e.g. the kernel for ceph-fuse) when capabilities must be recalled. If the client cannot do this then the MDS cache cannot shrink which can cause the MDS to fail.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_check_pool_perm": {
      "name": "client_check_pool_perm",
      "type": "bool",
      "level": "advanced",
      "desc": "confirm access to inode's data pool/namespace described in file layout",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_use_faked_inos": {
      "name": "client_use_faked_inos",
      "type": "bool",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "no_mon_update",
        "startup"
      ]
    }
  },
  {
    "client_fs": {
      "name": "client_fs",
      "type": "str",
      "level": "advanced",
      "desc": "CephFS file system name to mount",
      "long_desc": "Use this with ceph-fuse, or with any process that uses libcephfs.  Programs using libcephfs may also pass the filesystem name into mount(), which will override this setting. If no filesystem name is given in mount() or this setting, the default filesystem will be mounted (usually the first created).",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "client_mds_namespace": {
      "name": "client_mds_namespace",
      "type": "str",
      "level": "dev",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": [
        "startup"
      ]
    }
  },
  {
    "fake_statfs_for_testing": {
      "name": "fake_statfs_for_testing",
      "type": "int",
      "level": "dev",
      "desc": "Set a value for kb and compute kb_used from total of num_bytes",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "debug_allow_any_pool_priority": {
      "name": "debug_allow_any_pool_priority",
      "type": "bool",
      "level": "dev",
      "desc": "Allow any pool priority to be set to test conversion to new range",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_asio_thread_count": {
      "name": "client_asio_thread_count",
      "type": "uint",
      "level": "advanced",
      "desc": "Size of thread pool for ASIO completions",
      "long_desc": "",
      "default": 2,
      "daemon_default": "",
      "tags": [
        "client"
      ],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "client_shutdown_timeout": {
      "name": "client_shutdown_timeout",
      "type": "secs",
      "level": "advanced",
      "desc": "timeout for shutting down CephFS",
      "long_desc": "Timeout for shutting down CephFS via unmount or shutdown.",
      "default": "30",
      "daemon_default": "",
      "tags": [
        "client"
      ],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "0",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "client_collect_and_send_global_metrics": {
      "name": "client_collect_and_send_global_metrics",
      "type": "bool",
      "level": "advanced",
      "desc": "to enable and force collecting and sending the global metrics to MDS",
      "long_desc": "To be careful for this, when connecting to some old ceph clusters it may crash the MDS daemons while upgrading.",
      "default": false,
      "daemon_default": "",
      "tags": [
        "client"
      ],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "client_quota": {
      "name": "client_quota",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable quota enforcement",
      "long_desc": "Enable quota_bytes and quota_files enforcement for the client.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "mds_client"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "cephfs_mirror_max_concurrent_directory_syncs": {
      "name": "cephfs_mirror_max_concurrent_directory_syncs",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of concurrent snapshot synchronization threads",
      "long_desc": "maximum number of directory snapshots that can be synchronized concurrently by cephfs-mirror daemon. Controls the number of synchronization threads.",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "cephfs-mirror"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephfs_mirror_action_update_interval": {
      "name": "cephfs_mirror_action_update_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "interval for driving asynchronous mirror actions",
      "long_desc": "Interval in seconds to process pending mirror update actions.",
      "default": "2",
      "daemon_default": "",
      "tags": [],
      "services": [
        "cephfs-mirror"
      ],
      "see_also": [],
      "min": "1",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephfs_mirror_restart_mirror_on_blocklist_interval": {
      "name": "cephfs_mirror_restart_mirror_on_blocklist_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "interval to restart blocklisted instances",
      "long_desc": "Interval in seconds to restart blocklisted mirror instances. Setting to zero (0) disables restarting blocklisted instances.",
      "default": "30",
      "daemon_default": "",
      "tags": [],
      "services": [
        "cephfs-mirror"
      ],
      "see_also": [],
      "min": "0",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephfs_mirror_max_snapshot_sync_per_cycle": {
      "name": "cephfs_mirror_max_snapshot_sync_per_cycle",
      "type": "uint",
      "level": "advanced",
      "desc": "number of snapshots to mirror in one cycle",
      "long_desc": "maximum number of snapshots to mirror when a directory is picked up for mirroring by worker threads.",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [
        "cephfs-mirror"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephfs_mirror_directory_scan_interval": {
      "name": "cephfs_mirror_directory_scan_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "interval to scan directories to mirror snapshots",
      "long_desc": "interval in seconds to scan configured directories for snapshot mirroring.",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "cephfs-mirror"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephfs_mirror_max_consecutive_failures_per_directory": {
      "name": "cephfs_mirror_max_consecutive_failures_per_directory",
      "type": "uint",
      "level": "advanced",
      "desc": "consecutive failed directory synchronization attempts before marking a directory as \"failed",
      "long_desc": "number of consecutive snapshot synchronization failures to mark a directory as \"failed\". failed directories are retried for synchronization less frequently.",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [
        "cephfs-mirror"
      ],
      "see_also": [],
      "min": 0,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephfs_mirror_retry_failed_directories_interval": {
      "name": "cephfs_mirror_retry_failed_directories_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "failed directory retry interval for synchronization",
      "long_desc": "interval in seconds to retry synchronization for failed directories.",
      "default": 60,
      "daemon_default": "",
      "tags": [],
      "services": [
        "cephfs-mirror"
      ],
      "see_also": [],
      "min": 1,
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephfs_mirror_restart_mirror_on_failure_interval": {
      "name": "cephfs_mirror_restart_mirror_on_failure_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "interval to restart failed mirror instances",
      "long_desc": "Interval in seconds to restart failed mirror instances. Setting to zero (0) disables restarting failed mirror instances.",
      "default": "20",
      "daemon_default": "",
      "tags": [],
      "services": [
        "cephfs-mirror"
      ],
      "see_also": [],
      "min": "0",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephfs_mirror_mount_timeout": {
      "name": "cephfs_mirror_mount_timeout",
      "type": "secs",
      "level": "advanced",
      "desc": "timeout for mounting primary/secondary ceph file system",
      "long_desc": "Timeout in seconds for mounting primary or secondary (remote) ceph file system by the cephfs-mirror daemon. Setting this to a higher value could result in the mirror daemon getting stalled when mounting a file system if the cluster is not reachable. This option is used to override the usual client_mount_timeout.",
      "default": "10",
      "daemon_default": "",
      "tags": [],
      "services": [
        "cephfs-mirror"
      ],
      "see_also": [],
      "min": "0",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "cephfs_mirror_perf_stats_prio": {
      "name": "cephfs_mirror_perf_stats_prio",
      "type": "int",
      "level": "advanced",
      "desc": "Priority level for mirror daemon replication perf counters",
      "long_desc": "The daemon will send perf counter data to the manager daemon if the priority is not lower than mgr_stats_threshold.",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "cephfs-mirror"
      ],
      "see_also": [],
      "min": 0,
      "max": 11,
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "exporter_sock_dir": {
      "name": "exporter_sock_dir",
      "type": "str",
      "level": "advanced",
      "desc": "The path to ceph daemons socket files dir",
      "long_desc": "",
      "default": "/var/run/ceph/",
      "daemon_default": "",
      "tags": [],
      "services": [
        "ceph-exporter"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "exporter_addr": {
      "name": "exporter_addr",
      "type": "str",
      "level": "advanced",
      "desc": "Host ip address where exporter is deployed",
      "long_desc": "",
      "default": "0.0.0.0",
      "daemon_default": "",
      "tags": [],
      "services": [
        "ceph-exporter"
      ],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "exporter_http_port": {
      "name": "exporter_http_port",
      "type": "int",
      "level": "advanced",
      "desc": "Port to deploy exporter on. Default is 9926",
      "long_desc": "",
      "default": 9926,
      "daemon_default": "",
      "tags": [],
      "services": [
        "ceph-exporter"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": []
    }
  },
  {
    "exporter_prio_limit": {
      "name": "exporter_prio_limit",
      "type": "int",
      "level": "advanced",
      "desc": "Only perf counters greater than or equal to exporter_prio_limit are fetched",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "ceph-exporter"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "exporter_stats_period": {
      "name": "exporter_stats_period",
      "type": "int",
      "level": "advanced",
      "desc": "Time to wait before sending requests again to exporter server (seconds)",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [
        "ceph-exporter"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "exporter_sort_metrics": {
      "name": "exporter_sort_metrics",
      "type": "bool",
      "level": "advanced",
      "desc": "If true it will sort the metrics and group them.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [
        "ceph-exporter"
      ],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/interval": {
      "name": "mgr/alerts/interval",
      "type": "secs",
      "level": "advanced",
      "desc": "How frequently to reexamine health status",
      "long_desc": "",
      "default": "60",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/log_level": {
      "name": "mgr/alerts/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/log_to_cluster": {
      "name": "mgr/alerts/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/log_to_cluster_level": {
      "name": "mgr/alerts/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/log_to_file": {
      "name": "mgr/alerts/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/smtp_destination": {
      "name": "mgr/alerts/smtp_destination",
      "type": "str",
      "level": "advanced",
      "desc": "Email address to send alerts to",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/smtp_from_name": {
      "name": "mgr/alerts/smtp_from_name",
      "type": "str",
      "level": "advanced",
      "desc": "Email From: name",
      "long_desc": "",
      "default": "Ceph",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/smtp_host": {
      "name": "mgr/alerts/smtp_host",
      "type": "str",
      "level": "advanced",
      "desc": "SMTP server",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/smtp_password": {
      "name": "mgr/alerts/smtp_password",
      "type": "str",
      "level": "advanced",
      "desc": "Password to authenticate with",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/smtp_port": {
      "name": "mgr/alerts/smtp_port",
      "type": "int",
      "level": "advanced",
      "desc": "SMTP port",
      "long_desc": "",
      "default": 465,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/smtp_sender": {
      "name": "mgr/alerts/smtp_sender",
      "type": "str",
      "level": "advanced",
      "desc": "SMTP envelope sender",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/smtp_ssl": {
      "name": "mgr/alerts/smtp_ssl",
      "type": "bool",
      "level": "advanced",
      "desc": "Use SSL to connect to SMTP server",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/alerts/smtp_user": {
      "name": "mgr/alerts/smtp_user",
      "type": "str",
      "level": "advanced",
      "desc": "User to authenticate as",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/active": {
      "name": "mgr/balancer/active",
      "type": "bool",
      "level": "advanced",
      "desc": "automatically balance PGs across cluster",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/begin_time": {
      "name": "mgr/balancer/begin_time",
      "type": "str",
      "level": "advanced",
      "desc": "beginning time of day to automatically balance",
      "long_desc": "This is a time of day in the format HHMM.",
      "default": "0000",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/begin_weekday": {
      "name": "mgr/balancer/begin_weekday",
      "type": "uint",
      "level": "advanced",
      "desc": "Restrict automatic balancing to this day of the week or later",
      "long_desc": "0 = Sunday, 1 = Monday, etc.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 0,
      "max": 6,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/crush_compat_max_iterations": {
      "name": "mgr/balancer/crush_compat_max_iterations",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum number of iterations to attempt optimization",
      "long_desc": "",
      "default": 25,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 1,
      "max": 250,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/crush_compat_metrics": {
      "name": "mgr/balancer/crush_compat_metrics",
      "type": "str",
      "level": "advanced",
      "desc": "metrics with which to calculate OSD utilization",
      "long_desc": "Value is a list of one or more of \"pgs\", \"objects\", or \"bytes\", and indicates which metrics to use to balance utilization.",
      "default": "pgs,objects,bytes",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/crush_compat_step": {
      "name": "mgr/balancer/crush_compat_step",
      "type": "float",
      "level": "advanced",
      "desc": "aggressiveness of optimization",
      "long_desc": ".99 is very aggressive, .01 is less aggressive",
      "default": 0.5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 0.001,
      "max": 0.999,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/end_time": {
      "name": "mgr/balancer/end_time",
      "type": "str",
      "level": "advanced",
      "desc": "ending time of day to automatically balance",
      "long_desc": "This is a time of day in the format HHMM.",
      "default": "2359",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/end_weekday": {
      "name": "mgr/balancer/end_weekday",
      "type": "uint",
      "level": "advanced",
      "desc": "Restrict automatic balancing to days of the week earlier than this",
      "long_desc": "0 = Sunday, 1 = Monday, etc.",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 0,
      "max": 6,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/log_level": {
      "name": "mgr/balancer/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/log_to_cluster": {
      "name": "mgr/balancer/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/log_to_cluster_level": {
      "name": "mgr/balancer/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/log_to_file": {
      "name": "mgr/balancer/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/min_score": {
      "name": "mgr/balancer/min_score",
      "type": "float",
      "level": "advanced",
      "desc": "minimum score, below which no optimization is attempted",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/mode": {
      "name": "mgr/balancer/mode",
      "type": "str",
      "level": "advanced",
      "desc": "Balancer mode",
      "long_desc": "",
      "default": "upmap",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "crush-compat",
        "none",
        "read",
        "upmap",
        "upmap-read"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/pool_ids": {
      "name": "mgr/balancer/pool_ids",
      "type": "str",
      "level": "advanced",
      "desc": "pools which the automatic balancing will be limited to",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/sleep_interval": {
      "name": "mgr/balancer/sleep_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "how frequently to wake up and attempt optimization",
      "long_desc": "",
      "default": "60",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/upmap_max_deviation": {
      "name": "mgr/balancer/upmap_max_deviation",
      "type": "int",
      "level": "advanced",
      "desc": "deviation below which no optimization is attempted",
      "long_desc": "If the number of PGs are within this count then no optimization is attempted",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/balancer/upmap_max_optimizations": {
      "name": "mgr/balancer/upmap_max_optimizations",
      "type": "uint",
      "level": "advanced",
      "desc": "maximum upmap optimizations to make per attempt",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/cephadm/agent_down_multiplier": {
      "name": "mgr/cephadm/agent_down_multiplier",
      "type": "float",
      "level": "advanced",
      "desc": "Multiplied by agent refresh rate to calculate how long agent must not report before being marked down",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/agent_refresh_rate": {
      "name": "mgr/cephadm/agent_refresh_rate",
      "type": "secs",
      "level": "advanced",
      "desc": "How often agent on each host will try to gather and send metadata",
      "long_desc": "",
      "default": "20",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/agent_starting_port": {
      "name": "mgr/cephadm/agent_starting_port",
      "type": "int",
      "level": "advanced",
      "desc": "First port agent will try to bind to (will also try up to next 1000 subsequent ports if blocked)",
      "long_desc": "",
      "default": 4721,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/allow_ptrace": {
      "name": "mgr/cephadm/allow_ptrace",
      "type": "bool",
      "level": "advanced",
      "desc": "allow SYS_PTRACE capability on ceph containers",
      "long_desc": "The SYS_PTRACE capability is needed to attach to a process with gdb or strace.  Enabling this options can allow debugging daemons that encounter problems at runtime.",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/autotune_interval": {
      "name": "mgr/cephadm/autotune_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "how frequently to autotune daemon memory",
      "long_desc": "",
      "default": "600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/autotune_memory_target_ratio": {
      "name": "mgr/cephadm/autotune_memory_target_ratio",
      "type": "float",
      "level": "advanced",
      "desc": "ratio of total system memory to divide amongst autotuned daemons",
      "long_desc": "",
      "default": 0.69999999999999996,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/cephadm_log_destination": {
      "name": "mgr/cephadm/cephadm_log_destination",
      "type": "str",
      "level": "advanced",
      "desc": "Destination for cephadm command's persistent logging",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "file",
        "file,syslog",
        "syslog"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/cgroups_split": {
      "name": "mgr/cephadm/cgroups_split",
      "type": "bool",
      "level": "advanced",
      "desc": "Pass --cgroups=split when cephadm creates containers (currently podman only)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/config_checks_enabled": {
      "name": "mgr/cephadm/config_checks_enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable or disable the cephadm configuration analysis",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/config_dashboard": {
      "name": "mgr/cephadm/config_dashboard",
      "type": "bool",
      "level": "advanced",
      "desc": "manage configs like API endpoints in Dashboard.",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_alertmanager": {
      "name": "mgr/cephadm/container_image_alertmanager",
      "type": "str",
      "level": "advanced",
      "desc": "Prometheus container image",
      "long_desc": "",
      "default": "quay.io/prometheus/alertmanager:v0.25.0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_base": {
      "name": "mgr/cephadm/container_image_base",
      "type": "str",
      "level": "advanced",
      "desc": "Container image name, without the tag",
      "long_desc": "",
      "default": "quay.io/ceph/ceph",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/cephadm/container_image_elasticsearch": {
      "name": "mgr/cephadm/container_image_elasticsearch",
      "type": "str",
      "level": "advanced",
      "desc": "elasticsearch container image",
      "long_desc": "",
      "default": "quay.io/omrizeneva/elasticsearch:6.8.23",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_grafana": {
      "name": "mgr/cephadm/container_image_grafana",
      "type": "str",
      "level": "advanced",
      "desc": "Prometheus container image",
      "long_desc": "",
      "default": "quay.io/ceph/grafana:9.4.12",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_haproxy": {
      "name": "mgr/cephadm/container_image_haproxy",
      "type": "str",
      "level": "advanced",
      "desc": "HAproxy container image",
      "long_desc": "",
      "default": "quay.io/ceph/haproxy:2.3",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_jaeger_agent": {
      "name": "mgr/cephadm/container_image_jaeger_agent",
      "type": "str",
      "level": "advanced",
      "desc": "Jaeger agent container image",
      "long_desc": "",
      "default": "quay.io/jaegertracing/jaeger-agent:1.29",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_jaeger_collector": {
      "name": "mgr/cephadm/container_image_jaeger_collector",
      "type": "str",
      "level": "advanced",
      "desc": "Jaeger collector container image",
      "long_desc": "",
      "default": "quay.io/jaegertracing/jaeger-collector:1.29",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_jaeger_query": {
      "name": "mgr/cephadm/container_image_jaeger_query",
      "type": "str",
      "level": "advanced",
      "desc": "Jaeger query container image",
      "long_desc": "",
      "default": "quay.io/jaegertracing/jaeger-query:1.29",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_keepalived": {
      "name": "mgr/cephadm/container_image_keepalived",
      "type": "str",
      "level": "advanced",
      "desc": "Keepalived container image",
      "long_desc": "",
      "default": "quay.io/ceph/keepalived:2.2.4",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_loki": {
      "name": "mgr/cephadm/container_image_loki",
      "type": "str",
      "level": "advanced",
      "desc": "Loki container image",
      "long_desc": "",
      "default": "docker.io/grafana/loki:3.0.0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_node_exporter": {
      "name": "mgr/cephadm/container_image_node_exporter",
      "type": "str",
      "level": "advanced",
      "desc": "Prometheus container image",
      "long_desc": "",
      "default": "quay.io/prometheus/node-exporter:v1.5.0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_nvmeof": {
      "name": "mgr/cephadm/container_image_nvmeof",
      "type": "str",
      "level": "advanced",
      "desc": "Nvme-of container image",
      "long_desc": "",
      "default": "quay.io/ceph/nvmeof:1.2.5",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_prometheus": {
      "name": "mgr/cephadm/container_image_prometheus",
      "type": "str",
      "level": "advanced",
      "desc": "Prometheus container image",
      "long_desc": "",
      "default": "quay.io/prometheus/prometheus:v2.43.0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_promtail": {
      "name": "mgr/cephadm/container_image_promtail",
      "type": "str",
      "level": "advanced",
      "desc": "Promtail container image",
      "long_desc": "",
      "default": "docker.io/grafana/promtail:3.0.0",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_samba": {
      "name": "mgr/cephadm/container_image_samba",
      "type": "str",
      "level": "advanced",
      "desc": "Samba/SMB container image",
      "long_desc": "",
      "default": "quay.io/samba.org/samba-server:devbuilds-centos-amd64",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_image_snmp_gateway": {
      "name": "mgr/cephadm/container_image_snmp_gateway",
      "type": "str",
      "level": "advanced",
      "desc": "SNMP Gateway container image",
      "long_desc": "",
      "default": "docker.io/maxwo/snmp-notifier:v1.2.1",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/container_init": {
      "name": "mgr/cephadm/container_init",
      "type": "bool",
      "level": "advanced",
      "desc": "Run podman/docker with `--init`",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/daemon_cache_timeout": {
      "name": "mgr/cephadm/daemon_cache_timeout",
      "type": "secs",
      "level": "advanced",
      "desc": "seconds to cache service (daemon) inventory",
      "long_desc": "",
      "default": "600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/default_cephadm_command_timeout": {
      "name": "mgr/cephadm/default_cephadm_command_timeout",
      "type": "int",
      "level": "advanced",
      "desc": "Default timeout applied to cephadm commands run directly on the host (in seconds)",
      "long_desc": "",
      "default": 900,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/default_registry": {
      "name": "mgr/cephadm/default_registry",
      "type": "str",
      "level": "advanced",
      "desc": "Search-registry to which we should normalize unqualified image names. This is not the default registry",
      "long_desc": "",
      "default": "docker.io",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/device_cache_timeout": {
      "name": "mgr/cephadm/device_cache_timeout",
      "type": "secs",
      "level": "advanced",
      "desc": "seconds to cache device inventory",
      "long_desc": "",
      "default": "1800",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/device_enhanced_scan": {
      "name": "mgr/cephadm/device_enhanced_scan",
      "type": "bool",
      "level": "advanced",
      "desc": "Use libstoragemgmt during device scans",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/facts_cache_timeout": {
      "name": "mgr/cephadm/facts_cache_timeout",
      "type": "secs",
      "level": "advanced",
      "desc": "seconds to cache host facts data",
      "long_desc": "",
      "default": "60",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/grafana_dashboards_path": {
      "name": "mgr/cephadm/grafana_dashboards_path",
      "type": "str",
      "level": "advanced",
      "desc": "location of dashboards to include in grafana deployments",
      "long_desc": "",
      "default": "/etc/grafana/dashboards/ceph-dashboard/",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/host_check_interval": {
      "name": "mgr/cephadm/host_check_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "how frequently to perform a host check",
      "long_desc": "",
      "default": "600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/hw_monitoring": {
      "name": "mgr/cephadm/hw_monitoring",
      "type": "bool",
      "level": "advanced",
      "desc": "Deploy hw monitoring daemon on every host.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/inventory_list_all": {
      "name": "mgr/cephadm/inventory_list_all",
      "type": "bool",
      "level": "advanced",
      "desc": "Whether ceph-volume inventory should report more devices (mostly mappers (LVs / mpaths), partitions...)",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/log_level": {
      "name": "mgr/cephadm/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/cephadm/log_refresh_metadata": {
      "name": "mgr/cephadm/log_refresh_metadata",
      "type": "bool",
      "level": "advanced",
      "desc": "Log all refresh metadata. Includes daemon, device, and host info collected regularly. Only has effect if logging at debug level",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/log_to_cluster": {
      "name": "mgr/cephadm/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "log to the \"cephadm\" cluster log channel\"",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/log_to_cluster_level": {
      "name": "mgr/cephadm/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/cephadm/log_to_file": {
      "name": "mgr/cephadm/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/cephadm/manage_etc_ceph_ceph_conf": {
      "name": "mgr/cephadm/manage_etc_ceph_ceph_conf",
      "type": "bool",
      "level": "advanced",
      "desc": "Manage and own /etc/ceph/ceph.conf on the hosts.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/manage_etc_ceph_ceph_conf_hosts": {
      "name": "mgr/cephadm/manage_etc_ceph_ceph_conf_hosts",
      "type": "str",
      "level": "advanced",
      "desc": "PlacementSpec describing on which hosts to manage /etc/ceph/ceph.conf",
      "long_desc": "",
      "default": "*",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/max_count_per_host": {
      "name": "mgr/cephadm/max_count_per_host",
      "type": "int",
      "level": "advanced",
      "desc": "max number of daemons per service per host",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/max_osd_draining_count": {
      "name": "mgr/cephadm/max_osd_draining_count",
      "type": "int",
      "level": "advanced",
      "desc": "max number of osds that will be drained simultaneously when osds are removed",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/migration_current": {
      "name": "mgr/cephadm/migration_current",
      "type": "int",
      "level": "advanced",
      "desc": "internal - do not modify",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/mode": {
      "name": "mgr/cephadm/mode",
      "type": "str",
      "level": "advanced",
      "desc": "mode for remote execution of cephadm",
      "long_desc": "",
      "default": "root",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "cephadm-package",
        "root"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/oob_default_addr": {
      "name": "mgr/cephadm/oob_default_addr",
      "type": "str",
      "level": "advanced",
      "desc": "Default address for RedFish API (oob management).",
      "long_desc": "",
      "default": "169.254.1.1",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/prometheus_alerts_path": {
      "name": "mgr/cephadm/prometheus_alerts_path",
      "type": "str",
      "level": "advanced",
      "desc": "location of alerts to include in prometheus deployments",
      "long_desc": "",
      "default": "/etc/prometheus/ceph/ceph_default_alerts.yml",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/registry_insecure": {
      "name": "mgr/cephadm/registry_insecure",
      "type": "bool",
      "level": "advanced",
      "desc": "Registry is to be considered insecure (no TLS available). Only for development purposes.",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/registry_password": {
      "name": "mgr/cephadm/registry_password",
      "type": "str",
      "level": "advanced",
      "desc": "Custom repository password. Only used for logging into a registry.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/registry_url": {
      "name": "mgr/cephadm/registry_url",
      "type": "str",
      "level": "advanced",
      "desc": "Registry url for login purposes. This is not the default registry",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/registry_username": {
      "name": "mgr/cephadm/registry_username",
      "type": "str",
      "level": "advanced",
      "desc": "Custom repository username. Only used for logging into a registry.",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/secure_monitoring_stack": {
      "name": "mgr/cephadm/secure_monitoring_stack",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable TLS security for all the monitoring stack daemons",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/service_discovery_port": {
      "name": "mgr/cephadm/service_discovery_port",
      "type": "int",
      "level": "advanced",
      "desc": "cephadm service discovery port",
      "long_desc": "",
      "default": 8765,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/ssh_config_file": {
      "name": "mgr/cephadm/ssh_config_file",
      "type": "str",
      "level": "advanced",
      "desc": "customized SSH config file to connect to managed hosts",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/use_agent": {
      "name": "mgr/cephadm/use_agent",
      "type": "bool",
      "level": "advanced",
      "desc": "Use cephadm agent on each host to gather and send metadata",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/use_repo_digest": {
      "name": "mgr/cephadm/use_repo_digest",
      "type": "bool",
      "level": "advanced",
      "desc": "Automatically convert image tags to image digest. Make sure all daemons use the same image",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/warn_on_failed_host_check": {
      "name": "mgr/cephadm/warn_on_failed_host_check",
      "type": "bool",
      "level": "advanced",
      "desc": "raise a health warning if the host check fails",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/warn_on_stray_daemons": {
      "name": "mgr/cephadm/warn_on_stray_daemons",
      "type": "bool",
      "level": "advanced",
      "desc": "raise a health warning if daemons are detected that are not managed by cephadm",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/cephadm/warn_on_stray_hosts": {
      "name": "mgr/cephadm/warn_on_stray_hosts",
      "type": "bool",
      "level": "advanced",
      "desc": "raise a health warning if daemons are detected on a host that is not managed by cephadm",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/crash/log_level": {
      "name": "mgr/crash/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/crash/log_to_cluster": {
      "name": "mgr/crash/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/crash/log_to_cluster_level": {
      "name": "mgr/crash/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/crash/log_to_file": {
      "name": "mgr/crash/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/crash/retain_interval": {
      "name": "mgr/crash/retain_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "how long to retain crashes before pruning them",
      "long_desc": "",
      "default": "31536000",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/crash/warn_recent_interval": {
      "name": "mgr/crash/warn_recent_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "time interval in which to warn about recent crashes",
      "long_desc": "",
      "default": "1209600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/dashboard/ACCOUNT_LOCKOUT_ATTEMPTS": {
      "name": "mgr/dashboard/ACCOUNT_LOCKOUT_ATTEMPTS",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/ALERTMANAGER_API_HOST": {
      "name": "mgr/dashboard/ALERTMANAGER_API_HOST",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/ALERTMANAGER_API_SSL_VERIFY": {
      "name": "mgr/dashboard/ALERTMANAGER_API_SSL_VERIFY",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/AUDIT_API_ENABLED": {
      "name": "mgr/dashboard/AUDIT_API_ENABLED",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/AUDIT_API_LOG_PAYLOAD": {
      "name": "mgr/dashboard/AUDIT_API_LOG_PAYLOAD",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/ENABLE_BROWSABLE_API": {
      "name": "mgr/dashboard/ENABLE_BROWSABLE_API",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/FEATURE_TOGGLE_CEPHFS": {
      "name": "mgr/dashboard/FEATURE_TOGGLE_CEPHFS",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/FEATURE_TOGGLE_DASHBOARD": {
      "name": "mgr/dashboard/FEATURE_TOGGLE_DASHBOARD",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/FEATURE_TOGGLE_ISCSI": {
      "name": "mgr/dashboard/FEATURE_TOGGLE_ISCSI",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/FEATURE_TOGGLE_MIRRORING": {
      "name": "mgr/dashboard/FEATURE_TOGGLE_MIRRORING",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/FEATURE_TOGGLE_NFS": {
      "name": "mgr/dashboard/FEATURE_TOGGLE_NFS",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/FEATURE_TOGGLE_RBD": {
      "name": "mgr/dashboard/FEATURE_TOGGLE_RBD",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/FEATURE_TOGGLE_RGW": {
      "name": "mgr/dashboard/FEATURE_TOGGLE_RGW",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/GANESHA_CLUSTERS_RADOS_POOL_NAMESPACE": {
      "name": "mgr/dashboard/GANESHA_CLUSTERS_RADOS_POOL_NAMESPACE",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/GRAFANA_API_PASSWORD": {
      "name": "mgr/dashboard/GRAFANA_API_PASSWORD",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "admin",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/GRAFANA_API_SSL_VERIFY": {
      "name": "mgr/dashboard/GRAFANA_API_SSL_VERIFY",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/GRAFANA_API_URL": {
      "name": "mgr/dashboard/GRAFANA_API_URL",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/GRAFANA_API_USERNAME": {
      "name": "mgr/dashboard/GRAFANA_API_USERNAME",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "admin",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/GRAFANA_FRONTEND_API_URL": {
      "name": "mgr/dashboard/GRAFANA_FRONTEND_API_URL",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/GRAFANA_UPDATE_DASHBOARDS": {
      "name": "mgr/dashboard/GRAFANA_UPDATE_DASHBOARDS",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/ISCSI_API_SSL_VERIFICATION": {
      "name": "mgr/dashboard/ISCSI_API_SSL_VERIFICATION",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/ISSUE_TRACKER_API_KEY": {
      "name": "mgr/dashboard/ISSUE_TRACKER_API_KEY",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PROMETHEUS_API_HOST": {
      "name": "mgr/dashboard/PROMETHEUS_API_HOST",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PROMETHEUS_API_SSL_VERIFY": {
      "name": "mgr/dashboard/PROMETHEUS_API_SSL_VERIFY",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_CHECK_COMPLEXITY_ENABLED": {
      "name": "mgr/dashboard/PWD_POLICY_CHECK_COMPLEXITY_ENABLED",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_CHECK_EXCLUSION_LIST_ENABLED": {
      "name": "mgr/dashboard/PWD_POLICY_CHECK_EXCLUSION_LIST_ENABLED",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_CHECK_LENGTH_ENABLED": {
      "name": "mgr/dashboard/PWD_POLICY_CHECK_LENGTH_ENABLED",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_CHECK_OLDPWD_ENABLED": {
      "name": "mgr/dashboard/PWD_POLICY_CHECK_OLDPWD_ENABLED",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_CHECK_REPETITIVE_CHARS_ENABLED": {
      "name": "mgr/dashboard/PWD_POLICY_CHECK_REPETITIVE_CHARS_ENABLED",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_CHECK_SEQUENTIAL_CHARS_ENABLED": {
      "name": "mgr/dashboard/PWD_POLICY_CHECK_SEQUENTIAL_CHARS_ENABLED",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_CHECK_USERNAME_ENABLED": {
      "name": "mgr/dashboard/PWD_POLICY_CHECK_USERNAME_ENABLED",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_ENABLED": {
      "name": "mgr/dashboard/PWD_POLICY_ENABLED",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_EXCLUSION_LIST": {
      "name": "mgr/dashboard/PWD_POLICY_EXCLUSION_LIST",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "osd,host,dashboard,pool,block,nfs,ceph,monitors,gateway,logs,crush,maps",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_MIN_COMPLEXITY": {
      "name": "mgr/dashboard/PWD_POLICY_MIN_COMPLEXITY",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/PWD_POLICY_MIN_LENGTH": {
      "name": "mgr/dashboard/PWD_POLICY_MIN_LENGTH",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 8,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/REST_REQUESTS_TIMEOUT": {
      "name": "mgr/dashboard/REST_REQUESTS_TIMEOUT",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 45,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/RGW_API_ACCESS_KEY": {
      "name": "mgr/dashboard/RGW_API_ACCESS_KEY",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/RGW_API_ADMIN_RESOURCE": {
      "name": "mgr/dashboard/RGW_API_ADMIN_RESOURCE",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "admin",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/RGW_API_SECRET_KEY": {
      "name": "mgr/dashboard/RGW_API_SECRET_KEY",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/RGW_API_SSL_VERIFY": {
      "name": "mgr/dashboard/RGW_API_SSL_VERIFY",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/USER_PWD_EXPIRATION_SPAN": {
      "name": "mgr/dashboard/USER_PWD_EXPIRATION_SPAN",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/USER_PWD_EXPIRATION_WARNING_1": {
      "name": "mgr/dashboard/USER_PWD_EXPIRATION_WARNING_1",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/USER_PWD_EXPIRATION_WARNING_2": {
      "name": "mgr/dashboard/USER_PWD_EXPIRATION_WARNING_2",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/cross_origin_url": {
      "name": "mgr/dashboard/cross_origin_url",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/crt_file": {
      "name": "mgr/dashboard/crt_file",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/debug": {
      "name": "mgr/dashboard/debug",
      "type": "bool",
      "level": "advanced",
      "desc": "Enable/disable debug options",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/jwt_token_ttl": {
      "name": "mgr/dashboard/jwt_token_ttl",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 28800,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/key_file": {
      "name": "mgr/dashboard/key_file",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/log_level": {
      "name": "mgr/dashboard/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/dashboard/log_to_cluster": {
      "name": "mgr/dashboard/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/dashboard/log_to_cluster_level": {
      "name": "mgr/dashboard/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/dashboard/log_to_file": {
      "name": "mgr/dashboard/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/dashboard/motd": {
      "name": "mgr/dashboard/motd",
      "type": "str",
      "level": "advanced",
      "desc": "The message of the day",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/redirect_resolve_ip_addr": {
      "name": "mgr/dashboard/redirect_resolve_ip_addr",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/server_addr": {
      "name": "mgr/dashboard/server_addr",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "::",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/server_port": {
      "name": "mgr/dashboard/server_port",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 8080,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/ssl": {
      "name": "mgr/dashboard/ssl",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/ssl_server_port": {
      "name": "mgr/dashboard/ssl_server_port",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 8443,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/standby_behaviour": {
      "name": "mgr/dashboard/standby_behaviour",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "redirect",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "error",
        "redirect"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/standby_error_status_code": {
      "name": "mgr/dashboard/standby_error_status_code",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 400,
      "max": 599,
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/dashboard/url_prefix": {
      "name": "mgr/dashboard/url_prefix",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/devicehealth/enable_monitoring": {
      "name": "mgr/devicehealth/enable_monitoring",
      "type": "bool",
      "level": "advanced",
      "desc": "monitor device health metrics",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/log_level": {
      "name": "mgr/devicehealth/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/log_to_cluster": {
      "name": "mgr/devicehealth/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/log_to_cluster_level": {
      "name": "mgr/devicehealth/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/log_to_file": {
      "name": "mgr/devicehealth/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/mark_out_threshold": {
      "name": "mgr/devicehealth/mark_out_threshold",
      "type": "secs",
      "level": "advanced",
      "desc": "automatically mark OSD if it may fail before this long",
      "long_desc": "",
      "default": "2419200",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/pool_name": {
      "name": "mgr/devicehealth/pool_name",
      "type": "str",
      "level": "advanced",
      "desc": "name of pool in which to store device health metrics",
      "long_desc": "",
      "default": "device_health_metrics",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/retention_period": {
      "name": "mgr/devicehealth/retention_period",
      "type": "secs",
      "level": "advanced",
      "desc": "how long to retain device health metrics",
      "long_desc": "",
      "default": "15552000",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/scrape_frequency": {
      "name": "mgr/devicehealth/scrape_frequency",
      "type": "secs",
      "level": "advanced",
      "desc": "how frequently to scrape device health metrics",
      "long_desc": "",
      "default": "86400",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/self_heal": {
      "name": "mgr/devicehealth/self_heal",
      "type": "bool",
      "level": "advanced",
      "desc": "preemptively heal cluster around devices that may fail",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/sleep_interval": {
      "name": "mgr/devicehealth/sleep_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "how frequently to wake up and check device health",
      "long_desc": "",
      "default": "600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/devicehealth/warn_threshold": {
      "name": "mgr/devicehealth/warn_threshold",
      "type": "secs",
      "level": "advanced",
      "desc": "raise health warning if OSD may fail before this long",
      "long_desc": "",
      "default": "7257600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/diskprediction_local/log_level": {
      "name": "mgr/diskprediction_local/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/diskprediction_local/log_to_cluster": {
      "name": "mgr/diskprediction_local/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/diskprediction_local/log_to_cluster_level": {
      "name": "mgr/diskprediction_local/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/diskprediction_local/log_to_file": {
      "name": "mgr/diskprediction_local/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/diskprediction_local/predict_interval": {
      "name": "mgr/diskprediction_local/predict_interval",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "86400",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/diskprediction_local/predictor_model": {
      "name": "mgr/diskprediction_local/predictor_model",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "prophetstor",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/diskprediction_local/sleep_interval": {
      "name": "mgr/diskprediction_local/sleep_interval",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "600",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/influx/batch_size": {
      "name": "mgr/influx/batch_size",
      "type": "int",
      "level": "advanced",
      "desc": "How big batches of data points should be when sending to InfluxDB.",
      "long_desc": "",
      "default": 5000,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/influx/database": {
      "name": "mgr/influx/database",
      "type": "str",
      "level": "advanced",
      "desc": "InfluxDB database name. You will need to create this database and grant write privileges to the configured username or the username must have admin privileges to create it.",
      "long_desc": "",
      "default": "ceph",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/influx/hostname": {
      "name": "mgr/influx/hostname",
      "type": "str",
      "level": "advanced",
      "desc": "InfluxDB server hostname",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/influx/interval": {
      "name": "mgr/influx/interval",
      "type": "secs",
      "level": "advanced",
      "desc": "Time between reports to InfluxDB.  Default 30 seconds.",
      "long_desc": "",
      "default": "30",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/influx/log_level": {
      "name": "mgr/influx/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/influx/log_to_cluster": {
      "name": "mgr/influx/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/influx/log_to_cluster_level": {
      "name": "mgr/influx/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/influx/log_to_file": {
      "name": "mgr/influx/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/influx/password": {
      "name": "mgr/influx/password",
      "type": "str",
      "level": "advanced",
      "desc": "password of InfluxDB server user",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/influx/port": {
      "name": "mgr/influx/port",
      "type": "int",
      "level": "advanced",
      "desc": "InfluxDB server port",
      "long_desc": "",
      "default": 8086,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/influx/ssl": {
      "name": "mgr/influx/ssl",
      "type": "str",
      "level": "advanced",
      "desc": "Use https connection for InfluxDB server. Use \"true\" or \"false\".",
      "long_desc": "",
      "default": "false",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/influx/threads": {
      "name": "mgr/influx/threads",
      "type": "int",
      "level": "advanced",
      "desc": "How many worker threads should be spawned for sending data to InfluxDB.",
      "long_desc": "",
      "default": 5,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 1,
      "max": 32,
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/influx/username": {
      "name": "mgr/influx/username",
      "type": "str",
      "level": "advanced",
      "desc": "username of InfluxDB server user",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/influx/verify_ssl": {
      "name": "mgr/influx/verify_ssl",
      "type": "str",
      "level": "advanced",
      "desc": "Verify https cert for InfluxDB server. Use \"true\" or \"false\".",
      "long_desc": "",
      "default": "true",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/insights/log_level": {
      "name": "mgr/insights/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/insights/log_to_cluster": {
      "name": "mgr/insights/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/insights/log_to_cluster_level": {
      "name": "mgr/insights/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/insights/log_to_file": {
      "name": "mgr/insights/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/iostat/log_level": {
      "name": "mgr/iostat/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/iostat/log_to_cluster": {
      "name": "mgr/iostat/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/iostat/log_to_cluster_level": {
      "name": "mgr/iostat/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/iostat/log_to_file": {
      "name": "mgr/iostat/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/k8sevents/ceph_event_retention_days": {
      "name": "mgr/k8sevents/ceph_event_retention_days",
      "type": "int",
      "level": "advanced",
      "desc": "Days to hold ceph event information within local cache",
      "long_desc": "",
      "default": 7,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/k8sevents/config_check_secs": {
      "name": "mgr/k8sevents/config_check_secs",
      "type": "int",
      "level": "advanced",
      "desc": "interval (secs) to check for cluster configuration changes",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/k8sevents/log_level": {
      "name": "mgr/k8sevents/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/k8sevents/log_to_cluster": {
      "name": "mgr/k8sevents/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/k8sevents/log_to_cluster_level": {
      "name": "mgr/k8sevents/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/k8sevents/log_to_file": {
      "name": "mgr/k8sevents/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/localpool/failure_domain": {
      "name": "mgr/localpool/failure_domain",
      "type": "str",
      "level": "advanced",
      "desc": "failure domain for any created local pool",
      "long_desc": "what failure domain we should separate data replicas across.",
      "default": "host",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/localpool/log_level": {
      "name": "mgr/localpool/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/localpool/log_to_cluster": {
      "name": "mgr/localpool/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/localpool/log_to_cluster_level": {
      "name": "mgr/localpool/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/localpool/log_to_file": {
      "name": "mgr/localpool/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/localpool/min_size": {
      "name": "mgr/localpool/min_size",
      "type": "int",
      "level": "advanced",
      "desc": "default min_size for any created local pool",
      "long_desc": "value to set min_size to (unchanged from Ceph's default if this option is not set)",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/localpool/num_rep": {
      "name": "mgr/localpool/num_rep",
      "type": "int",
      "level": "advanced",
      "desc": "default replica count for any created local pool",
      "long_desc": "",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/localpool/pg_num": {
      "name": "mgr/localpool/pg_num",
      "type": "int",
      "level": "advanced",
      "desc": "default pg_num for any created local pool",
      "long_desc": "",
      "default": 128,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/localpool/prefix": {
      "name": "mgr/localpool/prefix",
      "type": "str",
      "level": "advanced",
      "desc": "name prefix for any created local pool",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/localpool/subtree": {
      "name": "mgr/localpool/subtree",
      "type": "str",
      "level": "advanced",
      "desc": "CRUSH level for which to create a local pool",
      "long_desc": "which CRUSH subtree type the module should create a pool for.",
      "default": "rack",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/mds_autoscaler/log_level": {
      "name": "mgr/mds_autoscaler/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/mds_autoscaler/log_to_cluster": {
      "name": "mgr/mds_autoscaler/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/mds_autoscaler/log_to_cluster_level": {
      "name": "mgr/mds_autoscaler/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/mds_autoscaler/log_to_file": {
      "name": "mgr/mds_autoscaler/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/mirroring/log_level": {
      "name": "mgr/mirroring/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/mirroring/log_to_cluster": {
      "name": "mgr/mirroring/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/mirroring/log_to_cluster_level": {
      "name": "mgr/mirroring/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/mirroring/log_to_file": {
      "name": "mgr/mirroring/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/nfs/log_level": {
      "name": "mgr/nfs/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/nfs/log_to_cluster": {
      "name": "mgr/nfs/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/nfs/log_to_cluster_level": {
      "name": "mgr/nfs/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/nfs/log_to_file": {
      "name": "mgr/nfs/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/orchestrator/fail_fs": {
      "name": "mgr/orchestrator/fail_fs",
      "type": "bool",
      "level": "advanced",
      "desc": "Fail filesystem for rapid multi-rank mds upgrade",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/orchestrator/log_level": {
      "name": "mgr/orchestrator/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/orchestrator/log_to_cluster": {
      "name": "mgr/orchestrator/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/orchestrator/log_to_cluster_level": {
      "name": "mgr/orchestrator/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/orchestrator/log_to_file": {
      "name": "mgr/orchestrator/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/orchestrator/orchestrator": {
      "name": "mgr/orchestrator/orchestrator",
      "type": "str",
      "level": "advanced",
      "desc": "Orchestrator backend",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "cephadm",
        "rook",
        "test_orchestrator"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/osd_perf_query/log_level": {
      "name": "mgr/osd_perf_query/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/osd_perf_query/log_to_cluster": {
      "name": "mgr/osd_perf_query/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/osd_perf_query/log_to_cluster_level": {
      "name": "mgr/osd_perf_query/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/osd_perf_query/log_to_file": {
      "name": "mgr/osd_perf_query/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/osd_support/log_level": {
      "name": "mgr/osd_support/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/osd_support/log_to_cluster": {
      "name": "mgr/osd_support/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/osd_support/log_to_cluster_level": {
      "name": "mgr/osd_support/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/osd_support/log_to_file": {
      "name": "mgr/osd_support/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/pg_autoscaler/log_level": {
      "name": "mgr/pg_autoscaler/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/pg_autoscaler/log_to_cluster": {
      "name": "mgr/pg_autoscaler/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/pg_autoscaler/log_to_cluster_level": {
      "name": "mgr/pg_autoscaler/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/pg_autoscaler/log_to_file": {
      "name": "mgr/pg_autoscaler/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/pg_autoscaler/sleep_interval": {
      "name": "mgr/pg_autoscaler/sleep_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "60",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/pg_autoscaler/threshold": {
      "name": "mgr/pg_autoscaler/threshold",
      "type": "float",
      "level": "advanced",
      "desc": "scaling threshold",
      "long_desc": "The factor by which the `NEW PG_NUM` must vary from the current`PG_NUM` before being accepted. Cannot be less than 1.0",
      "default": 3,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/progress/allow_pg_recovery_event": {
      "name": "mgr/progress/allow_pg_recovery_event",
      "type": "bool",
      "level": "advanced",
      "desc": "allow the module to show pg recovery progress",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/progress/enabled": {
      "name": "mgr/progress/enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/progress/log_level": {
      "name": "mgr/progress/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/progress/log_to_cluster": {
      "name": "mgr/progress/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/progress/log_to_cluster_level": {
      "name": "mgr/progress/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/progress/log_to_file": {
      "name": "mgr/progress/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/progress/max_completed_events": {
      "name": "mgr/progress/max_completed_events",
      "type": "int",
      "level": "advanced",
      "desc": "number of past completed events to remember",
      "long_desc": "",
      "default": 50,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/progress/sleep_interval": {
      "name": "mgr/progress/sleep_interval",
      "type": "secs",
      "level": "advanced",
      "desc": "how long the module is going to sleep",
      "long_desc": "",
      "default": "5",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/prometheus/cache": {
      "name": "mgr/prometheus/cache",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/prometheus/exclude_perf_counters": {
      "name": "mgr/prometheus/exclude_perf_counters",
      "type": "bool",
      "level": "advanced",
      "desc": "Do not include perf-counters in the metrics output",
      "long_desc": "Gathering perf-counters from a single Prometheus exporter can degrade ceph-mgr performance, especially in large clusters. Instead, Ceph-exporter daemons are now used by default for perf-counter gathering. This should only be disabled when no ceph-exporters are deployed.",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/prometheus/log_level": {
      "name": "mgr/prometheus/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/prometheus/log_to_cluster": {
      "name": "mgr/prometheus/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/prometheus/log_to_cluster_level": {
      "name": "mgr/prometheus/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/prometheus/log_to_file": {
      "name": "mgr/prometheus/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/prometheus/rbd_stats_pools": {
      "name": "mgr/prometheus/rbd_stats_pools",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/prometheus/rbd_stats_pools_refresh_interval": {
      "name": "mgr/prometheus/rbd_stats_pools_refresh_interval",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 300,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/prometheus/scrape_interval": {
      "name": "mgr/prometheus/scrape_interval",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 15,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/prometheus/server_addr": {
      "name": "mgr/prometheus/server_addr",
      "type": "str",
      "level": "advanced",
      "desc": "the IPv4 or IPv6 address on which the module listens for HTTP requests",
      "long_desc": "",
      "default": "::",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/prometheus/server_port": {
      "name": "mgr/prometheus/server_port",
      "type": "int",
      "level": "advanced",
      "desc": "the port on which the module listens for HTTP requests",
      "long_desc": "",
      "default": 9283,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/prometheus/stale_cache_strategy": {
      "name": "mgr/prometheus/stale_cache_strategy",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "log",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/prometheus/standby_behaviour": {
      "name": "mgr/prometheus/standby_behaviour",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "default",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "default",
        "error"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/prometheus/standby_error_status_code": {
      "name": "mgr/prometheus/standby_error_status_code",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 500,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 400,
      "max": 599,
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rbd_support/log_level": {
      "name": "mgr/rbd_support/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rbd_support/log_to_cluster": {
      "name": "mgr/rbd_support/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rbd_support/log_to_cluster_level": {
      "name": "mgr/rbd_support/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rbd_support/log_to_file": {
      "name": "mgr/rbd_support/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rbd_support/max_concurrent_snap_create": {
      "name": "mgr/rbd_support/max_concurrent_snap_create",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/rbd_support/mirror_snapshot_schedule": {
      "name": "mgr/rbd_support/mirror_snapshot_schedule",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/rbd_support/trash_purge_schedule": {
      "name": "mgr/rbd_support/trash_purge_schedule",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/restful/enable_auth": {
      "name": "mgr/restful/enable_auth",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/restful/key_file": {
      "name": "mgr/restful/key_file",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/restful/log_level": {
      "name": "mgr/restful/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/restful/log_to_cluster": {
      "name": "mgr/restful/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/restful/log_to_cluster_level": {
      "name": "mgr/restful/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/restful/log_to_file": {
      "name": "mgr/restful/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/restful/server_addr": {
      "name": "mgr/restful/server_addr",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/restful/server_port": {
      "name": "mgr/restful/server_port",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/rgw/log_level": {
      "name": "mgr/rgw/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rgw/log_to_cluster": {
      "name": "mgr/rgw/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rgw/log_to_cluster_level": {
      "name": "mgr/rgw/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rgw/log_to_file": {
      "name": "mgr/rgw/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rook/log_level": {
      "name": "mgr/rook/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rook/log_to_cluster": {
      "name": "mgr/rook/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rook/log_to_cluster_level": {
      "name": "mgr/rook/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rook/log_to_file": {
      "name": "mgr/rook/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/rook/storage_class": {
      "name": "mgr/rook/storage_class",
      "type": "str",
      "level": "advanced",
      "desc": "storage class name for LSO-discovered PVs",
      "long_desc": "",
      "default": "local",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/log_level": {
      "name": "mgr/selftest/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/selftest/log_to_cluster": {
      "name": "mgr/selftest/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/selftest/log_to_cluster_level": {
      "name": "mgr/selftest/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/selftest/log_to_file": {
      "name": "mgr/selftest/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/selftest/roption1": {
      "name": "mgr/selftest/roption1",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/roption2": {
      "name": "mgr/selftest/roption2",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "xyz",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/rwoption1": {
      "name": "mgr/selftest/rwoption1",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/rwoption2": {
      "name": "mgr/selftest/rwoption2",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/rwoption3": {
      "name": "mgr/selftest/rwoption3",
      "type": "float",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/rwoption4": {
      "name": "mgr/selftest/rwoption4",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/rwoption5": {
      "name": "mgr/selftest/rwoption5",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/rwoption6": {
      "name": "mgr/selftest/rwoption6",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/rwoption7": {
      "name": "mgr/selftest/rwoption7",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": 1,
      "max": 42,
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/testkey": {
      "name": "mgr/selftest/testkey",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/testlkey": {
      "name": "mgr/selftest/testlkey",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/selftest/testnewline": {
      "name": "mgr/selftest/testnewline",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/snap_schedule/allow_m_granularity": {
      "name": "mgr/snap_schedule/allow_m_granularity",
      "type": "bool",
      "level": "advanced",
      "desc": "allow minute scheduled snapshots",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/snap_schedule/dump_on_update": {
      "name": "mgr/snap_schedule/dump_on_update",
      "type": "bool",
      "level": "advanced",
      "desc": "dump database to debug log on update",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/snap_schedule/log_level": {
      "name": "mgr/snap_schedule/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/snap_schedule/log_to_cluster": {
      "name": "mgr/snap_schedule/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/snap_schedule/log_to_cluster_level": {
      "name": "mgr/snap_schedule/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/snap_schedule/log_to_file": {
      "name": "mgr/snap_schedule/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/stats/log_level": {
      "name": "mgr/stats/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/stats/log_to_cluster": {
      "name": "mgr/stats/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/stats/log_to_cluster_level": {
      "name": "mgr/stats/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/stats/log_to_file": {
      "name": "mgr/stats/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/status/log_level": {
      "name": "mgr/status/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/status/log_to_cluster": {
      "name": "mgr/status/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/status/log_to_cluster_level": {
      "name": "mgr/status/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/status/log_to_file": {
      "name": "mgr/status/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/telegraf/address": {
      "name": "mgr/telegraf/address",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "unixgram:///tmp/telegraf.sock",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telegraf/interval": {
      "name": "mgr/telegraf/interval",
      "type": "secs",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "15",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telegraf/log_level": {
      "name": "mgr/telegraf/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/telegraf/log_to_cluster": {
      "name": "mgr/telegraf/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/telegraf/log_to_cluster_level": {
      "name": "mgr/telegraf/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/telegraf/log_to_file": {
      "name": "mgr/telegraf/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/telemetry/channel_basic": {
      "name": "mgr/telemetry/channel_basic",
      "type": "bool",
      "level": "advanced",
      "desc": "Share basic cluster information (size, version)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/channel_crash": {
      "name": "mgr/telemetry/channel_crash",
      "type": "bool",
      "level": "advanced",
      "desc": "Share metadata about Ceph daemon crashes (version, stack straces, etc)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/channel_device": {
      "name": "mgr/telemetry/channel_device",
      "type": "bool",
      "level": "advanced",
      "desc": "Share device health metrics (e.g., SMART data, minus potentially identifying info like serial numbers)",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/channel_ident": {
      "name": "mgr/telemetry/channel_ident",
      "type": "bool",
      "level": "advanced",
      "desc": "Share a user-provided description and/or contact email for the cluster",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/channel_perf": {
      "name": "mgr/telemetry/channel_perf",
      "type": "bool",
      "level": "advanced",
      "desc": "Share various performance metrics of a cluster",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/contact": {
      "name": "mgr/telemetry/contact",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/description": {
      "name": "mgr/telemetry/description",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/device_url": {
      "name": "mgr/telemetry/device_url",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "https://telemetry.ceph.com/device",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/enabled": {
      "name": "mgr/telemetry/enabled",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/interval": {
      "name": "mgr/telemetry/interval",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 24,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/last_opt_revision": {
      "name": "mgr/telemetry/last_opt_revision",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 1,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/leaderboard": {
      "name": "mgr/telemetry/leaderboard",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/leaderboard_description": {
      "name": "mgr/telemetry/leaderboard_description",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/log_level": {
      "name": "mgr/telemetry/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/telemetry/log_to_cluster": {
      "name": "mgr/telemetry/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/telemetry/log_to_cluster_level": {
      "name": "mgr/telemetry/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/telemetry/log_to_file": {
      "name": "mgr/telemetry/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/telemetry/organization": {
      "name": "mgr/telemetry/organization",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/proxy": {
      "name": "mgr/telemetry/proxy",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/telemetry/url": {
      "name": "mgr/telemetry/url",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "https://telemetry.ceph.com/report",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/test_orchestrator/log_level": {
      "name": "mgr/test_orchestrator/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/test_orchestrator/log_to_cluster": {
      "name": "mgr/test_orchestrator/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/test_orchestrator/log_to_cluster_level": {
      "name": "mgr/test_orchestrator/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/test_orchestrator/log_to_file": {
      "name": "mgr/test_orchestrator/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/volumes/log_level": {
      "name": "mgr/volumes/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/volumes/log_to_cluster": {
      "name": "mgr/volumes/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/volumes/log_to_cluster_level": {
      "name": "mgr/volumes/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/volumes/log_to_file": {
      "name": "mgr/volumes/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/volumes/max_concurrent_clones": {
      "name": "mgr/volumes/max_concurrent_clones",
      "type": "int",
      "level": "advanced",
      "desc": "Number of asynchronous cloner threads",
      "long_desc": "",
      "default": 4,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/volumes/periodic_async_work": {
      "name": "mgr/volumes/periodic_async_work",
      "type": "bool",
      "level": "advanced",
      "desc": "Periodically check for async work",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/volumes/snapshot_clone_delay": {
      "name": "mgr/volumes/snapshot_clone_delay",
      "type": "int",
      "level": "advanced",
      "desc": "Delay clone begin operation by snapshot_clone_delay seconds",
      "long_desc": "",
      "default": 0,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/volumes/snapshot_clone_no_wait": {
      "name": "mgr/volumes/snapshot_clone_no_wait",
      "type": "bool",
      "level": "advanced",
      "desc": "Reject subvolume clone request when cloner threads are busy",
      "long_desc": "",
      "default": true,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/zabbix/discovery_interval": {
      "name": "mgr/zabbix/discovery_interval",
      "type": "uint",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 100,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/zabbix/identifier": {
      "name": "mgr/zabbix/identifier",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/zabbix/interval": {
      "name": "mgr/zabbix/interval",
      "type": "secs",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "60",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/zabbix/log_level": {
      "name": "mgr/zabbix/log_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/zabbix/log_to_cluster": {
      "name": "mgr/zabbix/log_to_cluster",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/zabbix/log_to_cluster_level": {
      "name": "mgr/zabbix/log_to_cluster_level",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "info",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [
        "",
        "critical",
        "debug",
        "error",
        "info",
        "warning"
      ],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/zabbix/log_to_file": {
      "name": "mgr/zabbix/log_to_file",
      "type": "bool",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": false,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": true,
      "flags": [
        "runtime"
      ]
    }
  },
  {
    "mgr/zabbix/zabbix_host": {
      "name": "mgr/zabbix/zabbix_host",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/zabbix/zabbix_port": {
      "name": "mgr/zabbix/zabbix_port",
      "type": "int",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": 10051,
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  },
  {
    "mgr/zabbix/zabbix_sender": {
      "name": "mgr/zabbix/zabbix_sender",
      "type": "str",
      "level": "advanced",
      "desc": "",
      "long_desc": "",
      "default": "/usr/bin/zabbix_sender",
      "daemon_default": "",
      "tags": [],
      "services": [],
      "see_also": [],
      "enum_values": [],
      "min": "",
      "max": "",
      "can_update_at_runtime": false,
      "flags": []
    }
  }
]
