// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: status.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Status_GetCephStatus_FullMethodName  = "/ceph.Status/GetCephStatus"
	Status_GetCephMonDump_FullMethodName = "/ceph.Status/GetCephMonDump"
	Status_GetCephOsdDump_FullMethodName = "/ceph.Status/GetCephOsdDump"
)

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusClient interface {
	// command: ceph status
	GetCephStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCephStatusResponse, error)
	// command: ceph mon dump
	GetCephMonDump(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CephMonDumpResponse, error)
	// command: ceph osd dump
	GetCephOsdDump(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCephOsdDumpResponse, error)
}

type statusClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusClient(cc grpc.ClientConnInterface) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) GetCephStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCephStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCephStatusResponse)
	err := c.cc.Invoke(ctx, Status_GetCephStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) GetCephMonDump(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CephMonDumpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CephMonDumpResponse)
	err := c.cc.Invoke(ctx, Status_GetCephMonDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) GetCephOsdDump(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCephOsdDumpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCephOsdDumpResponse)
	err := c.cc.Invoke(ctx, Status_GetCephOsdDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServer is the server API for Status service.
// All implementations should embed UnimplementedStatusServer
// for forward compatibility.
type StatusServer interface {
	// command: ceph status
	GetCephStatus(context.Context, *emptypb.Empty) (*GetCephStatusResponse, error)
	// command: ceph mon dump
	GetCephMonDump(context.Context, *emptypb.Empty) (*CephMonDumpResponse, error)
	// command: ceph osd dump
	GetCephOsdDump(context.Context, *emptypb.Empty) (*GetCephOsdDumpResponse, error)
}

// UnimplementedStatusServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatusServer struct{}

func (UnimplementedStatusServer) GetCephStatus(context.Context, *emptypb.Empty) (*GetCephStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCephStatus not implemented")
}
func (UnimplementedStatusServer) GetCephMonDump(context.Context, *emptypb.Empty) (*CephMonDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCephMonDump not implemented")
}
func (UnimplementedStatusServer) GetCephOsdDump(context.Context, *emptypb.Empty) (*GetCephOsdDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCephOsdDump not implemented")
}
func (UnimplementedStatusServer) testEmbeddedByValue() {}

// UnsafeStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusServer will
// result in compilation errors.
type UnsafeStatusServer interface {
	mustEmbedUnimplementedStatusServer()
}

func RegisterStatusServer(s grpc.ServiceRegistrar, srv StatusServer) {
	// If the following call pancis, it indicates UnimplementedStatusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Status_ServiceDesc, srv)
}

func _Status_GetCephStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).GetCephStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Status_GetCephStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).GetCephStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_GetCephMonDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).GetCephMonDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Status_GetCephMonDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).GetCephMonDump(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_GetCephOsdDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).GetCephOsdDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Status_GetCephOsdDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).GetCephOsdDump(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Status_ServiceDesc is the grpc.ServiceDesc for Status service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Status_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ceph.Status",
	HandlerType: (*StatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCephStatus",
			Handler:    _Status_GetCephStatus_Handler,
		},
		{
			MethodName: "GetCephMonDump",
			Handler:    _Status_GetCephMonDump_Handler,
		},
		{
			MethodName: "GetCephOsdDump",
			Handler:    _Status_GetCephOsdDump_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "status.proto",
}
