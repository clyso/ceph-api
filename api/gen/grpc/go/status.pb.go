// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: status.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCephStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fsid           string                `protobuf:"bytes,1,opt,name=fsid,proto3" json:"fsid,omitempty"`
	Health         *CephStatusHealth     `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
	ElectionEpoch  int32                 `protobuf:"varint,3,opt,name=election_epoch,json=electionEpoch,proto3" json:"election_epoch,omitempty"`
	Quorum         []int32               `protobuf:"varint,4,rep,packed,name=quorum,proto3" json:"quorum,omitempty"`
	QuorumNames    []string              `protobuf:"bytes,5,rep,name=quorum_names,json=quorumNames,proto3" json:"quorum_names,omitempty"`
	QuorumAge      int32                 `protobuf:"varint,6,opt,name=quorum_age,json=quorumAge,proto3" json:"quorum_age,omitempty"`
	Monmap         *CephStatusMonMap     `protobuf:"bytes,7,opt,name=monmap,proto3" json:"monmap,omitempty"`
	Osdmap         *CephStatusOSDMap     `protobuf:"bytes,8,opt,name=osdmap,proto3" json:"osdmap,omitempty"`
	Pgmap          *CephStatusPGMap      `protobuf:"bytes,9,opt,name=pgmap,proto3" json:"pgmap,omitempty"`
	Fsmap          *CephStatusFSMap      `protobuf:"bytes,10,opt,name=fsmap,proto3" json:"fsmap,omitempty"`
	Mgrmap         *CephStatusMgrMap     `protobuf:"bytes,11,opt,name=mgrmap,proto3" json:"mgrmap,omitempty"`
	Servicemap     *CephStatusServiceMap `protobuf:"bytes,12,opt,name=servicemap,proto3" json:"servicemap,omitempty"`
	ProgressEvents *structpb.Struct      `protobuf:"bytes,13,opt,name=progress_events,json=progressEvents,proto3" json:"progress_events,omitempty"`
}

func (x *GetCephStatusResponse) Reset() {
	*x = GetCephStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCephStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCephStatusResponse) ProtoMessage() {}

func (x *GetCephStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCephStatusResponse.ProtoReflect.Descriptor instead.
func (*GetCephStatusResponse) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{0}
}

func (x *GetCephStatusResponse) GetFsid() string {
	if x != nil {
		return x.Fsid
	}
	return ""
}

func (x *GetCephStatusResponse) GetHealth() *CephStatusHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *GetCephStatusResponse) GetElectionEpoch() int32 {
	if x != nil {
		return x.ElectionEpoch
	}
	return 0
}

func (x *GetCephStatusResponse) GetQuorum() []int32 {
	if x != nil {
		return x.Quorum
	}
	return nil
}

func (x *GetCephStatusResponse) GetQuorumNames() []string {
	if x != nil {
		return x.QuorumNames
	}
	return nil
}

func (x *GetCephStatusResponse) GetQuorumAge() int32 {
	if x != nil {
		return x.QuorumAge
	}
	return 0
}

func (x *GetCephStatusResponse) GetMonmap() *CephStatusMonMap {
	if x != nil {
		return x.Monmap
	}
	return nil
}

func (x *GetCephStatusResponse) GetOsdmap() *CephStatusOSDMap {
	if x != nil {
		return x.Osdmap
	}
	return nil
}

func (x *GetCephStatusResponse) GetPgmap() *CephStatusPGMap {
	if x != nil {
		return x.Pgmap
	}
	return nil
}

func (x *GetCephStatusResponse) GetFsmap() *CephStatusFSMap {
	if x != nil {
		return x.Fsmap
	}
	return nil
}

func (x *GetCephStatusResponse) GetMgrmap() *CephStatusMgrMap {
	if x != nil {
		return x.Mgrmap
	}
	return nil
}

func (x *GetCephStatusResponse) GetServicemap() *CephStatusServiceMap {
	if x != nil {
		return x.Servicemap
	}
	return nil
}

func (x *GetCephStatusResponse) GetProgressEvents() *structpb.Struct {
	if x != nil {
		return x.ProgressEvents
	}
	return nil
}

type CephMonDumpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             int32                  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Fsid              string                 `protobuf:"bytes,2,opt,name=fsid,proto3" json:"fsid,omitempty"`
	Modified          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=modified,proto3" json:"modified,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	MinMonRelease     int32                  `protobuf:"varint,5,opt,name=min_mon_release,json=minMonRelease,proto3" json:"min_mon_release,omitempty"`
	MinMonReleaseName string                 `protobuf:"bytes,6,opt,name=min_mon_release_name,json=minMonReleaseName,proto3" json:"min_mon_release_name,omitempty"`
	ElectionStrategy  int32                  `protobuf:"varint,7,opt,name=election_strategy,json=electionStrategy,proto3" json:"election_strategy,omitempty"`
	DisallowedLeaders string                 `protobuf:"bytes,8,opt,name=disallowed_leaders,json=disallowedLeaders,proto3" json:"disallowed_leaders,omitempty"`
	StretchMode       bool                   `protobuf:"varint,9,opt,name=stretch_mode,json=stretchMode,proto3" json:"stretch_mode,omitempty"`
	TiebreakerMon     string                 `protobuf:"bytes,10,opt,name=tiebreaker_mon,json=tiebreakerMon,proto3" json:"tiebreaker_mon,omitempty"`
	RemovedRanks      string                 `protobuf:"bytes,11,opt,name=removed_ranks,json=removedRanks,proto3" json:"removed_ranks,omitempty"`
	Features          *CephMonDumpFeatures   `protobuf:"bytes,12,opt,name=features,proto3" json:"features,omitempty"`
	Mons              []*CephMonDumpMonInfo  `protobuf:"bytes,13,rep,name=mons,proto3" json:"mons,omitempty"`
	Quorum            []int32                `protobuf:"varint,14,rep,packed,name=quorum,proto3" json:"quorum,omitempty"`
}

func (x *CephMonDumpResponse) Reset() {
	*x = CephMonDumpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephMonDumpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephMonDumpResponse) ProtoMessage() {}

func (x *CephMonDumpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephMonDumpResponse.ProtoReflect.Descriptor instead.
func (*CephMonDumpResponse) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{1}
}

func (x *CephMonDumpResponse) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CephMonDumpResponse) GetFsid() string {
	if x != nil {
		return x.Fsid
	}
	return ""
}

func (x *CephMonDumpResponse) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *CephMonDumpResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CephMonDumpResponse) GetMinMonRelease() int32 {
	if x != nil {
		return x.MinMonRelease
	}
	return 0
}

func (x *CephMonDumpResponse) GetMinMonReleaseName() string {
	if x != nil {
		return x.MinMonReleaseName
	}
	return ""
}

func (x *CephMonDumpResponse) GetElectionStrategy() int32 {
	if x != nil {
		return x.ElectionStrategy
	}
	return 0
}

func (x *CephMonDumpResponse) GetDisallowedLeaders() string {
	if x != nil {
		return x.DisallowedLeaders
	}
	return ""
}

func (x *CephMonDumpResponse) GetStretchMode() bool {
	if x != nil {
		return x.StretchMode
	}
	return false
}

func (x *CephMonDumpResponse) GetTiebreakerMon() string {
	if x != nil {
		return x.TiebreakerMon
	}
	return ""
}

func (x *CephMonDumpResponse) GetRemovedRanks() string {
	if x != nil {
		return x.RemovedRanks
	}
	return ""
}

func (x *CephMonDumpResponse) GetFeatures() *CephMonDumpFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *CephMonDumpResponse) GetMons() []*CephMonDumpMonInfo {
	if x != nil {
		return x.Mons
	}
	return nil
}

func (x *CephMonDumpResponse) GetQuorum() []int32 {
	if x != nil {
		return x.Quorum
	}
	return nil
}

type CephMonDumpFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Persistent []string `protobuf:"bytes,1,rep,name=persistent,proto3" json:"persistent,omitempty"`
	Optional   []string `protobuf:"bytes,2,rep,name=optional,proto3" json:"optional,omitempty"`
}

func (x *CephMonDumpFeatures) Reset() {
	*x = CephMonDumpFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephMonDumpFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephMonDumpFeatures) ProtoMessage() {}

func (x *CephMonDumpFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephMonDumpFeatures.ProtoReflect.Descriptor instead.
func (*CephMonDumpFeatures) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{2}
}

func (x *CephMonDumpFeatures) GetPersistent() []string {
	if x != nil {
		return x.Persistent
	}
	return nil
}

func (x *CephMonDumpFeatures) GetOptional() []string {
	if x != nil {
		return x.Optional
	}
	return nil
}

type CephMonDumpMonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank          int32               `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Name          string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PublicAddrs   *CephMonDumpAddrVec `protobuf:"bytes,3,opt,name=public_addrs,json=publicAddrs,proto3" json:"public_addrs,omitempty"`
	Addr          string              `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
	PublicAddr    string              `protobuf:"bytes,5,opt,name=public_addr,json=publicAddr,proto3" json:"public_addr,omitempty"`
	Priority      int32               `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	Weight        int32               `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	CrushLocation string              `protobuf:"bytes,8,opt,name=crush_location,json=crushLocation,proto3" json:"crush_location,omitempty"`
}

func (x *CephMonDumpMonInfo) Reset() {
	*x = CephMonDumpMonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephMonDumpMonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephMonDumpMonInfo) ProtoMessage() {}

func (x *CephMonDumpMonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephMonDumpMonInfo.ProtoReflect.Descriptor instead.
func (*CephMonDumpMonInfo) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{3}
}

func (x *CephMonDumpMonInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *CephMonDumpMonInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CephMonDumpMonInfo) GetPublicAddrs() *CephMonDumpAddrVec {
	if x != nil {
		return x.PublicAddrs
	}
	return nil
}

func (x *CephMonDumpMonInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *CephMonDumpMonInfo) GetPublicAddr() string {
	if x != nil {
		return x.PublicAddr
	}
	return ""
}

func (x *CephMonDumpMonInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CephMonDumpMonInfo) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *CephMonDumpMonInfo) GetCrushLocation() string {
	if x != nil {
		return x.CrushLocation
	}
	return ""
}

type CephMonDumpAddrVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrvec []*CephMonDumpAddress `protobuf:"bytes,1,rep,name=addrvec,proto3" json:"addrvec,omitempty"`
}

func (x *CephMonDumpAddrVec) Reset() {
	*x = CephMonDumpAddrVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephMonDumpAddrVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephMonDumpAddrVec) ProtoMessage() {}

func (x *CephMonDumpAddrVec) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephMonDumpAddrVec.ProtoReflect.Descriptor instead.
func (*CephMonDumpAddrVec) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{4}
}

func (x *CephMonDumpAddrVec) GetAddrvec() []*CephMonDumpAddress {
	if x != nil {
		return x.Addrvec
	}
	return nil
}

type CephMonDumpAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Nonce int32  `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *CephMonDumpAddress) Reset() {
	*x = CephMonDumpAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephMonDumpAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephMonDumpAddress) ProtoMessage() {}

func (x *CephMonDumpAddress) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephMonDumpAddress.ProtoReflect.Descriptor instead.
func (*CephMonDumpAddress) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{5}
}

func (x *CephMonDumpAddress) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CephMonDumpAddress) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *CephMonDumpAddress) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type CephStatusHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Checks map[string]*structpb.Struct `protobuf:"bytes,2,rep,name=checks,proto3" json:"checks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mutes  []*structpb.Value           `protobuf:"bytes,3,rep,name=mutes,proto3" json:"mutes,omitempty"`
}

func (x *CephStatusHealth) Reset() {
	*x = CephStatusHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusHealth) ProtoMessage() {}

func (x *CephStatusHealth) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusHealth.ProtoReflect.Descriptor instead.
func (*CephStatusHealth) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{6}
}

func (x *CephStatusHealth) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CephStatusHealth) GetChecks() map[string]*structpb.Struct {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *CephStatusHealth) GetMutes() []*structpb.Value {
	if x != nil {
		return x.Mutes
	}
	return nil
}

type CephStatusMonMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             int32  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	MinMonReleaseName string `protobuf:"bytes,2,opt,name=min_mon_release_name,json=minMonReleaseName,proto3" json:"min_mon_release_name,omitempty"`
	NumMons           int32  `protobuf:"varint,3,opt,name=num_mons,json=numMons,proto3" json:"num_mons,omitempty"`
}

func (x *CephStatusMonMap) Reset() {
	*x = CephStatusMonMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusMonMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusMonMap) ProtoMessage() {}

func (x *CephStatusMonMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusMonMap.ProtoReflect.Descriptor instead.
func (*CephStatusMonMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{7}
}

func (x *CephStatusMonMap) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CephStatusMonMap) GetMinMonReleaseName() string {
	if x != nil {
		return x.MinMonReleaseName
	}
	return ""
}

func (x *CephStatusMonMap) GetNumMons() int32 {
	if x != nil {
		return x.NumMons
	}
	return 0
}

type CephStatusOSDMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch          int32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NumOsds        int32 `protobuf:"varint,2,opt,name=num_osds,json=numOsds,proto3" json:"num_osds,omitempty"`
	NumUpOsds      int32 `protobuf:"varint,3,opt,name=num_up_osds,json=numUpOsds,proto3" json:"num_up_osds,omitempty"`
	OsdUpSince     int64 `protobuf:"varint,4,opt,name=osd_up_since,json=osdUpSince,proto3" json:"osd_up_since,omitempty"`
	NumInOsds      int32 `protobuf:"varint,5,opt,name=num_in_osds,json=numInOsds,proto3" json:"num_in_osds,omitempty"`
	OsdInSince     int64 `protobuf:"varint,6,opt,name=osd_in_since,json=osdInSince,proto3" json:"osd_in_since,omitempty"`
	NumRemappedPgs int32 `protobuf:"varint,7,opt,name=num_remapped_pgs,json=numRemappedPgs,proto3" json:"num_remapped_pgs,omitempty"`
}

func (x *CephStatusOSDMap) Reset() {
	*x = CephStatusOSDMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusOSDMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusOSDMap) ProtoMessage() {}

func (x *CephStatusOSDMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusOSDMap.ProtoReflect.Descriptor instead.
func (*CephStatusOSDMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{8}
}

func (x *CephStatusOSDMap) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CephStatusOSDMap) GetNumOsds() int32 {
	if x != nil {
		return x.NumOsds
	}
	return 0
}

func (x *CephStatusOSDMap) GetNumUpOsds() int32 {
	if x != nil {
		return x.NumUpOsds
	}
	return 0
}

func (x *CephStatusOSDMap) GetOsdUpSince() int64 {
	if x != nil {
		return x.OsdUpSince
	}
	return 0
}

func (x *CephStatusOSDMap) GetNumInOsds() int32 {
	if x != nil {
		return x.NumInOsds
	}
	return 0
}

func (x *CephStatusOSDMap) GetOsdInSince() int64 {
	if x != nil {
		return x.OsdInSince
	}
	return 0
}

func (x *CephStatusOSDMap) GetNumRemappedPgs() int32 {
	if x != nil {
		return x.NumRemappedPgs
	}
	return 0
}

type CephStatusPGMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PgsByState []*CephStatusPGState `protobuf:"bytes,1,rep,name=pgs_by_state,json=pgsByState,proto3" json:"pgs_by_state,omitempty"`
	NumPgs     int32                `protobuf:"varint,2,opt,name=num_pgs,json=numPgs,proto3" json:"num_pgs,omitempty"`
	NumPools   int32                `protobuf:"varint,3,opt,name=num_pools,json=numPools,proto3" json:"num_pools,omitempty"`
	NumObjects int32                `protobuf:"varint,4,opt,name=num_objects,json=numObjects,proto3" json:"num_objects,omitempty"`
	DataBytes  int64                `protobuf:"varint,5,opt,name=data_bytes,json=dataBytes,proto3" json:"data_bytes,omitempty"`
	BytesUsed  int64                `protobuf:"varint,6,opt,name=bytes_used,json=bytesUsed,proto3" json:"bytes_used,omitempty"`
	BytesAvail int64                `protobuf:"varint,7,opt,name=bytes_avail,json=bytesAvail,proto3" json:"bytes_avail,omitempty"`
	BytesTotal int64                `protobuf:"varint,8,opt,name=bytes_total,json=bytesTotal,proto3" json:"bytes_total,omitempty"`
}

func (x *CephStatusPGMap) Reset() {
	*x = CephStatusPGMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusPGMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusPGMap) ProtoMessage() {}

func (x *CephStatusPGMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusPGMap.ProtoReflect.Descriptor instead.
func (*CephStatusPGMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{9}
}

func (x *CephStatusPGMap) GetPgsByState() []*CephStatusPGState {
	if x != nil {
		return x.PgsByState
	}
	return nil
}

func (x *CephStatusPGMap) GetNumPgs() int32 {
	if x != nil {
		return x.NumPgs
	}
	return 0
}

func (x *CephStatusPGMap) GetNumPools() int32 {
	if x != nil {
		return x.NumPools
	}
	return 0
}

func (x *CephStatusPGMap) GetNumObjects() int32 {
	if x != nil {
		return x.NumObjects
	}
	return 0
}

func (x *CephStatusPGMap) GetDataBytes() int64 {
	if x != nil {
		return x.DataBytes
	}
	return 0
}

func (x *CephStatusPGMap) GetBytesUsed() int64 {
	if x != nil {
		return x.BytesUsed
	}
	return 0
}

func (x *CephStatusPGMap) GetBytesAvail() int64 {
	if x != nil {
		return x.BytesAvail
	}
	return 0
}

func (x *CephStatusPGMap) GetBytesTotal() int64 {
	if x != nil {
		return x.BytesTotal
	}
	return 0
}

type CephStatusPGState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateName string `protobuf:"bytes,1,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
	Count     int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CephStatusPGState) Reset() {
	*x = CephStatusPGState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusPGState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusPGState) ProtoMessage() {}

func (x *CephStatusPGState) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusPGState.ProtoReflect.Descriptor instead.
func (*CephStatusPGState) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{10}
}

func (x *CephStatusPGState) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *CephStatusPGState) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CephStatusFSMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     int32             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ByRank    []*structpb.Value `protobuf:"bytes,2,rep,name=by_rank,json=byRank,proto3" json:"by_rank,omitempty"`
	UpStandby int32             `protobuf:"varint,3,opt,name=up_standby,json=upStandby,proto3" json:"up_standby,omitempty"`
}

func (x *CephStatusFSMap) Reset() {
	*x = CephStatusFSMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusFSMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusFSMap) ProtoMessage() {}

func (x *CephStatusFSMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusFSMap.ProtoReflect.Descriptor instead.
func (*CephStatusFSMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{11}
}

func (x *CephStatusFSMap) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CephStatusFSMap) GetByRank() []*structpb.Value {
	if x != nil {
		return x.ByRank
	}
	return nil
}

func (x *CephStatusFSMap) GetUpStandby() int32 {
	if x != nil {
		return x.UpStandby
	}
	return 0
}

type CephStatusMgrMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available   bool              `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	NumStandbys int32             `protobuf:"varint,2,opt,name=num_standbys,json=numStandbys,proto3" json:"num_standbys,omitempty"`
	Modules     []string          `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
	Services    map[string]string `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CephStatusMgrMap) Reset() {
	*x = CephStatusMgrMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusMgrMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusMgrMap) ProtoMessage() {}

func (x *CephStatusMgrMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusMgrMap.ProtoReflect.Descriptor instead.
func (*CephStatusMgrMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{12}
}

func (x *CephStatusMgrMap) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CephStatusMgrMap) GetNumStandbys() int32 {
	if x != nil {
		return x.NumStandbys
	}
	return 0
}

func (x *CephStatusMgrMap) GetModules() []string {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *CephStatusMgrMap) GetServices() map[string]string {
	if x != nil {
		return x.Services
	}
	return nil
}

type CephStatusServiceMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    int32                         `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Modified string                        `protobuf:"bytes,2,opt,name=modified,proto3" json:"modified,omitempty"`
	Services map[string]*CephStatusService `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CephStatusServiceMap) Reset() {
	*x = CephStatusServiceMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusServiceMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusServiceMap) ProtoMessage() {}

func (x *CephStatusServiceMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusServiceMap.ProtoReflect.Descriptor instead.
func (*CephStatusServiceMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{13}
}

func (x *CephStatusServiceMap) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CephStatusServiceMap) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *CephStatusServiceMap) GetServices() map[string]*CephStatusService {
	if x != nil {
		return x.Services
	}
	return nil
}

type CephStatusService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Daemons map[string]*structpb.Value `protobuf:"bytes,1,rep,name=daemons,proto3" json:"daemons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Summary string                     `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *CephStatusService) Reset() {
	*x = CephStatusService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusService) ProtoMessage() {}

func (x *CephStatusService) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusService.ProtoReflect.Descriptor instead.
func (*CephStatusService) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{14}
}

func (x *CephStatusService) GetDaemons() map[string]*structpb.Value {
	if x != nil {
		return x.Daemons
	}
	return nil
}

func (x *CephStatusService) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type GetCephOsdDumpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                  int32                                 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Fsid                   string                                `protobuf:"bytes,2,opt,name=fsid,proto3" json:"fsid,omitempty"`
	Created                *timestamppb.Timestamp                `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	Modified               *timestamppb.Timestamp                `protobuf:"bytes,4,opt,name=modified,proto3" json:"modified,omitempty"`
	LastUpChange           *timestamppb.Timestamp                `protobuf:"bytes,5,opt,name=last_up_change,json=lastUpChange,proto3" json:"last_up_change,omitempty"`
	LastInChange           *timestamppb.Timestamp                `protobuf:"bytes,6,opt,name=last_in_change,json=lastInChange,proto3" json:"last_in_change,omitempty"`
	Flags                  string                                `protobuf:"bytes,7,opt,name=flags,proto3" json:"flags,omitempty"`
	FlagsNum               int32                                 `protobuf:"varint,8,opt,name=flags_num,json=flagsNum,proto3" json:"flags_num,omitempty"`
	FlagsSet               []string                              `protobuf:"bytes,9,rep,name=flags_set,json=flagsSet,proto3" json:"flags_set,omitempty"`
	CrushVersion           int32                                 `protobuf:"varint,10,opt,name=crush_version,json=crushVersion,proto3" json:"crush_version,omitempty"`
	FullRatio              float64                               `protobuf:"fixed64,11,opt,name=full_ratio,json=fullRatio,proto3" json:"full_ratio,omitempty"`
	BackfillfullRatio      float64                               `protobuf:"fixed64,12,opt,name=backfillfull_ratio,json=backfillfullRatio,proto3" json:"backfillfull_ratio,omitempty"`
	NearfullRatio          float64                               `protobuf:"fixed64,13,opt,name=nearfull_ratio,json=nearfullRatio,proto3" json:"nearfull_ratio,omitempty"`
	ClusterSnapshot        string                                `protobuf:"bytes,14,opt,name=cluster_snapshot,json=clusterSnapshot,proto3" json:"cluster_snapshot,omitempty"`
	PoolMax                int32                                 `protobuf:"varint,15,opt,name=pool_max,json=poolMax,proto3" json:"pool_max,omitempty"`
	MaxOsd                 int32                                 `protobuf:"varint,16,opt,name=max_osd,json=maxOsd,proto3" json:"max_osd,omitempty"`
	RequireMinCompatClient string                                `protobuf:"bytes,17,opt,name=require_min_compat_client,json=requireMinCompatClient,proto3" json:"require_min_compat_client,omitempty"`
	MinCompatClient        string                                `protobuf:"bytes,18,opt,name=min_compat_client,json=minCompatClient,proto3" json:"min_compat_client,omitempty"`
	RequireOsdRelease      string                                `protobuf:"bytes,19,opt,name=require_osd_release,json=requireOsdRelease,proto3" json:"require_osd_release,omitempty"`
	AllowCrimson           bool                                  `protobuf:"varint,20,opt,name=allow_crimson,json=allowCrimson,proto3" json:"allow_crimson,omitempty"`
	Pools                  []*OsdDumpPool                        `protobuf:"bytes,21,rep,name=pools,proto3" json:"pools,omitempty"`
	Osds                   []*OsdDumpOsdInfo                     `protobuf:"bytes,22,rep,name=osds,proto3" json:"osds,omitempty"`
	OsdXinfo               []*OsdDumpOsdXInfo                    `protobuf:"bytes,23,rep,name=osd_xinfo,json=osdXinfo,proto3" json:"osd_xinfo,omitempty"`
	PgUpmap                []*structpb.Value                     `protobuf:"bytes,24,rep,name=pg_upmap,json=pgUpmap,proto3" json:"pg_upmap,omitempty"`
	PgUpmapItems           []*structpb.Value                     `protobuf:"bytes,25,rep,name=pg_upmap_items,json=pgUpmapItems,proto3" json:"pg_upmap_items,omitempty"`
	PgUpmapPrimaries       []*structpb.Value                     `protobuf:"bytes,26,rep,name=pg_upmap_primaries,json=pgUpmapPrimaries,proto3" json:"pg_upmap_primaries,omitempty"`
	PgTemp                 []*structpb.Value                     `protobuf:"bytes,27,rep,name=pg_temp,json=pgTemp,proto3" json:"pg_temp,omitempty"`
	PrimaryTemp            []*structpb.Value                     `protobuf:"bytes,28,rep,name=primary_temp,json=primaryTemp,proto3" json:"primary_temp,omitempty"`
	Blocklist              map[string]*timestamppb.Timestamp     `protobuf:"bytes,29,rep,name=blocklist,proto3" json:"blocklist,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RangeBlocklist         *structpb.Struct                      `protobuf:"bytes,30,opt,name=range_blocklist,json=rangeBlocklist,proto3" json:"range_blocklist,omitempty"`
	ErasureCodeProfiles    map[string]*OsdDumpErasureCodeProfile `protobuf:"bytes,31,rep,name=erasure_code_profiles,json=erasureCodeProfiles,proto3" json:"erasure_code_profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RemovedSnapsQueue      []*structpb.Value                     `protobuf:"bytes,32,rep,name=removed_snaps_queue,json=removedSnapsQueue,proto3" json:"removed_snaps_queue,omitempty"`
	NewRemovedSnaps        []*structpb.Value                     `protobuf:"bytes,33,rep,name=new_removed_snaps,json=newRemovedSnaps,proto3" json:"new_removed_snaps,omitempty"`
	NewPurgedSnaps         []*structpb.Value                     `protobuf:"bytes,34,rep,name=new_purged_snaps,json=newPurgedSnaps,proto3" json:"new_purged_snaps,omitempty"`
	CrushNodeFlags         *structpb.Struct                      `protobuf:"bytes,35,opt,name=crush_node_flags,json=crushNodeFlags,proto3" json:"crush_node_flags,omitempty"`
	DeviceClassFlags       *structpb.Struct                      `protobuf:"bytes,36,opt,name=device_class_flags,json=deviceClassFlags,proto3" json:"device_class_flags,omitempty"`
	StretchMode            *OsdDumpStretchMode                   `protobuf:"bytes,37,opt,name=stretch_mode,json=stretchMode,proto3" json:"stretch_mode,omitempty"`
}

func (x *GetCephOsdDumpResponse) Reset() {
	*x = GetCephOsdDumpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCephOsdDumpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCephOsdDumpResponse) ProtoMessage() {}

func (x *GetCephOsdDumpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCephOsdDumpResponse.ProtoReflect.Descriptor instead.
func (*GetCephOsdDumpResponse) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{15}
}

func (x *GetCephOsdDumpResponse) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *GetCephOsdDumpResponse) GetFsid() string {
	if x != nil {
		return x.Fsid
	}
	return ""
}

func (x *GetCephOsdDumpResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetLastUpChange() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpChange
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetLastInChange() *timestamppb.Timestamp {
	if x != nil {
		return x.LastInChange
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetFlags() string {
	if x != nil {
		return x.Flags
	}
	return ""
}

func (x *GetCephOsdDumpResponse) GetFlagsNum() int32 {
	if x != nil {
		return x.FlagsNum
	}
	return 0
}

func (x *GetCephOsdDumpResponse) GetFlagsSet() []string {
	if x != nil {
		return x.FlagsSet
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetCrushVersion() int32 {
	if x != nil {
		return x.CrushVersion
	}
	return 0
}

func (x *GetCephOsdDumpResponse) GetFullRatio() float64 {
	if x != nil {
		return x.FullRatio
	}
	return 0
}

func (x *GetCephOsdDumpResponse) GetBackfillfullRatio() float64 {
	if x != nil {
		return x.BackfillfullRatio
	}
	return 0
}

func (x *GetCephOsdDumpResponse) GetNearfullRatio() float64 {
	if x != nil {
		return x.NearfullRatio
	}
	return 0
}

func (x *GetCephOsdDumpResponse) GetClusterSnapshot() string {
	if x != nil {
		return x.ClusterSnapshot
	}
	return ""
}

func (x *GetCephOsdDumpResponse) GetPoolMax() int32 {
	if x != nil {
		return x.PoolMax
	}
	return 0
}

func (x *GetCephOsdDumpResponse) GetMaxOsd() int32 {
	if x != nil {
		return x.MaxOsd
	}
	return 0
}

func (x *GetCephOsdDumpResponse) GetRequireMinCompatClient() string {
	if x != nil {
		return x.RequireMinCompatClient
	}
	return ""
}

func (x *GetCephOsdDumpResponse) GetMinCompatClient() string {
	if x != nil {
		return x.MinCompatClient
	}
	return ""
}

func (x *GetCephOsdDumpResponse) GetRequireOsdRelease() string {
	if x != nil {
		return x.RequireOsdRelease
	}
	return ""
}

func (x *GetCephOsdDumpResponse) GetAllowCrimson() bool {
	if x != nil {
		return x.AllowCrimson
	}
	return false
}

func (x *GetCephOsdDumpResponse) GetPools() []*OsdDumpPool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetOsds() []*OsdDumpOsdInfo {
	if x != nil {
		return x.Osds
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetOsdXinfo() []*OsdDumpOsdXInfo {
	if x != nil {
		return x.OsdXinfo
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetPgUpmap() []*structpb.Value {
	if x != nil {
		return x.PgUpmap
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetPgUpmapItems() []*structpb.Value {
	if x != nil {
		return x.PgUpmapItems
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetPgUpmapPrimaries() []*structpb.Value {
	if x != nil {
		return x.PgUpmapPrimaries
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetPgTemp() []*structpb.Value {
	if x != nil {
		return x.PgTemp
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetPrimaryTemp() []*structpb.Value {
	if x != nil {
		return x.PrimaryTemp
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetBlocklist() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.Blocklist
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetRangeBlocklist() *structpb.Struct {
	if x != nil {
		return x.RangeBlocklist
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetErasureCodeProfiles() map[string]*OsdDumpErasureCodeProfile {
	if x != nil {
		return x.ErasureCodeProfiles
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetRemovedSnapsQueue() []*structpb.Value {
	if x != nil {
		return x.RemovedSnapsQueue
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetNewRemovedSnaps() []*structpb.Value {
	if x != nil {
		return x.NewRemovedSnaps
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetNewPurgedSnaps() []*structpb.Value {
	if x != nil {
		return x.NewPurgedSnaps
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetCrushNodeFlags() *structpb.Struct {
	if x != nil {
		return x.CrushNodeFlags
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetDeviceClassFlags() *structpb.Struct {
	if x != nil {
		return x.DeviceClassFlags
	}
	return nil
}

func (x *GetCephOsdDumpResponse) GetStretchMode() *OsdDumpStretchMode {
	if x != nil {
		return x.StretchMode
	}
	return nil
}

type OsdDumpPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool                              int32                   `protobuf:"varint,1,opt,name=pool,proto3" json:"pool,omitempty"`
	PoolName                          string                  `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	CreateTime                        *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Flags                             int64                   `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	FlagsNames                        string                  `protobuf:"bytes,5,opt,name=flags_names,json=flagsNames,proto3" json:"flags_names,omitempty"`
	Type                              int32                   `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Size                              int32                   `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	MinSize                           int32                   `protobuf:"varint,8,opt,name=min_size,json=minSize,proto3" json:"min_size,omitempty"`
	CrushRule                         int32                   `protobuf:"varint,9,opt,name=crush_rule,json=crushRule,proto3" json:"crush_rule,omitempty"`
	PeeringCrushBucketCount           int32                   `protobuf:"varint,10,opt,name=peering_crush_bucket_count,json=peeringCrushBucketCount,proto3" json:"peering_crush_bucket_count,omitempty"`
	PeeringCrushBucketTarget          int32                   `protobuf:"varint,11,opt,name=peering_crush_bucket_target,json=peeringCrushBucketTarget,proto3" json:"peering_crush_bucket_target,omitempty"`
	PeeringCrushBucketBarrier         int32                   `protobuf:"varint,12,opt,name=peering_crush_bucket_barrier,json=peeringCrushBucketBarrier,proto3" json:"peering_crush_bucket_barrier,omitempty"`
	PeeringCrushBucketMandatoryMember int32                   `protobuf:"varint,13,opt,name=peering_crush_bucket_mandatory_member,json=peeringCrushBucketMandatoryMember,proto3" json:"peering_crush_bucket_mandatory_member,omitempty"`
	ObjectHash                        int32                   `protobuf:"varint,14,opt,name=object_hash,json=objectHash,proto3" json:"object_hash,omitempty"`
	PgAutoscaleMode                   string                  `protobuf:"bytes,15,opt,name=pg_autoscale_mode,json=pgAutoscaleMode,proto3" json:"pg_autoscale_mode,omitempty"`
	PgNum                             int32                   `protobuf:"varint,16,opt,name=pg_num,json=pgNum,proto3" json:"pg_num,omitempty"`
	PgPlacementNum                    int32                   `protobuf:"varint,17,opt,name=pg_placement_num,json=pgPlacementNum,proto3" json:"pg_placement_num,omitempty"`
	PgPlacementNumTarget              int32                   `protobuf:"varint,18,opt,name=pg_placement_num_target,json=pgPlacementNumTarget,proto3" json:"pg_placement_num_target,omitempty"`
	PgNumTarget                       int32                   `protobuf:"varint,19,opt,name=pg_num_target,json=pgNumTarget,proto3" json:"pg_num_target,omitempty"`
	PgNumPending                      int32                   `protobuf:"varint,20,opt,name=pg_num_pending,json=pgNumPending,proto3" json:"pg_num_pending,omitempty"`
	LastPgMergeMeta                   *OsdDumpLastPgMergeMeta `protobuf:"bytes,21,opt,name=last_pg_merge_meta,json=lastPgMergeMeta,proto3" json:"last_pg_merge_meta,omitempty"`
	LastChange                        string                  `protobuf:"bytes,22,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	LastForceOpResend                 string                  `protobuf:"bytes,23,opt,name=last_force_op_resend,json=lastForceOpResend,proto3" json:"last_force_op_resend,omitempty"`
	LastForceOpResendPrenautilus      string                  `protobuf:"bytes,24,opt,name=last_force_op_resend_prenautilus,json=lastForceOpResendPrenautilus,proto3" json:"last_force_op_resend_prenautilus,omitempty"`
	LastForceOpResendPreluminous      string                  `protobuf:"bytes,25,opt,name=last_force_op_resend_preluminous,json=lastForceOpResendPreluminous,proto3" json:"last_force_op_resend_preluminous,omitempty"`
	Auid                              uint64                  `protobuf:"varint,26,opt,name=auid,proto3" json:"auid,omitempty"`
	SnapMode                          string                  `protobuf:"bytes,27,opt,name=snap_mode,json=snapMode,proto3" json:"snap_mode,omitempty"`
	SnapSeq                           uint64                  `protobuf:"varint,28,opt,name=snap_seq,json=snapSeq,proto3" json:"snap_seq,omitempty"`
	SnapEpoch                         uint64                  `protobuf:"varint,29,opt,name=snap_epoch,json=snapEpoch,proto3" json:"snap_epoch,omitempty"`
	PoolSnaps                         []*structpb.Value       `protobuf:"bytes,30,rep,name=pool_snaps,json=poolSnaps,proto3" json:"pool_snaps,omitempty"`
	RemovedSnaps                      string                  `protobuf:"bytes,31,opt,name=removed_snaps,json=removedSnaps,proto3" json:"removed_snaps,omitempty"`
	QuotaMaxBytes                     uint64                  `protobuf:"varint,32,opt,name=quota_max_bytes,json=quotaMaxBytes,proto3" json:"quota_max_bytes,omitempty"`
	QuotaMaxObjects                   uint64                  `protobuf:"varint,33,opt,name=quota_max_objects,json=quotaMaxObjects,proto3" json:"quota_max_objects,omitempty"`
	Tiers                             []int32                 `protobuf:"varint,34,rep,packed,name=tiers,proto3" json:"tiers,omitempty"`
	TierOf                            int32                   `protobuf:"varint,35,opt,name=tier_of,json=tierOf,proto3" json:"tier_of,omitempty"`
	ReadTier                          int32                   `protobuf:"varint,36,opt,name=read_tier,json=readTier,proto3" json:"read_tier,omitempty"`
	WriteTier                         int32                   `protobuf:"varint,37,opt,name=write_tier,json=writeTier,proto3" json:"write_tier,omitempty"`
	CacheMode                         string                  `protobuf:"bytes,38,opt,name=cache_mode,json=cacheMode,proto3" json:"cache_mode,omitempty"`
	TargetMaxBytes                    uint64                  `protobuf:"varint,39,opt,name=target_max_bytes,json=targetMaxBytes,proto3" json:"target_max_bytes,omitempty"`
	TargetMaxObjects                  uint64                  `protobuf:"varint,40,opt,name=target_max_objects,json=targetMaxObjects,proto3" json:"target_max_objects,omitempty"`
	CacheTargetDirtyRatioMicro        uint64                  `protobuf:"varint,41,opt,name=cache_target_dirty_ratio_micro,json=cacheTargetDirtyRatioMicro,proto3" json:"cache_target_dirty_ratio_micro,omitempty"`
	CacheTargetDirtyHighRatioMicro    uint64                  `protobuf:"varint,42,opt,name=cache_target_dirty_high_ratio_micro,json=cacheTargetDirtyHighRatioMicro,proto3" json:"cache_target_dirty_high_ratio_micro,omitempty"`
	CacheTargetFullRatioMicro         uint64                  `protobuf:"varint,43,opt,name=cache_target_full_ratio_micro,json=cacheTargetFullRatioMicro,proto3" json:"cache_target_full_ratio_micro,omitempty"`
	CacheMinFlushAge                  uint64                  `protobuf:"varint,44,opt,name=cache_min_flush_age,json=cacheMinFlushAge,proto3" json:"cache_min_flush_age,omitempty"`
	CacheMinEvictAge                  uint64                  `protobuf:"varint,45,opt,name=cache_min_evict_age,json=cacheMinEvictAge,proto3" json:"cache_min_evict_age,omitempty"`
	ErasureCodeProfile                string                  `protobuf:"bytes,46,opt,name=erasure_code_profile,json=erasureCodeProfile,proto3" json:"erasure_code_profile,omitempty"`
	HitSetParams                      *OsdDumpHitSetParams    `protobuf:"bytes,47,opt,name=hit_set_params,json=hitSetParams,proto3" json:"hit_set_params,omitempty"`
	HitSetPeriod                      uint64                  `protobuf:"varint,48,opt,name=hit_set_period,json=hitSetPeriod,proto3" json:"hit_set_period,omitempty"`
	HitSetCount                       uint64                  `protobuf:"varint,49,opt,name=hit_set_count,json=hitSetCount,proto3" json:"hit_set_count,omitempty"`
	UseGmtHitset                      bool                    `protobuf:"varint,50,opt,name=use_gmt_hitset,json=useGmtHitset,proto3" json:"use_gmt_hitset,omitempty"`
	MinReadRecencyForPromote          uint64                  `protobuf:"varint,51,opt,name=min_read_recency_for_promote,json=minReadRecencyForPromote,proto3" json:"min_read_recency_for_promote,omitempty"`
	MinWriteRecencyForPromote         uint64                  `protobuf:"varint,52,opt,name=min_write_recency_for_promote,json=minWriteRecencyForPromote,proto3" json:"min_write_recency_for_promote,omitempty"`
	HitSetGradeDecayRate              uint64                  `protobuf:"varint,53,opt,name=hit_set_grade_decay_rate,json=hitSetGradeDecayRate,proto3" json:"hit_set_grade_decay_rate,omitempty"`
	HitSetSearchLastN                 uint64                  `protobuf:"varint,54,opt,name=hit_set_search_last_n,json=hitSetSearchLastN,proto3" json:"hit_set_search_last_n,omitempty"`
	GradeTable                        []*structpb.Value       `protobuf:"bytes,55,rep,name=grade_table,json=gradeTable,proto3" json:"grade_table,omitempty"`
	StripeWidth                       uint64                  `protobuf:"varint,56,opt,name=stripe_width,json=stripeWidth,proto3" json:"stripe_width,omitempty"`
	ExpectedNumObjects                uint64                  `protobuf:"varint,57,opt,name=expected_num_objects,json=expectedNumObjects,proto3" json:"expected_num_objects,omitempty"`
	FastRead                          bool                    `protobuf:"varint,58,opt,name=fast_read,json=fastRead,proto3" json:"fast_read,omitempty"`
	Options                           *structpb.Struct        `protobuf:"bytes,59,opt,name=options,proto3" json:"options,omitempty"`
	ApplicationMetadata               *structpb.Struct        `protobuf:"bytes,60,opt,name=application_metadata,json=applicationMetadata,proto3" json:"application_metadata,omitempty"`
	ReadBalance                       *OsdDumpReadBalance     `protobuf:"bytes,61,opt,name=read_balance,json=readBalance,proto3" json:"read_balance,omitempty"`
}

func (x *OsdDumpPool) Reset() {
	*x = OsdDumpPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpPool) ProtoMessage() {}

func (x *OsdDumpPool) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpPool.ProtoReflect.Descriptor instead.
func (*OsdDumpPool) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{16}
}

func (x *OsdDumpPool) GetPool() int32 {
	if x != nil {
		return x.Pool
	}
	return 0
}

func (x *OsdDumpPool) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *OsdDumpPool) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OsdDumpPool) GetFlags() int64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *OsdDumpPool) GetFlagsNames() string {
	if x != nil {
		return x.FlagsNames
	}
	return ""
}

func (x *OsdDumpPool) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OsdDumpPool) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OsdDumpPool) GetMinSize() int32 {
	if x != nil {
		return x.MinSize
	}
	return 0
}

func (x *OsdDumpPool) GetCrushRule() int32 {
	if x != nil {
		return x.CrushRule
	}
	return 0
}

func (x *OsdDumpPool) GetPeeringCrushBucketCount() int32 {
	if x != nil {
		return x.PeeringCrushBucketCount
	}
	return 0
}

func (x *OsdDumpPool) GetPeeringCrushBucketTarget() int32 {
	if x != nil {
		return x.PeeringCrushBucketTarget
	}
	return 0
}

func (x *OsdDumpPool) GetPeeringCrushBucketBarrier() int32 {
	if x != nil {
		return x.PeeringCrushBucketBarrier
	}
	return 0
}

func (x *OsdDumpPool) GetPeeringCrushBucketMandatoryMember() int32 {
	if x != nil {
		return x.PeeringCrushBucketMandatoryMember
	}
	return 0
}

func (x *OsdDumpPool) GetObjectHash() int32 {
	if x != nil {
		return x.ObjectHash
	}
	return 0
}

func (x *OsdDumpPool) GetPgAutoscaleMode() string {
	if x != nil {
		return x.PgAutoscaleMode
	}
	return ""
}

func (x *OsdDumpPool) GetPgNum() int32 {
	if x != nil {
		return x.PgNum
	}
	return 0
}

func (x *OsdDumpPool) GetPgPlacementNum() int32 {
	if x != nil {
		return x.PgPlacementNum
	}
	return 0
}

func (x *OsdDumpPool) GetPgPlacementNumTarget() int32 {
	if x != nil {
		return x.PgPlacementNumTarget
	}
	return 0
}

func (x *OsdDumpPool) GetPgNumTarget() int32 {
	if x != nil {
		return x.PgNumTarget
	}
	return 0
}

func (x *OsdDumpPool) GetPgNumPending() int32 {
	if x != nil {
		return x.PgNumPending
	}
	return 0
}

func (x *OsdDumpPool) GetLastPgMergeMeta() *OsdDumpLastPgMergeMeta {
	if x != nil {
		return x.LastPgMergeMeta
	}
	return nil
}

func (x *OsdDumpPool) GetLastChange() string {
	if x != nil {
		return x.LastChange
	}
	return ""
}

func (x *OsdDumpPool) GetLastForceOpResend() string {
	if x != nil {
		return x.LastForceOpResend
	}
	return ""
}

func (x *OsdDumpPool) GetLastForceOpResendPrenautilus() string {
	if x != nil {
		return x.LastForceOpResendPrenautilus
	}
	return ""
}

func (x *OsdDumpPool) GetLastForceOpResendPreluminous() string {
	if x != nil {
		return x.LastForceOpResendPreluminous
	}
	return ""
}

func (x *OsdDumpPool) GetAuid() uint64 {
	if x != nil {
		return x.Auid
	}
	return 0
}

func (x *OsdDumpPool) GetSnapMode() string {
	if x != nil {
		return x.SnapMode
	}
	return ""
}

func (x *OsdDumpPool) GetSnapSeq() uint64 {
	if x != nil {
		return x.SnapSeq
	}
	return 0
}

func (x *OsdDumpPool) GetSnapEpoch() uint64 {
	if x != nil {
		return x.SnapEpoch
	}
	return 0
}

func (x *OsdDumpPool) GetPoolSnaps() []*structpb.Value {
	if x != nil {
		return x.PoolSnaps
	}
	return nil
}

func (x *OsdDumpPool) GetRemovedSnaps() string {
	if x != nil {
		return x.RemovedSnaps
	}
	return ""
}

func (x *OsdDumpPool) GetQuotaMaxBytes() uint64 {
	if x != nil {
		return x.QuotaMaxBytes
	}
	return 0
}

func (x *OsdDumpPool) GetQuotaMaxObjects() uint64 {
	if x != nil {
		return x.QuotaMaxObjects
	}
	return 0
}

func (x *OsdDumpPool) GetTiers() []int32 {
	if x != nil {
		return x.Tiers
	}
	return nil
}

func (x *OsdDumpPool) GetTierOf() int32 {
	if x != nil {
		return x.TierOf
	}
	return 0
}

func (x *OsdDumpPool) GetReadTier() int32 {
	if x != nil {
		return x.ReadTier
	}
	return 0
}

func (x *OsdDumpPool) GetWriteTier() int32 {
	if x != nil {
		return x.WriteTier
	}
	return 0
}

func (x *OsdDumpPool) GetCacheMode() string {
	if x != nil {
		return x.CacheMode
	}
	return ""
}

func (x *OsdDumpPool) GetTargetMaxBytes() uint64 {
	if x != nil {
		return x.TargetMaxBytes
	}
	return 0
}

func (x *OsdDumpPool) GetTargetMaxObjects() uint64 {
	if x != nil {
		return x.TargetMaxObjects
	}
	return 0
}

func (x *OsdDumpPool) GetCacheTargetDirtyRatioMicro() uint64 {
	if x != nil {
		return x.CacheTargetDirtyRatioMicro
	}
	return 0
}

func (x *OsdDumpPool) GetCacheTargetDirtyHighRatioMicro() uint64 {
	if x != nil {
		return x.CacheTargetDirtyHighRatioMicro
	}
	return 0
}

func (x *OsdDumpPool) GetCacheTargetFullRatioMicro() uint64 {
	if x != nil {
		return x.CacheTargetFullRatioMicro
	}
	return 0
}

func (x *OsdDumpPool) GetCacheMinFlushAge() uint64 {
	if x != nil {
		return x.CacheMinFlushAge
	}
	return 0
}

func (x *OsdDumpPool) GetCacheMinEvictAge() uint64 {
	if x != nil {
		return x.CacheMinEvictAge
	}
	return 0
}

func (x *OsdDumpPool) GetErasureCodeProfile() string {
	if x != nil {
		return x.ErasureCodeProfile
	}
	return ""
}

func (x *OsdDumpPool) GetHitSetParams() *OsdDumpHitSetParams {
	if x != nil {
		return x.HitSetParams
	}
	return nil
}

func (x *OsdDumpPool) GetHitSetPeriod() uint64 {
	if x != nil {
		return x.HitSetPeriod
	}
	return 0
}

func (x *OsdDumpPool) GetHitSetCount() uint64 {
	if x != nil {
		return x.HitSetCount
	}
	return 0
}

func (x *OsdDumpPool) GetUseGmtHitset() bool {
	if x != nil {
		return x.UseGmtHitset
	}
	return false
}

func (x *OsdDumpPool) GetMinReadRecencyForPromote() uint64 {
	if x != nil {
		return x.MinReadRecencyForPromote
	}
	return 0
}

func (x *OsdDumpPool) GetMinWriteRecencyForPromote() uint64 {
	if x != nil {
		return x.MinWriteRecencyForPromote
	}
	return 0
}

func (x *OsdDumpPool) GetHitSetGradeDecayRate() uint64 {
	if x != nil {
		return x.HitSetGradeDecayRate
	}
	return 0
}

func (x *OsdDumpPool) GetHitSetSearchLastN() uint64 {
	if x != nil {
		return x.HitSetSearchLastN
	}
	return 0
}

func (x *OsdDumpPool) GetGradeTable() []*structpb.Value {
	if x != nil {
		return x.GradeTable
	}
	return nil
}

func (x *OsdDumpPool) GetStripeWidth() uint64 {
	if x != nil {
		return x.StripeWidth
	}
	return 0
}

func (x *OsdDumpPool) GetExpectedNumObjects() uint64 {
	if x != nil {
		return x.ExpectedNumObjects
	}
	return 0
}

func (x *OsdDumpPool) GetFastRead() bool {
	if x != nil {
		return x.FastRead
	}
	return false
}

func (x *OsdDumpPool) GetOptions() *structpb.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *OsdDumpPool) GetApplicationMetadata() *structpb.Struct {
	if x != nil {
		return x.ApplicationMetadata
	}
	return nil
}

func (x *OsdDumpPool) GetReadBalance() *OsdDumpReadBalance {
	if x != nil {
		return x.ReadBalance
	}
	return nil
}

type OsdDumpLastPgMergeMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePgid       string `protobuf:"bytes,1,opt,name=source_pgid,json=sourcePgid,proto3" json:"source_pgid,omitempty"`
	ReadyEpoch       int32  `protobuf:"varint,2,opt,name=ready_epoch,json=readyEpoch,proto3" json:"ready_epoch,omitempty"`
	LastEpochStarted int32  `protobuf:"varint,3,opt,name=last_epoch_started,json=lastEpochStarted,proto3" json:"last_epoch_started,omitempty"`
	LastEpochClean   int32  `protobuf:"varint,4,opt,name=last_epoch_clean,json=lastEpochClean,proto3" json:"last_epoch_clean,omitempty"`
	SourceVersion    string `protobuf:"bytes,5,opt,name=source_version,json=sourceVersion,proto3" json:"source_version,omitempty"`
	TargetVersion    string `protobuf:"bytes,6,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"`
}

func (x *OsdDumpLastPgMergeMeta) Reset() {
	*x = OsdDumpLastPgMergeMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpLastPgMergeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpLastPgMergeMeta) ProtoMessage() {}

func (x *OsdDumpLastPgMergeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpLastPgMergeMeta.ProtoReflect.Descriptor instead.
func (*OsdDumpLastPgMergeMeta) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{17}
}

func (x *OsdDumpLastPgMergeMeta) GetSourcePgid() string {
	if x != nil {
		return x.SourcePgid
	}
	return ""
}

func (x *OsdDumpLastPgMergeMeta) GetReadyEpoch() int32 {
	if x != nil {
		return x.ReadyEpoch
	}
	return 0
}

func (x *OsdDumpLastPgMergeMeta) GetLastEpochStarted() int32 {
	if x != nil {
		return x.LastEpochStarted
	}
	return 0
}

func (x *OsdDumpLastPgMergeMeta) GetLastEpochClean() int32 {
	if x != nil {
		return x.LastEpochClean
	}
	return 0
}

func (x *OsdDumpLastPgMergeMeta) GetSourceVersion() string {
	if x != nil {
		return x.SourceVersion
	}
	return ""
}

func (x *OsdDumpLastPgMergeMeta) GetTargetVersion() string {
	if x != nil {
		return x.TargetVersion
	}
	return ""
}

type OsdDumpHitSetParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *OsdDumpHitSetParams) Reset() {
	*x = OsdDumpHitSetParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpHitSetParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpHitSetParams) ProtoMessage() {}

func (x *OsdDumpHitSetParams) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpHitSetParams.ProtoReflect.Descriptor instead.
func (*OsdDumpHitSetParams) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{18}
}

func (x *OsdDumpHitSetParams) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type OsdDumpReadBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreActing                    float64 `protobuf:"fixed64,1,opt,name=score_acting,json=scoreActing,proto3" json:"score_acting,omitempty"`
	ScoreStable                    float64 `protobuf:"fixed64,2,opt,name=score_stable,json=scoreStable,proto3" json:"score_stable,omitempty"`
	OptimalScore                   float64 `protobuf:"fixed64,3,opt,name=optimal_score,json=optimalScore,proto3" json:"optimal_score,omitempty"`
	RawScoreActing                 float64 `protobuf:"fixed64,4,opt,name=raw_score_acting,json=rawScoreActing,proto3" json:"raw_score_acting,omitempty"`
	RawScoreStable                 float64 `protobuf:"fixed64,5,opt,name=raw_score_stable,json=rawScoreStable,proto3" json:"raw_score_stable,omitempty"`
	PrimaryAffinityWeighted        float64 `protobuf:"fixed64,6,opt,name=primary_affinity_weighted,json=primaryAffinityWeighted,proto3" json:"primary_affinity_weighted,omitempty"`
	AveragePrimaryAffinity         float64 `protobuf:"fixed64,7,opt,name=average_primary_affinity,json=averagePrimaryAffinity,proto3" json:"average_primary_affinity,omitempty"`
	AveragePrimaryAffinityWeighted float64 `protobuf:"fixed64,8,opt,name=average_primary_affinity_weighted,json=averagePrimaryAffinityWeighted,proto3" json:"average_primary_affinity_weighted,omitempty"`
}

func (x *OsdDumpReadBalance) Reset() {
	*x = OsdDumpReadBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpReadBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpReadBalance) ProtoMessage() {}

func (x *OsdDumpReadBalance) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpReadBalance.ProtoReflect.Descriptor instead.
func (*OsdDumpReadBalance) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{19}
}

func (x *OsdDumpReadBalance) GetScoreActing() float64 {
	if x != nil {
		return x.ScoreActing
	}
	return 0
}

func (x *OsdDumpReadBalance) GetScoreStable() float64 {
	if x != nil {
		return x.ScoreStable
	}
	return 0
}

func (x *OsdDumpReadBalance) GetOptimalScore() float64 {
	if x != nil {
		return x.OptimalScore
	}
	return 0
}

func (x *OsdDumpReadBalance) GetRawScoreActing() float64 {
	if x != nil {
		return x.RawScoreActing
	}
	return 0
}

func (x *OsdDumpReadBalance) GetRawScoreStable() float64 {
	if x != nil {
		return x.RawScoreStable
	}
	return 0
}

func (x *OsdDumpReadBalance) GetPrimaryAffinityWeighted() float64 {
	if x != nil {
		return x.PrimaryAffinityWeighted
	}
	return 0
}

func (x *OsdDumpReadBalance) GetAveragePrimaryAffinity() float64 {
	if x != nil {
		return x.AveragePrimaryAffinity
	}
	return 0
}

func (x *OsdDumpReadBalance) GetAveragePrimaryAffinityWeighted() float64 {
	if x != nil {
		return x.AveragePrimaryAffinityWeighted
	}
	return 0
}

type OsdDumpOsdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Osd                 int32                  `protobuf:"varint,1,opt,name=osd,proto3" json:"osd,omitempty"`
	Uuid                string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Up                  int32                  `protobuf:"varint,3,opt,name=up,proto3" json:"up,omitempty"`
	In                  int32                  `protobuf:"varint,4,opt,name=in,proto3" json:"in,omitempty"`
	Weight              float64                `protobuf:"fixed64,5,opt,name=weight,proto3" json:"weight,omitempty"`
	PrimaryAffinity     float64                `protobuf:"fixed64,6,opt,name=primary_affinity,json=primaryAffinity,proto3" json:"primary_affinity,omitempty"`
	LastCleanBegin      int32                  `protobuf:"varint,7,opt,name=last_clean_begin,json=lastCleanBegin,proto3" json:"last_clean_begin,omitempty"`
	LastCleanEnd        int32                  `protobuf:"varint,8,opt,name=last_clean_end,json=lastCleanEnd,proto3" json:"last_clean_end,omitempty"`
	UpFrom              int32                  `protobuf:"varint,9,opt,name=up_from,json=upFrom,proto3" json:"up_from,omitempty"`
	UpThru              int32                  `protobuf:"varint,10,opt,name=up_thru,json=upThru,proto3" json:"up_thru,omitempty"`
	DownAt              int32                  `protobuf:"varint,11,opt,name=down_at,json=downAt,proto3" json:"down_at,omitempty"`
	LostAt              int32                  `protobuf:"varint,12,opt,name=lost_at,json=lostAt,proto3" json:"lost_at,omitempty"`
	PublicAddrs         *OsdDumpPublicAddrs    `protobuf:"bytes,13,opt,name=public_addrs,json=publicAddrs,proto3" json:"public_addrs,omitempty"`
	ClusterAddrs        *OsdDumpClusterAddrs   `protobuf:"bytes,14,opt,name=cluster_addrs,json=clusterAddrs,proto3" json:"cluster_addrs,omitempty"`
	HeartbeatBackAddrs  *OsdDumpHeartbeatAddrs `protobuf:"bytes,15,opt,name=heartbeat_back_addrs,json=heartbeatBackAddrs,proto3" json:"heartbeat_back_addrs,omitempty"`
	HeartbeatFrontAddrs *OsdDumpHeartbeatAddrs `protobuf:"bytes,16,opt,name=heartbeat_front_addrs,json=heartbeatFrontAddrs,proto3" json:"heartbeat_front_addrs,omitempty"`
	PublicAddr          string                 `protobuf:"bytes,17,opt,name=public_addr,json=publicAddr,proto3" json:"public_addr,omitempty"`
	ClusterAddr         string                 `protobuf:"bytes,18,opt,name=cluster_addr,json=clusterAddr,proto3" json:"cluster_addr,omitempty"`
	HeartbeatBackAddr   string                 `protobuf:"bytes,19,opt,name=heartbeat_back_addr,json=heartbeatBackAddr,proto3" json:"heartbeat_back_addr,omitempty"`
	HeartbeatFrontAddr  string                 `protobuf:"bytes,20,opt,name=heartbeat_front_addr,json=heartbeatFrontAddr,proto3" json:"heartbeat_front_addr,omitempty"`
	State               []string               `protobuf:"bytes,21,rep,name=state,proto3" json:"state,omitempty"`
}

func (x *OsdDumpOsdInfo) Reset() {
	*x = OsdDumpOsdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpOsdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpOsdInfo) ProtoMessage() {}

func (x *OsdDumpOsdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpOsdInfo.ProtoReflect.Descriptor instead.
func (*OsdDumpOsdInfo) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{20}
}

func (x *OsdDumpOsdInfo) GetOsd() int32 {
	if x != nil {
		return x.Osd
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OsdDumpOsdInfo) GetUp() int32 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetIn() int32 {
	if x != nil {
		return x.In
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetPrimaryAffinity() float64 {
	if x != nil {
		return x.PrimaryAffinity
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetLastCleanBegin() int32 {
	if x != nil {
		return x.LastCleanBegin
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetLastCleanEnd() int32 {
	if x != nil {
		return x.LastCleanEnd
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetUpFrom() int32 {
	if x != nil {
		return x.UpFrom
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetUpThru() int32 {
	if x != nil {
		return x.UpThru
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetDownAt() int32 {
	if x != nil {
		return x.DownAt
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetLostAt() int32 {
	if x != nil {
		return x.LostAt
	}
	return 0
}

func (x *OsdDumpOsdInfo) GetPublicAddrs() *OsdDumpPublicAddrs {
	if x != nil {
		return x.PublicAddrs
	}
	return nil
}

func (x *OsdDumpOsdInfo) GetClusterAddrs() *OsdDumpClusterAddrs {
	if x != nil {
		return x.ClusterAddrs
	}
	return nil
}

func (x *OsdDumpOsdInfo) GetHeartbeatBackAddrs() *OsdDumpHeartbeatAddrs {
	if x != nil {
		return x.HeartbeatBackAddrs
	}
	return nil
}

func (x *OsdDumpOsdInfo) GetHeartbeatFrontAddrs() *OsdDumpHeartbeatAddrs {
	if x != nil {
		return x.HeartbeatFrontAddrs
	}
	return nil
}

func (x *OsdDumpOsdInfo) GetPublicAddr() string {
	if x != nil {
		return x.PublicAddr
	}
	return ""
}

func (x *OsdDumpOsdInfo) GetClusterAddr() string {
	if x != nil {
		return x.ClusterAddr
	}
	return ""
}

func (x *OsdDumpOsdInfo) GetHeartbeatBackAddr() string {
	if x != nil {
		return x.HeartbeatBackAddr
	}
	return ""
}

func (x *OsdDumpOsdInfo) GetHeartbeatFrontAddr() string {
	if x != nil {
		return x.HeartbeatFrontAddr
	}
	return ""
}

func (x *OsdDumpOsdInfo) GetState() []string {
	if x != nil {
		return x.State
	}
	return nil
}

type OsdDumpPublicAddrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrvec []*OsdDumpAddrVec `protobuf:"bytes,1,rep,name=addrvec,proto3" json:"addrvec,omitempty"`
}

func (x *OsdDumpPublicAddrs) Reset() {
	*x = OsdDumpPublicAddrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpPublicAddrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpPublicAddrs) ProtoMessage() {}

func (x *OsdDumpPublicAddrs) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpPublicAddrs.ProtoReflect.Descriptor instead.
func (*OsdDumpPublicAddrs) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{21}
}

func (x *OsdDumpPublicAddrs) GetAddrvec() []*OsdDumpAddrVec {
	if x != nil {
		return x.Addrvec
	}
	return nil
}

type OsdDumpClusterAddrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrvec []*OsdDumpAddrVec `protobuf:"bytes,1,rep,name=addrvec,proto3" json:"addrvec,omitempty"`
}

func (x *OsdDumpClusterAddrs) Reset() {
	*x = OsdDumpClusterAddrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpClusterAddrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpClusterAddrs) ProtoMessage() {}

func (x *OsdDumpClusterAddrs) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpClusterAddrs.ProtoReflect.Descriptor instead.
func (*OsdDumpClusterAddrs) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{22}
}

func (x *OsdDumpClusterAddrs) GetAddrvec() []*OsdDumpAddrVec {
	if x != nil {
		return x.Addrvec
	}
	return nil
}

type OsdDumpHeartbeatAddrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrvec []*OsdDumpAddrVec `protobuf:"bytes,1,rep,name=addrvec,proto3" json:"addrvec,omitempty"`
}

func (x *OsdDumpHeartbeatAddrs) Reset() {
	*x = OsdDumpHeartbeatAddrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpHeartbeatAddrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpHeartbeatAddrs) ProtoMessage() {}

func (x *OsdDumpHeartbeatAddrs) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpHeartbeatAddrs.ProtoReflect.Descriptor instead.
func (*OsdDumpHeartbeatAddrs) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{23}
}

func (x *OsdDumpHeartbeatAddrs) GetAddrvec() []*OsdDumpAddrVec {
	if x != nil {
		return x.Addrvec
	}
	return nil
}

type OsdDumpAddrVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Nonce uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *OsdDumpAddrVec) Reset() {
	*x = OsdDumpAddrVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpAddrVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpAddrVec) ProtoMessage() {}

func (x *OsdDumpAddrVec) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpAddrVec.ProtoReflect.Descriptor instead.
func (*OsdDumpAddrVec) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{24}
}

func (x *OsdDumpAddrVec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OsdDumpAddrVec) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *OsdDumpAddrVec) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type OsdDumpOsdXInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Osd                  int32                  `protobuf:"varint,1,opt,name=osd,proto3" json:"osd,omitempty"`
	DownStamp            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=down_stamp,json=downStamp,proto3" json:"down_stamp,omitempty"`
	LaggyProbability     float64                `protobuf:"fixed64,3,opt,name=laggy_probability,json=laggyProbability,proto3" json:"laggy_probability,omitempty"`
	LaggyInterval        float64                `protobuf:"fixed64,4,opt,name=laggy_interval,json=laggyInterval,proto3" json:"laggy_interval,omitempty"`
	Features             uint64                 `protobuf:"varint,5,opt,name=features,proto3" json:"features,omitempty"`
	OldWeight            float64                `protobuf:"fixed64,6,opt,name=old_weight,json=oldWeight,proto3" json:"old_weight,omitempty"`
	LastPurgedSnapsScrub *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_purged_snaps_scrub,json=lastPurgedSnapsScrub,proto3" json:"last_purged_snaps_scrub,omitempty"`
	DeadEpoch            int32                  `protobuf:"varint,8,opt,name=dead_epoch,json=deadEpoch,proto3" json:"dead_epoch,omitempty"`
}

func (x *OsdDumpOsdXInfo) Reset() {
	*x = OsdDumpOsdXInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpOsdXInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpOsdXInfo) ProtoMessage() {}

func (x *OsdDumpOsdXInfo) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpOsdXInfo.ProtoReflect.Descriptor instead.
func (*OsdDumpOsdXInfo) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{25}
}

func (x *OsdDumpOsdXInfo) GetOsd() int32 {
	if x != nil {
		return x.Osd
	}
	return 0
}

func (x *OsdDumpOsdXInfo) GetDownStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DownStamp
	}
	return nil
}

func (x *OsdDumpOsdXInfo) GetLaggyProbability() float64 {
	if x != nil {
		return x.LaggyProbability
	}
	return 0
}

func (x *OsdDumpOsdXInfo) GetLaggyInterval() float64 {
	if x != nil {
		return x.LaggyInterval
	}
	return 0
}

func (x *OsdDumpOsdXInfo) GetFeatures() uint64 {
	if x != nil {
		return x.Features
	}
	return 0
}

func (x *OsdDumpOsdXInfo) GetOldWeight() float64 {
	if x != nil {
		return x.OldWeight
	}
	return 0
}

func (x *OsdDumpOsdXInfo) GetLastPurgedSnapsScrub() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPurgedSnapsScrub
	}
	return nil
}

func (x *OsdDumpOsdXInfo) GetDeadEpoch() int32 {
	if x != nil {
		return x.DeadEpoch
	}
	return 0
}

type OsdDumpErasureCodeProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K         string `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	M         string `protobuf:"bytes,2,opt,name=m,proto3" json:"m,omitempty"`
	Plugin    string `protobuf:"bytes,3,opt,name=plugin,proto3" json:"plugin,omitempty"`
	Technique string `protobuf:"bytes,4,opt,name=technique,proto3" json:"technique,omitempty"`
}

func (x *OsdDumpErasureCodeProfile) Reset() {
	*x = OsdDumpErasureCodeProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpErasureCodeProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpErasureCodeProfile) ProtoMessage() {}

func (x *OsdDumpErasureCodeProfile) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpErasureCodeProfile.ProtoReflect.Descriptor instead.
func (*OsdDumpErasureCodeProfile) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{26}
}

func (x *OsdDumpErasureCodeProfile) GetK() string {
	if x != nil {
		return x.K
	}
	return ""
}

func (x *OsdDumpErasureCodeProfile) GetM() string {
	if x != nil {
		return x.M
	}
	return ""
}

func (x *OsdDumpErasureCodeProfile) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *OsdDumpErasureCodeProfile) GetTechnique() string {
	if x != nil {
		return x.Technique
	}
	return ""
}

type OsdDumpStretchMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StretchModeEnabled    bool  `protobuf:"varint,1,opt,name=stretch_mode_enabled,json=stretchModeEnabled,proto3" json:"stretch_mode_enabled,omitempty"`
	StretchBucketCount    int32 `protobuf:"varint,2,opt,name=stretch_bucket_count,json=stretchBucketCount,proto3" json:"stretch_bucket_count,omitempty"`
	DegradedStretchMode   int32 `protobuf:"varint,3,opt,name=degraded_stretch_mode,json=degradedStretchMode,proto3" json:"degraded_stretch_mode,omitempty"`
	RecoveringStretchMode int32 `protobuf:"varint,4,opt,name=recovering_stretch_mode,json=recoveringStretchMode,proto3" json:"recovering_stretch_mode,omitempty"`
	StretchModeBucket     int32 `protobuf:"varint,5,opt,name=stretch_mode_bucket,json=stretchModeBucket,proto3" json:"stretch_mode_bucket,omitempty"`
}

func (x *OsdDumpStretchMode) Reset() {
	*x = OsdDumpStretchMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdDumpStretchMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdDumpStretchMode) ProtoMessage() {}

func (x *OsdDumpStretchMode) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdDumpStretchMode.ProtoReflect.Descriptor instead.
func (*OsdDumpStretchMode) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{27}
}

func (x *OsdDumpStretchMode) GetStretchModeEnabled() bool {
	if x != nil {
		return x.StretchModeEnabled
	}
	return false
}

func (x *OsdDumpStretchMode) GetStretchBucketCount() int32 {
	if x != nil {
		return x.StretchBucketCount
	}
	return 0
}

func (x *OsdDumpStretchMode) GetDegradedStretchMode() int32 {
	if x != nil {
		return x.DegradedStretchMode
	}
	return 0
}

func (x *OsdDumpStretchMode) GetRecoveringStretchMode() int32 {
	if x != nil {
		return x.RecoveringStretchMode
	}
	return 0
}

func (x *OsdDumpStretchMode) GetStretchModeBucket() int32 {
	if x != nil {
		return x.StretchModeBucket
	}
	return 0
}

// PG DUMP
type GetCephPgDumpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PgReady bool   `protobuf:"varint,1,opt,name=pg_ready,json=pgReady,proto3" json:"pg_ready,omitempty"`
	PgMap   *PGMap `protobuf:"bytes,2,opt,name=pg_map,json=pgMap,proto3" json:"pg_map,omitempty"`
}

func (x *GetCephPgDumpResponse) Reset() {
	*x = GetCephPgDumpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCephPgDumpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCephPgDumpResponse) ProtoMessage() {}

func (x *GetCephPgDumpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCephPgDumpResponse.ProtoReflect.Descriptor instead.
func (*GetCephPgDumpResponse) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{28}
}

func (x *GetCephPgDumpResponse) GetPgReady() bool {
	if x != nil {
		return x.PgReady
	}
	return false
}

func (x *GetCephPgDumpResponse) GetPgMap() *PGMap {
	if x != nil {
		return x.PgMap
	}
	return nil
}

type PGMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         int64                  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Stamp           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=stamp,proto3" json:"stamp,omitempty"`
	LastOsdmapEpoch int64                  `protobuf:"varint,3,opt,name=last_osdmap_epoch,json=lastOsdmapEpoch,proto3" json:"last_osdmap_epoch,omitempty"`
	LastPgScan      int64                  `protobuf:"varint,4,opt,name=last_pg_scan,json=lastPgScan,proto3" json:"last_pg_scan,omitempty"`
	PgStatsSum      *PGStatsSum            `protobuf:"bytes,5,opt,name=pg_stats_sum,json=pgStatsSum,proto3" json:"pg_stats_sum,omitempty"`
	OsdStatsSum     *OSDStatsSum           `protobuf:"bytes,6,opt,name=osd_stats_sum,json=osdStatsSum,proto3" json:"osd_stats_sum,omitempty"`
	PgStatsDelta    *PGStatsDelta          `protobuf:"bytes,7,opt,name=pg_stats_delta,json=pgStatsDelta,proto3" json:"pg_stats_delta,omitempty"`
	PgStats         []*PGStat              `protobuf:"bytes,8,rep,name=pg_stats,json=pgStats,proto3" json:"pg_stats,omitempty"`
	PoolStats       []*PoolStats           `protobuf:"bytes,9,rep,name=pool_stats,json=poolStats,proto3" json:"pool_stats,omitempty"`
	OsdStats        []*OsdStats            `protobuf:"bytes,10,rep,name=osd_stats,json=osdStats,proto3" json:"osd_stats,omitempty"`
	PoolStatfs      []*PoolStatFs          `protobuf:"bytes,11,rep,name=pool_statfs,json=poolStatfs,proto3" json:"pool_statfs,omitempty"`
}

func (x *PGMap) Reset() {
	*x = PGMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PGMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGMap) ProtoMessage() {}

func (x *PGMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGMap.ProtoReflect.Descriptor instead.
func (*PGMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{29}
}

func (x *PGMap) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PGMap) GetStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Stamp
	}
	return nil
}

func (x *PGMap) GetLastOsdmapEpoch() int64 {
	if x != nil {
		return x.LastOsdmapEpoch
	}
	return 0
}

func (x *PGMap) GetLastPgScan() int64 {
	if x != nil {
		return x.LastPgScan
	}
	return 0
}

func (x *PGMap) GetPgStatsSum() *PGStatsSum {
	if x != nil {
		return x.PgStatsSum
	}
	return nil
}

func (x *PGMap) GetOsdStatsSum() *OSDStatsSum {
	if x != nil {
		return x.OsdStatsSum
	}
	return nil
}

func (x *PGMap) GetPgStatsDelta() *PGStatsDelta {
	if x != nil {
		return x.PgStatsDelta
	}
	return nil
}

func (x *PGMap) GetPgStats() []*PGStat {
	if x != nil {
		return x.PgStats
	}
	return nil
}

func (x *PGMap) GetPoolStats() []*PoolStats {
	if x != nil {
		return x.PoolStats
	}
	return nil
}

func (x *PGMap) GetOsdStats() []*OsdStats {
	if x != nil {
		return x.OsdStats
	}
	return nil
}

func (x *PGMap) GetPoolStatfs() []*PoolStatFs {
	if x != nil {
		return x.PoolStatfs
	}
	return nil
}

type PGStatsSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatSum       *PGStatsSum_PGStatsSum_StatSum    `protobuf:"bytes,1,opt,name=stat_sum,json=statSum,proto3" json:"stat_sum,omitempty"`
	StoreStats    *PGStatsSum_PGStatsSum_StoreStats `protobuf:"bytes,2,opt,name=store_stats,json=storeStats,proto3" json:"store_stats,omitempty"`
	LogSize       int64                             `protobuf:"varint,3,opt,name=log_size,json=logSize,proto3" json:"log_size,omitempty"`
	OndiskLogSize int64                             `protobuf:"varint,4,opt,name=ondisk_log_size,json=ondiskLogSize,proto3" json:"ondisk_log_size,omitempty"`
	Up            int64                             `protobuf:"varint,5,opt,name=up,proto3" json:"up,omitempty"`
	Acting        int64                             `protobuf:"varint,6,opt,name=acting,proto3" json:"acting,omitempty"`
	NumStoreStats int64                             `protobuf:"varint,7,opt,name=num_store_stats,json=numStoreStats,proto3" json:"num_store_stats,omitempty"`
}

func (x *PGStatsSum) Reset() {
	*x = PGStatsSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PGStatsSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGStatsSum) ProtoMessage() {}

func (x *PGStatsSum) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGStatsSum.ProtoReflect.Descriptor instead.
func (*PGStatsSum) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{30}
}

func (x *PGStatsSum) GetStatSum() *PGStatsSum_PGStatsSum_StatSum {
	if x != nil {
		return x.StatSum
	}
	return nil
}

func (x *PGStatsSum) GetStoreStats() *PGStatsSum_PGStatsSum_StoreStats {
	if x != nil {
		return x.StoreStats
	}
	return nil
}

func (x *PGStatsSum) GetLogSize() int64 {
	if x != nil {
		return x.LogSize
	}
	return 0
}

func (x *PGStatsSum) GetOndiskLogSize() int64 {
	if x != nil {
		return x.OndiskLogSize
	}
	return 0
}

func (x *PGStatsSum) GetUp() int64 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *PGStatsSum) GetActing() int64 {
	if x != nil {
		return x.Acting
	}
	return 0
}

func (x *PGStatsSum) GetNumStoreStats() int64 {
	if x != nil {
		return x.NumStoreStats
	}
	return 0
}

type OSDStatsSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpFrom             int64                          `protobuf:"varint,1,opt,name=up_from,json=upFrom,proto3" json:"up_from,omitempty"`
	Seq                int64                          `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	NumPgs             int64                          `protobuf:"varint,3,opt,name=num_pgs,json=numPgs,proto3" json:"num_pgs,omitempty"`
	NumOsds            int64                          `protobuf:"varint,4,opt,name=num_osds,json=numOsds,proto3" json:"num_osds,omitempty"`
	NumPerPoolOsds     int64                          `protobuf:"varint,5,opt,name=num_per_pool_osds,json=numPerPoolOsds,proto3" json:"num_per_pool_osds,omitempty"`
	NumPerPoolOmapOsds int64                          `protobuf:"varint,6,opt,name=num_per_pool_omap_osds,json=numPerPoolOmapOsds,proto3" json:"num_per_pool_omap_osds,omitempty"`
	Kb                 int64                          `protobuf:"varint,7,opt,name=kb,proto3" json:"kb,omitempty"`
	KbUsed             int64                          `protobuf:"varint,8,opt,name=kb_used,json=kbUsed,proto3" json:"kb_used,omitempty"`
	KbUsedData         int64                          `protobuf:"varint,9,opt,name=kb_used_data,json=kbUsedData,proto3" json:"kb_used_data,omitempty"`
	KbUsedOmap         int64                          `protobuf:"varint,10,opt,name=kb_used_omap,json=kbUsedOmap,proto3" json:"kb_used_omap,omitempty"`
	KbUsedMeta         int64                          `protobuf:"varint,11,opt,name=kb_used_meta,json=kbUsedMeta,proto3" json:"kb_used_meta,omitempty"`
	KbAvail            int64                          `protobuf:"varint,12,opt,name=kb_avail,json=kbAvail,proto3" json:"kb_avail,omitempty"`
	Statfs             *OSDStatsSum_StatFs            `protobuf:"bytes,13,opt,name=statfs,proto3" json:"statfs,omitempty"`
	HbPeers            []int64                        `protobuf:"varint,14,rep,packed,name=hb_peers,json=hbPeers,proto3" json:"hb_peers,omitempty"`
	SnapTrimQueueLen   int64                          `protobuf:"varint,15,opt,name=snap_trim_queue_len,json=snapTrimQueueLen,proto3" json:"snap_trim_queue_len,omitempty"`
	NumSnapTrimming    int64                          `protobuf:"varint,16,opt,name=num_snap_trimming,json=numSnapTrimming,proto3" json:"num_snap_trimming,omitempty"`
	NumShardsRepaired  int64                          `protobuf:"varint,17,opt,name=num_shards_repaired,json=numShardsRepaired,proto3" json:"num_shards_repaired,omitempty"`
	OpQueueAgeHist     *OSDStatsSum_OpQueueAgeHist    `protobuf:"bytes,18,opt,name=op_queue_age_hist,json=opQueueAgeHist,proto3" json:"op_queue_age_hist,omitempty"`
	PerfStat           *OSDStatsSum_PerfStat          `protobuf:"bytes,19,opt,name=perf_stat,json=perfStat,proto3" json:"perf_stat,omitempty"`
	Alerts             []string                       `protobuf:"bytes,20,rep,name=alerts,proto3" json:"alerts,omitempty"`
	NetworkPingTimes   []*OSDStatsSum_NetworkPingTime `protobuf:"bytes,21,rep,name=network_ping_times,json=networkPingTimes,proto3" json:"network_ping_times,omitempty"`
}

func (x *OSDStatsSum) Reset() {
	*x = OSDStatsSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDStatsSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDStatsSum) ProtoMessage() {}

func (x *OSDStatsSum) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDStatsSum.ProtoReflect.Descriptor instead.
func (*OSDStatsSum) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{31}
}

func (x *OSDStatsSum) GetUpFrom() int64 {
	if x != nil {
		return x.UpFrom
	}
	return 0
}

func (x *OSDStatsSum) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *OSDStatsSum) GetNumPgs() int64 {
	if x != nil {
		return x.NumPgs
	}
	return 0
}

func (x *OSDStatsSum) GetNumOsds() int64 {
	if x != nil {
		return x.NumOsds
	}
	return 0
}

func (x *OSDStatsSum) GetNumPerPoolOsds() int64 {
	if x != nil {
		return x.NumPerPoolOsds
	}
	return 0
}

func (x *OSDStatsSum) GetNumPerPoolOmapOsds() int64 {
	if x != nil {
		return x.NumPerPoolOmapOsds
	}
	return 0
}

func (x *OSDStatsSum) GetKb() int64 {
	if x != nil {
		return x.Kb
	}
	return 0
}

func (x *OSDStatsSum) GetKbUsed() int64 {
	if x != nil {
		return x.KbUsed
	}
	return 0
}

func (x *OSDStatsSum) GetKbUsedData() int64 {
	if x != nil {
		return x.KbUsedData
	}
	return 0
}

func (x *OSDStatsSum) GetKbUsedOmap() int64 {
	if x != nil {
		return x.KbUsedOmap
	}
	return 0
}

func (x *OSDStatsSum) GetKbUsedMeta() int64 {
	if x != nil {
		return x.KbUsedMeta
	}
	return 0
}

func (x *OSDStatsSum) GetKbAvail() int64 {
	if x != nil {
		return x.KbAvail
	}
	return 0
}

func (x *OSDStatsSum) GetStatfs() *OSDStatsSum_StatFs {
	if x != nil {
		return x.Statfs
	}
	return nil
}

func (x *OSDStatsSum) GetHbPeers() []int64 {
	if x != nil {
		return x.HbPeers
	}
	return nil
}

func (x *OSDStatsSum) GetSnapTrimQueueLen() int64 {
	if x != nil {
		return x.SnapTrimQueueLen
	}
	return 0
}

func (x *OSDStatsSum) GetNumSnapTrimming() int64 {
	if x != nil {
		return x.NumSnapTrimming
	}
	return 0
}

func (x *OSDStatsSum) GetNumShardsRepaired() int64 {
	if x != nil {
		return x.NumShardsRepaired
	}
	return 0
}

func (x *OSDStatsSum) GetOpQueueAgeHist() *OSDStatsSum_OpQueueAgeHist {
	if x != nil {
		return x.OpQueueAgeHist
	}
	return nil
}

func (x *OSDStatsSum) GetPerfStat() *OSDStatsSum_PerfStat {
	if x != nil {
		return x.PerfStat
	}
	return nil
}

func (x *OSDStatsSum) GetAlerts() []string {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *OSDStatsSum) GetNetworkPingTimes() []*OSDStatsSum_NetworkPingTime {
	if x != nil {
		return x.NetworkPingTimes
	}
	return nil
}

type PGStatsDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatSum       *PGStatsDelta_PGStatsDelta_StatSum    `protobuf:"bytes,1,opt,name=stat_sum,json=statSum,proto3" json:"stat_sum,omitempty"`
	StoreStats    *PGStatsDelta_PGStatsDelta_StoreStats `protobuf:"bytes,2,opt,name=store_stats,json=storeStats,proto3" json:"store_stats,omitempty"`
	LogSize       int64                                 `protobuf:"varint,3,opt,name=log_size,json=logSize,proto3" json:"log_size,omitempty"`
	OndiskLogSize int64                                 `protobuf:"varint,4,opt,name=ondisk_log_size,json=ondiskLogSize,proto3" json:"ondisk_log_size,omitempty"`
	Up            int64                                 `protobuf:"varint,5,opt,name=up,proto3" json:"up,omitempty"`
	Acting        int64                                 `protobuf:"varint,6,opt,name=acting,proto3" json:"acting,omitempty"`
	NumStoreStats int64                                 `protobuf:"varint,7,opt,name=num_store_stats,json=numStoreStats,proto3" json:"num_store_stats,omitempty"`
	StampDelta    string                                `protobuf:"bytes,8,opt,name=stamp_delta,json=stampDelta,proto3" json:"stamp_delta,omitempty"`
}

func (x *PGStatsDelta) Reset() {
	*x = PGStatsDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PGStatsDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGStatsDelta) ProtoMessage() {}

func (x *PGStatsDelta) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGStatsDelta.ProtoReflect.Descriptor instead.
func (*PGStatsDelta) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{32}
}

func (x *PGStatsDelta) GetStatSum() *PGStatsDelta_PGStatsDelta_StatSum {
	if x != nil {
		return x.StatSum
	}
	return nil
}

func (x *PGStatsDelta) GetStoreStats() *PGStatsDelta_PGStatsDelta_StoreStats {
	if x != nil {
		return x.StoreStats
	}
	return nil
}

func (x *PGStatsDelta) GetLogSize() int64 {
	if x != nil {
		return x.LogSize
	}
	return 0
}

func (x *PGStatsDelta) GetOndiskLogSize() int64 {
	if x != nil {
		return x.OndiskLogSize
	}
	return 0
}

func (x *PGStatsDelta) GetUp() int64 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *PGStatsDelta) GetActing() int64 {
	if x != nil {
		return x.Acting
	}
	return 0
}

func (x *PGStatsDelta) GetNumStoreStats() int64 {
	if x != nil {
		return x.NumStoreStats
	}
	return 0
}

func (x *PGStatsDelta) GetStampDelta() string {
	if x != nil {
		return x.StampDelta
	}
	return ""
}

type PGStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pgid                    string                 `protobuf:"bytes,1,opt,name=pgid,proto3" json:"pgid,omitempty"`
	Version                 string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ReportedSeq             int64                  `protobuf:"varint,3,opt,name=reported_seq,json=reportedSeq,proto3" json:"reported_seq,omitempty"`
	ReportedEpoch           int64                  `protobuf:"varint,4,opt,name=reported_epoch,json=reportedEpoch,proto3" json:"reported_epoch,omitempty"`
	State                   string                 `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	LastFresh               *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_fresh,json=lastFresh,proto3" json:"last_fresh,omitempty"`
	LastChange              *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_change,json=lastChange,proto3" json:"last_change,omitempty"`
	LastActive              *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_active,json=lastActive,proto3" json:"last_active,omitempty"`
	LastPeered              *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_peered,json=lastPeered,proto3" json:"last_peered,omitempty"`
	LastClean               *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_clean,json=lastClean,proto3" json:"last_clean,omitempty"`
	LastBecameActive        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_became_active,json=lastBecameActive,proto3" json:"last_became_active,omitempty"`
	LastBecamePeered        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_became_peered,json=lastBecamePeered,proto3" json:"last_became_peered,omitempty"`
	LastUnstale             *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=last_unstale,json=lastUnstale,proto3" json:"last_unstale,omitempty"`
	LastUndegraded          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=last_undegraded,json=lastUndegraded,proto3" json:"last_undegraded,omitempty"`
	LastFullsized           *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=last_fullsized,json=lastFullsized,proto3" json:"last_fullsized,omitempty"`
	MappingEpoch            int64                  `protobuf:"varint,16,opt,name=mapping_epoch,json=mappingEpoch,proto3" json:"mapping_epoch,omitempty"`
	LogStart                string                 `protobuf:"bytes,17,opt,name=log_start,json=logStart,proto3" json:"log_start,omitempty"`
	OndiskLogStart          string                 `protobuf:"bytes,18,opt,name=ondisk_log_start,json=ondiskLogStart,proto3" json:"ondisk_log_start,omitempty"`
	Created                 int64                  `protobuf:"varint,19,opt,name=created,proto3" json:"created,omitempty"`
	LastEpochClean          int64                  `protobuf:"varint,20,opt,name=last_epoch_clean,json=lastEpochClean,proto3" json:"last_epoch_clean,omitempty"`
	Parent                  string                 `protobuf:"bytes,21,opt,name=parent,proto3" json:"parent,omitempty"`
	ParentSplitBits         int64                  `protobuf:"varint,22,opt,name=parent_split_bits,json=parentSplitBits,proto3" json:"parent_split_bits,omitempty"`
	LastScrub               string                 `protobuf:"bytes,23,opt,name=last_scrub,json=lastScrub,proto3" json:"last_scrub,omitempty"`
	LastScrubStamp          *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=last_scrub_stamp,json=lastScrubStamp,proto3" json:"last_scrub_stamp,omitempty"`
	LastDeepScrub           string                 `protobuf:"bytes,25,opt,name=last_deep_scrub,json=lastDeepScrub,proto3" json:"last_deep_scrub,omitempty"`
	LastDeepScrubStamp      *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=last_deep_scrub_stamp,json=lastDeepScrubStamp,proto3" json:"last_deep_scrub_stamp,omitempty"`
	LastCleanScrubStamp     *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=last_clean_scrub_stamp,json=lastCleanScrubStamp,proto3" json:"last_clean_scrub_stamp,omitempty"`
	ObjectsScrubbed         int64                  `protobuf:"varint,28,opt,name=objects_scrubbed,json=objectsScrubbed,proto3" json:"objects_scrubbed,omitempty"`
	LogSize                 int64                  `protobuf:"varint,29,opt,name=log_size,json=logSize,proto3" json:"log_size,omitempty"`
	LogDupsSize             int64                  `protobuf:"varint,30,opt,name=log_dups_size,json=logDupsSize,proto3" json:"log_dups_size,omitempty"`
	OndiskLogSize           int64                  `protobuf:"varint,31,opt,name=ondisk_log_size,json=ondiskLogSize,proto3" json:"ondisk_log_size,omitempty"`
	StatsInvalid            bool                   `protobuf:"varint,32,opt,name=stats_invalid,json=statsInvalid,proto3" json:"stats_invalid,omitempty"`
	DirtyStatsInvalid       bool                   `protobuf:"varint,33,opt,name=dirty_stats_invalid,json=dirtyStatsInvalid,proto3" json:"dirty_stats_invalid,omitempty"`
	OmapStatsInvalid        bool                   `protobuf:"varint,34,opt,name=omap_stats_invalid,json=omapStatsInvalid,proto3" json:"omap_stats_invalid,omitempty"`
	HitsetStatsInvalid      bool                   `protobuf:"varint,35,opt,name=hitset_stats_invalid,json=hitsetStatsInvalid,proto3" json:"hitset_stats_invalid,omitempty"`
	HitsetBytesStatsInvalid bool                   `protobuf:"varint,36,opt,name=hitset_bytes_stats_invalid,json=hitsetBytesStatsInvalid,proto3" json:"hitset_bytes_stats_invalid,omitempty"`
	PinStatsInvalid         bool                   `protobuf:"varint,37,opt,name=pin_stats_invalid,json=pinStatsInvalid,proto3" json:"pin_stats_invalid,omitempty"`
	ManifestStatsInvalid    bool                   `protobuf:"varint,38,opt,name=manifest_stats_invalid,json=manifestStatsInvalid,proto3" json:"manifest_stats_invalid,omitempty"`
	SnaptrimqLen            int64                  `protobuf:"varint,39,opt,name=snaptrimq_len,json=snaptrimqLen,proto3" json:"snaptrimq_len,omitempty"`
	LastScrubDuration       int64                  `protobuf:"varint,40,opt,name=last_scrub_duration,json=lastScrubDuration,proto3" json:"last_scrub_duration,omitempty"`
	ScrubSchedule           string                 `protobuf:"bytes,41,opt,name=scrub_schedule,json=scrubSchedule,proto3" json:"scrub_schedule,omitempty"`
	ScrubDuration           float64                `protobuf:"fixed64,42,opt,name=scrub_duration,json=scrubDuration,proto3" json:"scrub_duration,omitempty"`
	ObjectsTrimmed          int64                  `protobuf:"varint,43,opt,name=objects_trimmed,json=objectsTrimmed,proto3" json:"objects_trimmed,omitempty"`
	SnaptrimDuration        float64                `protobuf:"fixed64,44,opt,name=snaptrim_duration,json=snaptrimDuration,proto3" json:"snaptrim_duration,omitempty"`
	StatSum                 *PGStat_PGStat_StatSum `protobuf:"bytes,45,opt,name=stat_sum,json=statSum,proto3" json:"stat_sum,omitempty"`
	Up                      []int64                `protobuf:"varint,46,rep,packed,name=up,proto3" json:"up,omitempty"`
	Acting                  []int64                `protobuf:"varint,47,rep,packed,name=acting,proto3" json:"acting,omitempty"`
	AvailNoMissing          []int64                `protobuf:"varint,48,rep,packed,name=avail_no_missing,json=availNoMissing,proto3" json:"avail_no_missing,omitempty"`
	ObjectLocationCounts    []int64                `protobuf:"varint,49,rep,packed,name=object_location_counts,json=objectLocationCounts,proto3" json:"object_location_counts,omitempty"`
	BlockedBy               []int64                `protobuf:"varint,50,rep,packed,name=blocked_by,json=blockedBy,proto3" json:"blocked_by,omitempty"`
	UpPrimary               int64                  `protobuf:"varint,51,opt,name=up_primary,json=upPrimary,proto3" json:"up_primary,omitempty"`
	ActingPrimary           int64                  `protobuf:"varint,52,opt,name=acting_primary,json=actingPrimary,proto3" json:"acting_primary,omitempty"`
	PurgedSnaps             []int64                `protobuf:"varint,53,rep,packed,name=purged_snaps,json=purgedSnaps,proto3" json:"purged_snaps,omitempty"`
}

func (x *PGStat) Reset() {
	*x = PGStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PGStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGStat) ProtoMessage() {}

func (x *PGStat) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGStat.ProtoReflect.Descriptor instead.
func (*PGStat) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{33}
}

func (x *PGStat) GetPgid() string {
	if x != nil {
		return x.Pgid
	}
	return ""
}

func (x *PGStat) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PGStat) GetReportedSeq() int64 {
	if x != nil {
		return x.ReportedSeq
	}
	return 0
}

func (x *PGStat) GetReportedEpoch() int64 {
	if x != nil {
		return x.ReportedEpoch
	}
	return 0
}

func (x *PGStat) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PGStat) GetLastFresh() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFresh
	}
	return nil
}

func (x *PGStat) GetLastChange() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChange
	}
	return nil
}

func (x *PGStat) GetLastActive() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActive
	}
	return nil
}

func (x *PGStat) GetLastPeered() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPeered
	}
	return nil
}

func (x *PGStat) GetLastClean() *timestamppb.Timestamp {
	if x != nil {
		return x.LastClean
	}
	return nil
}

func (x *PGStat) GetLastBecameActive() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBecameActive
	}
	return nil
}

func (x *PGStat) GetLastBecamePeered() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBecamePeered
	}
	return nil
}

func (x *PGStat) GetLastUnstale() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUnstale
	}
	return nil
}

func (x *PGStat) GetLastUndegraded() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUndegraded
	}
	return nil
}

func (x *PGStat) GetLastFullsized() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFullsized
	}
	return nil
}

func (x *PGStat) GetMappingEpoch() int64 {
	if x != nil {
		return x.MappingEpoch
	}
	return 0
}

func (x *PGStat) GetLogStart() string {
	if x != nil {
		return x.LogStart
	}
	return ""
}

func (x *PGStat) GetOndiskLogStart() string {
	if x != nil {
		return x.OndiskLogStart
	}
	return ""
}

func (x *PGStat) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PGStat) GetLastEpochClean() int64 {
	if x != nil {
		return x.LastEpochClean
	}
	return 0
}

func (x *PGStat) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *PGStat) GetParentSplitBits() int64 {
	if x != nil {
		return x.ParentSplitBits
	}
	return 0
}

func (x *PGStat) GetLastScrub() string {
	if x != nil {
		return x.LastScrub
	}
	return ""
}

func (x *PGStat) GetLastScrubStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastScrubStamp
	}
	return nil
}

func (x *PGStat) GetLastDeepScrub() string {
	if x != nil {
		return x.LastDeepScrub
	}
	return ""
}

func (x *PGStat) GetLastDeepScrubStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDeepScrubStamp
	}
	return nil
}

func (x *PGStat) GetLastCleanScrubStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCleanScrubStamp
	}
	return nil
}

func (x *PGStat) GetObjectsScrubbed() int64 {
	if x != nil {
		return x.ObjectsScrubbed
	}
	return 0
}

func (x *PGStat) GetLogSize() int64 {
	if x != nil {
		return x.LogSize
	}
	return 0
}

func (x *PGStat) GetLogDupsSize() int64 {
	if x != nil {
		return x.LogDupsSize
	}
	return 0
}

func (x *PGStat) GetOndiskLogSize() int64 {
	if x != nil {
		return x.OndiskLogSize
	}
	return 0
}

func (x *PGStat) GetStatsInvalid() bool {
	if x != nil {
		return x.StatsInvalid
	}
	return false
}

func (x *PGStat) GetDirtyStatsInvalid() bool {
	if x != nil {
		return x.DirtyStatsInvalid
	}
	return false
}

func (x *PGStat) GetOmapStatsInvalid() bool {
	if x != nil {
		return x.OmapStatsInvalid
	}
	return false
}

func (x *PGStat) GetHitsetStatsInvalid() bool {
	if x != nil {
		return x.HitsetStatsInvalid
	}
	return false
}

func (x *PGStat) GetHitsetBytesStatsInvalid() bool {
	if x != nil {
		return x.HitsetBytesStatsInvalid
	}
	return false
}

func (x *PGStat) GetPinStatsInvalid() bool {
	if x != nil {
		return x.PinStatsInvalid
	}
	return false
}

func (x *PGStat) GetManifestStatsInvalid() bool {
	if x != nil {
		return x.ManifestStatsInvalid
	}
	return false
}

func (x *PGStat) GetSnaptrimqLen() int64 {
	if x != nil {
		return x.SnaptrimqLen
	}
	return 0
}

func (x *PGStat) GetLastScrubDuration() int64 {
	if x != nil {
		return x.LastScrubDuration
	}
	return 0
}

func (x *PGStat) GetScrubSchedule() string {
	if x != nil {
		return x.ScrubSchedule
	}
	return ""
}

func (x *PGStat) GetScrubDuration() float64 {
	if x != nil {
		return x.ScrubDuration
	}
	return 0
}

func (x *PGStat) GetObjectsTrimmed() int64 {
	if x != nil {
		return x.ObjectsTrimmed
	}
	return 0
}

func (x *PGStat) GetSnaptrimDuration() float64 {
	if x != nil {
		return x.SnaptrimDuration
	}
	return 0
}

func (x *PGStat) GetStatSum() *PGStat_PGStat_StatSum {
	if x != nil {
		return x.StatSum
	}
	return nil
}

func (x *PGStat) GetUp() []int64 {
	if x != nil {
		return x.Up
	}
	return nil
}

func (x *PGStat) GetActing() []int64 {
	if x != nil {
		return x.Acting
	}
	return nil
}

func (x *PGStat) GetAvailNoMissing() []int64 {
	if x != nil {
		return x.AvailNoMissing
	}
	return nil
}

func (x *PGStat) GetObjectLocationCounts() []int64 {
	if x != nil {
		return x.ObjectLocationCounts
	}
	return nil
}

func (x *PGStat) GetBlockedBy() []int64 {
	if x != nil {
		return x.BlockedBy
	}
	return nil
}

func (x *PGStat) GetUpPrimary() int64 {
	if x != nil {
		return x.UpPrimary
	}
	return 0
}

func (x *PGStat) GetActingPrimary() int64 {
	if x != nil {
		return x.ActingPrimary
	}
	return 0
}

func (x *PGStat) GetPurgedSnaps() []int64 {
	if x != nil {
		return x.PurgedSnaps
	}
	return nil
}

type PoolStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poolid        int64                           `protobuf:"varint,1,opt,name=poolid,proto3" json:"poolid,omitempty"`
	NumPg         int64                           `protobuf:"varint,2,opt,name=num_pg,json=numPg,proto3" json:"num_pg,omitempty"`
	StatSum       *PoolStats_PoolStats_StatSum    `protobuf:"bytes,3,opt,name=stat_sum,json=statSum,proto3" json:"stat_sum,omitempty"`
	StoreStats    *PoolStats_PoolStats_StoreStats `protobuf:"bytes,4,opt,name=store_stats,json=storeStats,proto3" json:"store_stats,omitempty"`
	LogSize       int64                           `protobuf:"varint,5,opt,name=log_size,json=logSize,proto3" json:"log_size,omitempty"`
	OndiskLogSize int64                           `protobuf:"varint,6,opt,name=ondisk_log_size,json=ondiskLogSize,proto3" json:"ondisk_log_size,omitempty"`
	Up            int64                           `protobuf:"varint,7,opt,name=up,proto3" json:"up,omitempty"`
	Acting        int64                           `protobuf:"varint,8,opt,name=acting,proto3" json:"acting,omitempty"`
	NumStoreStats int64                           `protobuf:"varint,9,opt,name=num_store_stats,json=numStoreStats,proto3" json:"num_store_stats,omitempty"`
}

func (x *PoolStats) Reset() {
	*x = PoolStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStats) ProtoMessage() {}

func (x *PoolStats) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStats.ProtoReflect.Descriptor instead.
func (*PoolStats) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{34}
}

func (x *PoolStats) GetPoolid() int64 {
	if x != nil {
		return x.Poolid
	}
	return 0
}

func (x *PoolStats) GetNumPg() int64 {
	if x != nil {
		return x.NumPg
	}
	return 0
}

func (x *PoolStats) GetStatSum() *PoolStats_PoolStats_StatSum {
	if x != nil {
		return x.StatSum
	}
	return nil
}

func (x *PoolStats) GetStoreStats() *PoolStats_PoolStats_StoreStats {
	if x != nil {
		return x.StoreStats
	}
	return nil
}

func (x *PoolStats) GetLogSize() int64 {
	if x != nil {
		return x.LogSize
	}
	return 0
}

func (x *PoolStats) GetOndiskLogSize() int64 {
	if x != nil {
		return x.OndiskLogSize
	}
	return 0
}

func (x *PoolStats) GetUp() int64 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *PoolStats) GetActing() int64 {
	if x != nil {
		return x.Acting
	}
	return 0
}

func (x *PoolStats) GetNumStoreStats() int64 {
	if x != nil {
		return x.NumStoreStats
	}
	return 0
}

type OsdStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Osd                int64                       `protobuf:"varint,1,opt,name=osd,proto3" json:"osd,omitempty"`
	UpFrom             int64                       `protobuf:"varint,2,opt,name=up_from,json=upFrom,proto3" json:"up_from,omitempty"`
	Seq                int64                       `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	NumPgs             int64                       `protobuf:"varint,4,opt,name=num_pgs,json=numPgs,proto3" json:"num_pgs,omitempty"`
	NumOsds            int64                       `protobuf:"varint,5,opt,name=num_osds,json=numOsds,proto3" json:"num_osds,omitempty"`
	NumPerPoolOsds     int64                       `protobuf:"varint,6,opt,name=num_per_pool_osds,json=numPerPoolOsds,proto3" json:"num_per_pool_osds,omitempty"`
	NumPerPoolOmapOsds int64                       `protobuf:"varint,7,opt,name=num_per_pool_omap_osds,json=numPerPoolOmapOsds,proto3" json:"num_per_pool_omap_osds,omitempty"`
	Kb                 int64                       `protobuf:"varint,8,opt,name=kb,proto3" json:"kb,omitempty"`
	KbUsed             int64                       `protobuf:"varint,9,opt,name=kb_used,json=kbUsed,proto3" json:"kb_used,omitempty"`
	KbUsedData         int64                       `protobuf:"varint,10,opt,name=kb_used_data,json=kbUsedData,proto3" json:"kb_used_data,omitempty"`
	KbUsedOmap         int64                       `protobuf:"varint,11,opt,name=kb_used_omap,json=kbUsedOmap,proto3" json:"kb_used_omap,omitempty"`
	KbUsedMeta         int64                       `protobuf:"varint,12,opt,name=kb_used_meta,json=kbUsedMeta,proto3" json:"kb_used_meta,omitempty"`
	KbAvail            int64                       `protobuf:"varint,13,opt,name=kb_avail,json=kbAvail,proto3" json:"kb_avail,omitempty"`
	Statfs             *OsdStats_StatFs            `protobuf:"bytes,14,opt,name=statfs,proto3" json:"statfs,omitempty"`
	HbPeers            []int64                     `protobuf:"varint,15,rep,packed,name=hb_peers,json=hbPeers,proto3" json:"hb_peers,omitempty"`
	SnapTrimQueueLen   int64                       `protobuf:"varint,16,opt,name=snap_trim_queue_len,json=snapTrimQueueLen,proto3" json:"snap_trim_queue_len,omitempty"`
	NumSnapTrimming    int64                       `protobuf:"varint,17,opt,name=num_snap_trimming,json=numSnapTrimming,proto3" json:"num_snap_trimming,omitempty"`
	NumShardsRepaired  int64                       `protobuf:"varint,18,opt,name=num_shards_repaired,json=numShardsRepaired,proto3" json:"num_shards_repaired,omitempty"`
	OpQueueAgeHist     *OsdStats_OpQueueAgeHist    `protobuf:"bytes,19,opt,name=op_queue_age_hist,json=opQueueAgeHist,proto3" json:"op_queue_age_hist,omitempty"`
	PerfStat           *OsdStats_PerfStat          `protobuf:"bytes,20,opt,name=perf_stat,json=perfStat,proto3" json:"perf_stat,omitempty"`
	Alerts             []string                    `protobuf:"bytes,21,rep,name=alerts,proto3" json:"alerts,omitempty"`
	NetworkPingTimes   []*OsdStats_NetworkPingTime `protobuf:"bytes,22,rep,name=network_ping_times,json=networkPingTimes,proto3" json:"network_ping_times,omitempty"`
}

func (x *OsdStats) Reset() {
	*x = OsdStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStats) ProtoMessage() {}

func (x *OsdStats) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStats.ProtoReflect.Descriptor instead.
func (*OsdStats) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{35}
}

func (x *OsdStats) GetOsd() int64 {
	if x != nil {
		return x.Osd
	}
	return 0
}

func (x *OsdStats) GetUpFrom() int64 {
	if x != nil {
		return x.UpFrom
	}
	return 0
}

func (x *OsdStats) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *OsdStats) GetNumPgs() int64 {
	if x != nil {
		return x.NumPgs
	}
	return 0
}

func (x *OsdStats) GetNumOsds() int64 {
	if x != nil {
		return x.NumOsds
	}
	return 0
}

func (x *OsdStats) GetNumPerPoolOsds() int64 {
	if x != nil {
		return x.NumPerPoolOsds
	}
	return 0
}

func (x *OsdStats) GetNumPerPoolOmapOsds() int64 {
	if x != nil {
		return x.NumPerPoolOmapOsds
	}
	return 0
}

func (x *OsdStats) GetKb() int64 {
	if x != nil {
		return x.Kb
	}
	return 0
}

func (x *OsdStats) GetKbUsed() int64 {
	if x != nil {
		return x.KbUsed
	}
	return 0
}

func (x *OsdStats) GetKbUsedData() int64 {
	if x != nil {
		return x.KbUsedData
	}
	return 0
}

func (x *OsdStats) GetKbUsedOmap() int64 {
	if x != nil {
		return x.KbUsedOmap
	}
	return 0
}

func (x *OsdStats) GetKbUsedMeta() int64 {
	if x != nil {
		return x.KbUsedMeta
	}
	return 0
}

func (x *OsdStats) GetKbAvail() int64 {
	if x != nil {
		return x.KbAvail
	}
	return 0
}

func (x *OsdStats) GetStatfs() *OsdStats_StatFs {
	if x != nil {
		return x.Statfs
	}
	return nil
}

func (x *OsdStats) GetHbPeers() []int64 {
	if x != nil {
		return x.HbPeers
	}
	return nil
}

func (x *OsdStats) GetSnapTrimQueueLen() int64 {
	if x != nil {
		return x.SnapTrimQueueLen
	}
	return 0
}

func (x *OsdStats) GetNumSnapTrimming() int64 {
	if x != nil {
		return x.NumSnapTrimming
	}
	return 0
}

func (x *OsdStats) GetNumShardsRepaired() int64 {
	if x != nil {
		return x.NumShardsRepaired
	}
	return 0
}

func (x *OsdStats) GetOpQueueAgeHist() *OsdStats_OpQueueAgeHist {
	if x != nil {
		return x.OpQueueAgeHist
	}
	return nil
}

func (x *OsdStats) GetPerfStat() *OsdStats_PerfStat {
	if x != nil {
		return x.PerfStat
	}
	return nil
}

func (x *OsdStats) GetAlerts() []string {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *OsdStats) GetNetworkPingTimes() []*OsdStats_NetworkPingTime {
	if x != nil {
		return x.NetworkPingTimes
	}
	return nil
}

type PoolStatFs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poolid                  int64 `protobuf:"varint,1,opt,name=poolid,proto3" json:"poolid,omitempty"`
	Osd                     int64 `protobuf:"varint,2,opt,name=osd,proto3" json:"osd,omitempty"`
	Total                   int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Available               int64 `protobuf:"varint,4,opt,name=available,proto3" json:"available,omitempty"`
	InternallyReserved      int64 `protobuf:"varint,5,opt,name=internally_reserved,json=internallyReserved,proto3" json:"internally_reserved,omitempty"`
	Allocated               int64 `protobuf:"varint,6,opt,name=allocated,proto3" json:"allocated,omitempty"`
	DataStored              int64 `protobuf:"varint,7,opt,name=data_stored,json=dataStored,proto3" json:"data_stored,omitempty"`
	DataCompressed          int64 `protobuf:"varint,8,opt,name=data_compressed,json=dataCompressed,proto3" json:"data_compressed,omitempty"`
	DataCompressedAllocated int64 `protobuf:"varint,9,opt,name=data_compressed_allocated,json=dataCompressedAllocated,proto3" json:"data_compressed_allocated,omitempty"`
	DataCompressedOriginal  int64 `protobuf:"varint,10,opt,name=data_compressed_original,json=dataCompressedOriginal,proto3" json:"data_compressed_original,omitempty"`
	OmapAllocated           int64 `protobuf:"varint,11,opt,name=omap_allocated,json=omapAllocated,proto3" json:"omap_allocated,omitempty"`
	InternalMetadata        int64 `protobuf:"varint,12,opt,name=internal_metadata,json=internalMetadata,proto3" json:"internal_metadata,omitempty"`
}

func (x *PoolStatFs) Reset() {
	*x = PoolStatFs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolStatFs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStatFs) ProtoMessage() {}

func (x *PoolStatFs) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStatFs.ProtoReflect.Descriptor instead.
func (*PoolStatFs) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{36}
}

func (x *PoolStatFs) GetPoolid() int64 {
	if x != nil {
		return x.Poolid
	}
	return 0
}

func (x *PoolStatFs) GetOsd() int64 {
	if x != nil {
		return x.Osd
	}
	return 0
}

func (x *PoolStatFs) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PoolStatFs) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *PoolStatFs) GetInternallyReserved() int64 {
	if x != nil {
		return x.InternallyReserved
	}
	return 0
}

func (x *PoolStatFs) GetAllocated() int64 {
	if x != nil {
		return x.Allocated
	}
	return 0
}

func (x *PoolStatFs) GetDataStored() int64 {
	if x != nil {
		return x.DataStored
	}
	return 0
}

func (x *PoolStatFs) GetDataCompressed() int64 {
	if x != nil {
		return x.DataCompressed
	}
	return 0
}

func (x *PoolStatFs) GetDataCompressedAllocated() int64 {
	if x != nil {
		return x.DataCompressedAllocated
	}
	return 0
}

func (x *PoolStatFs) GetDataCompressedOriginal() int64 {
	if x != nil {
		return x.DataCompressedOriginal
	}
	return 0
}

func (x *PoolStatFs) GetOmapAllocated() int64 {
	if x != nil {
		return x.OmapAllocated
	}
	return 0
}

func (x *PoolStatFs) GetInternalMetadata() int64 {
	if x != nil {
		return x.InternalMetadata
	}
	return 0
}

type PGStatsSum_PGStatsSum_StatSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumBytes                   int64 `protobuf:"varint,1,opt,name=num_bytes,json=numBytes,proto3" json:"num_bytes,omitempty"`
	NumObjects                 int64 `protobuf:"varint,2,opt,name=num_objects,json=numObjects,proto3" json:"num_objects,omitempty"`
	NumObjectClones            int64 `protobuf:"varint,3,opt,name=num_object_clones,json=numObjectClones,proto3" json:"num_object_clones,omitempty"`
	NumObjectCopies            int64 `protobuf:"varint,4,opt,name=num_object_copies,json=numObjectCopies,proto3" json:"num_object_copies,omitempty"`
	NumObjectsMissingOnPrimary int64 `protobuf:"varint,5,opt,name=num_objects_missing_on_primary,json=numObjectsMissingOnPrimary,proto3" json:"num_objects_missing_on_primary,omitempty"`
	NumObjectsMissing          int64 `protobuf:"varint,6,opt,name=num_objects_missing,json=numObjectsMissing,proto3" json:"num_objects_missing,omitempty"`
	NumObjectsDegraded         int64 `protobuf:"varint,7,opt,name=num_objects_degraded,json=numObjectsDegraded,proto3" json:"num_objects_degraded,omitempty"`
	NumObjectsMisplaced        int64 `protobuf:"varint,8,opt,name=num_objects_misplaced,json=numObjectsMisplaced,proto3" json:"num_objects_misplaced,omitempty"`
	NumObjectsUnfound          int64 `protobuf:"varint,9,opt,name=num_objects_unfound,json=numObjectsUnfound,proto3" json:"num_objects_unfound,omitempty"`
	NumObjectsDirty            int64 `protobuf:"varint,10,opt,name=num_objects_dirty,json=numObjectsDirty,proto3" json:"num_objects_dirty,omitempty"`
	NumWhiteouts               int64 `protobuf:"varint,11,opt,name=num_whiteouts,json=numWhiteouts,proto3" json:"num_whiteouts,omitempty"`
	NumRead                    int64 `protobuf:"varint,12,opt,name=num_read,json=numRead,proto3" json:"num_read,omitempty"`
	NumReadKb                  int64 `protobuf:"varint,13,opt,name=num_read_kb,json=numReadKb,proto3" json:"num_read_kb,omitempty"`
	NumWrite                   int64 `protobuf:"varint,14,opt,name=num_write,json=numWrite,proto3" json:"num_write,omitempty"`
	NumWriteKb                 int64 `protobuf:"varint,15,opt,name=num_write_kb,json=numWriteKb,proto3" json:"num_write_kb,omitempty"`
	NumScrubErrors             int64 `protobuf:"varint,16,opt,name=num_scrub_errors,json=numScrubErrors,proto3" json:"num_scrub_errors,omitempty"`
	NumShallowScrubErrors      int64 `protobuf:"varint,17,opt,name=num_shallow_scrub_errors,json=numShallowScrubErrors,proto3" json:"num_shallow_scrub_errors,omitempty"`
	NumDeepScrubErrors         int64 `protobuf:"varint,18,opt,name=num_deep_scrub_errors,json=numDeepScrubErrors,proto3" json:"num_deep_scrub_errors,omitempty"`
	NumObjectsRecovered        int64 `protobuf:"varint,19,opt,name=num_objects_recovered,json=numObjectsRecovered,proto3" json:"num_objects_recovered,omitempty"`
	NumBytesRecovered          int64 `protobuf:"varint,20,opt,name=num_bytes_recovered,json=numBytesRecovered,proto3" json:"num_bytes_recovered,omitempty"`
	NumKeysRecovered           int64 `protobuf:"varint,21,opt,name=num_keys_recovered,json=numKeysRecovered,proto3" json:"num_keys_recovered,omitempty"`
	NumObjectsOmap             int64 `protobuf:"varint,22,opt,name=num_objects_omap,json=numObjectsOmap,proto3" json:"num_objects_omap,omitempty"`
	NumObjectsHitSetArchive    int64 `protobuf:"varint,23,opt,name=num_objects_hit_set_archive,json=numObjectsHitSetArchive,proto3" json:"num_objects_hit_set_archive,omitempty"`
	NumBytesHitSetArchive      int64 `protobuf:"varint,24,opt,name=num_bytes_hit_set_archive,json=numBytesHitSetArchive,proto3" json:"num_bytes_hit_set_archive,omitempty"`
	NumFlush                   int64 `protobuf:"varint,25,opt,name=num_flush,json=numFlush,proto3" json:"num_flush,omitempty"`
	NumFlushKb                 int64 `protobuf:"varint,26,opt,name=num_flush_kb,json=numFlushKb,proto3" json:"num_flush_kb,omitempty"`
	NumEvict                   int64 `protobuf:"varint,27,opt,name=num_evict,json=numEvict,proto3" json:"num_evict,omitempty"`
	NumEvictKb                 int64 `protobuf:"varint,28,opt,name=num_evict_kb,json=numEvictKb,proto3" json:"num_evict_kb,omitempty"`
	NumPromote                 int64 `protobuf:"varint,29,opt,name=num_promote,json=numPromote,proto3" json:"num_promote,omitempty"`
	NumFlushModeHigh           int64 `protobuf:"varint,30,opt,name=num_flush_mode_high,json=numFlushModeHigh,proto3" json:"num_flush_mode_high,omitempty"`
	NumFlushModeLow            int64 `protobuf:"varint,31,opt,name=num_flush_mode_low,json=numFlushModeLow,proto3" json:"num_flush_mode_low,omitempty"`
	NumEvictModeSome           int64 `protobuf:"varint,32,opt,name=num_evict_mode_some,json=numEvictModeSome,proto3" json:"num_evict_mode_some,omitempty"`
	NumEvictModeFull           int64 `protobuf:"varint,33,opt,name=num_evict_mode_full,json=numEvictModeFull,proto3" json:"num_evict_mode_full,omitempty"`
	NumObjectsPinned           int64 `protobuf:"varint,34,opt,name=num_objects_pinned,json=numObjectsPinned,proto3" json:"num_objects_pinned,omitempty"`
	NumLegacySnapsets          int64 `protobuf:"varint,35,opt,name=num_legacy_snapsets,json=numLegacySnapsets,proto3" json:"num_legacy_snapsets,omitempty"`
	NumLargeOmapObjects        int64 `protobuf:"varint,36,opt,name=num_large_omap_objects,json=numLargeOmapObjects,proto3" json:"num_large_omap_objects,omitempty"`
	NumObjectsManifest         int64 `protobuf:"varint,37,opt,name=num_objects_manifest,json=numObjectsManifest,proto3" json:"num_objects_manifest,omitempty"`
	NumOmapBytes               int64 `protobuf:"varint,38,opt,name=num_omap_bytes,json=numOmapBytes,proto3" json:"num_omap_bytes,omitempty"`
	NumOmapKeys                int64 `protobuf:"varint,39,opt,name=num_omap_keys,json=numOmapKeys,proto3" json:"num_omap_keys,omitempty"`
	NumObjectsRepaired         int64 `protobuf:"varint,40,opt,name=num_objects_repaired,json=numObjectsRepaired,proto3" json:"num_objects_repaired,omitempty"`
}

func (x *PGStatsSum_PGStatsSum_StatSum) Reset() {
	*x = PGStatsSum_PGStatsSum_StatSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PGStatsSum_PGStatsSum_StatSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGStatsSum_PGStatsSum_StatSum) ProtoMessage() {}

func (x *PGStatsSum_PGStatsSum_StatSum) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGStatsSum_PGStatsSum_StatSum.ProtoReflect.Descriptor instead.
func (*PGStatsSum_PGStatsSum_StatSum) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{30, 0}
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumBytes() int64 {
	if x != nil {
		return x.NumBytes
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjects() int64 {
	if x != nil {
		return x.NumObjects
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectClones() int64 {
	if x != nil {
		return x.NumObjectClones
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectCopies() int64 {
	if x != nil {
		return x.NumObjectCopies
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsMissingOnPrimary() int64 {
	if x != nil {
		return x.NumObjectsMissingOnPrimary
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsMissing() int64 {
	if x != nil {
		return x.NumObjectsMissing
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsDegraded() int64 {
	if x != nil {
		return x.NumObjectsDegraded
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsMisplaced() int64 {
	if x != nil {
		return x.NumObjectsMisplaced
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsUnfound() int64 {
	if x != nil {
		return x.NumObjectsUnfound
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsDirty() int64 {
	if x != nil {
		return x.NumObjectsDirty
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumWhiteouts() int64 {
	if x != nil {
		return x.NumWhiteouts
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumRead() int64 {
	if x != nil {
		return x.NumRead
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumReadKb() int64 {
	if x != nil {
		return x.NumReadKb
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumWrite() int64 {
	if x != nil {
		return x.NumWrite
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumWriteKb() int64 {
	if x != nil {
		return x.NumWriteKb
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumScrubErrors() int64 {
	if x != nil {
		return x.NumScrubErrors
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumShallowScrubErrors() int64 {
	if x != nil {
		return x.NumShallowScrubErrors
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumDeepScrubErrors() int64 {
	if x != nil {
		return x.NumDeepScrubErrors
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsRecovered() int64 {
	if x != nil {
		return x.NumObjectsRecovered
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumBytesRecovered() int64 {
	if x != nil {
		return x.NumBytesRecovered
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumKeysRecovered() int64 {
	if x != nil {
		return x.NumKeysRecovered
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsOmap() int64 {
	if x != nil {
		return x.NumObjectsOmap
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsHitSetArchive() int64 {
	if x != nil {
		return x.NumObjectsHitSetArchive
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumBytesHitSetArchive() int64 {
	if x != nil {
		return x.NumBytesHitSetArchive
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumFlush() int64 {
	if x != nil {
		return x.NumFlush
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumFlushKb() int64 {
	if x != nil {
		return x.NumFlushKb
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumEvict() int64 {
	if x != nil {
		return x.NumEvict
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumEvictKb() int64 {
	if x != nil {
		return x.NumEvictKb
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumPromote() int64 {
	if x != nil {
		return x.NumPromote
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumFlushModeHigh() int64 {
	if x != nil {
		return x.NumFlushModeHigh
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumFlushModeLow() int64 {
	if x != nil {
		return x.NumFlushModeLow
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumEvictModeSome() int64 {
	if x != nil {
		return x.NumEvictModeSome
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumEvictModeFull() int64 {
	if x != nil {
		return x.NumEvictModeFull
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsPinned() int64 {
	if x != nil {
		return x.NumObjectsPinned
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumLegacySnapsets() int64 {
	if x != nil {
		return x.NumLegacySnapsets
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumLargeOmapObjects() int64 {
	if x != nil {
		return x.NumLargeOmapObjects
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsManifest() int64 {
	if x != nil {
		return x.NumObjectsManifest
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumOmapBytes() int64 {
	if x != nil {
		return x.NumOmapBytes
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumOmapKeys() int64 {
	if x != nil {
		return x.NumOmapKeys
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StatSum) GetNumObjectsRepaired() int64 {
	if x != nil {
		return x.NumObjectsRepaired
	}
	return 0
}

type PGStatsSum_PGStatsSum_StoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                   int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available               int64 `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	InternallyReserved      int64 `protobuf:"varint,3,opt,name=internally_reserved,json=internallyReserved,proto3" json:"internally_reserved,omitempty"`
	Allocated               int64 `protobuf:"varint,4,opt,name=allocated,proto3" json:"allocated,omitempty"`
	DataStored              int64 `protobuf:"varint,5,opt,name=data_stored,json=dataStored,proto3" json:"data_stored,omitempty"`
	DataCompressed          int64 `protobuf:"varint,6,opt,name=data_compressed,json=dataCompressed,proto3" json:"data_compressed,omitempty"`
	DataCompressedAllocated int64 `protobuf:"varint,7,opt,name=data_compressed_allocated,json=dataCompressedAllocated,proto3" json:"data_compressed_allocated,omitempty"`
	DataCompressedOriginal  int64 `protobuf:"varint,8,opt,name=data_compressed_original,json=dataCompressedOriginal,proto3" json:"data_compressed_original,omitempty"`
	OmapAllocated           int64 `protobuf:"varint,9,opt,name=omap_allocated,json=omapAllocated,proto3" json:"omap_allocated,omitempty"`
	InternalMetadata        int64 `protobuf:"varint,10,opt,name=internal_metadata,json=internalMetadata,proto3" json:"internal_metadata,omitempty"`
}

func (x *PGStatsSum_PGStatsSum_StoreStats) Reset() {
	*x = PGStatsSum_PGStatsSum_StoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PGStatsSum_PGStatsSum_StoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGStatsSum_PGStatsSum_StoreStats) ProtoMessage() {}

func (x *PGStatsSum_PGStatsSum_StoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGStatsSum_PGStatsSum_StoreStats.ProtoReflect.Descriptor instead.
func (*PGStatsSum_PGStatsSum_StoreStats) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{30, 1}
}

func (x *PGStatsSum_PGStatsSum_StoreStats) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StoreStats) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StoreStats) GetInternallyReserved() int64 {
	if x != nil {
		return x.InternallyReserved
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StoreStats) GetAllocated() int64 {
	if x != nil {
		return x.Allocated
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StoreStats) GetDataStored() int64 {
	if x != nil {
		return x.DataStored
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StoreStats) GetDataCompressed() int64 {
	if x != nil {
		return x.DataCompressed
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StoreStats) GetDataCompressedAllocated() int64 {
	if x != nil {
		return x.DataCompressedAllocated
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StoreStats) GetDataCompressedOriginal() int64 {
	if x != nil {
		return x.DataCompressedOriginal
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StoreStats) GetOmapAllocated() int64 {
	if x != nil {
		return x.OmapAllocated
	}
	return 0
}

func (x *PGStatsSum_PGStatsSum_StoreStats) GetInternalMetadata() int64 {
	if x != nil {
		return x.InternalMetadata
	}
	return 0
}

type OSDStatsSum_StatFs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                   int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available               int64 `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	InternallyReserved      int64 `protobuf:"varint,3,opt,name=internally_reserved,json=internallyReserved,proto3" json:"internally_reserved,omitempty"`
	Allocated               int64 `protobuf:"varint,4,opt,name=allocated,proto3" json:"allocated,omitempty"`
	DataStored              int64 `protobuf:"varint,5,opt,name=data_stored,json=dataStored,proto3" json:"data_stored,omitempty"`
	DataCompressed          int64 `protobuf:"varint,6,opt,name=data_compressed,json=dataCompressed,proto3" json:"data_compressed,omitempty"`
	DataCompressedAllocated int64 `protobuf:"varint,7,opt,name=data_compressed_allocated,json=dataCompressedAllocated,proto3" json:"data_compressed_allocated,omitempty"`
	DataCompressedOriginal  int64 `protobuf:"varint,8,opt,name=data_compressed_original,json=dataCompressedOriginal,proto3" json:"data_compressed_original,omitempty"`
	OmapAllocated           int64 `protobuf:"varint,9,opt,name=omap_allocated,json=omapAllocated,proto3" json:"omap_allocated,omitempty"`
	InternalMetadata        int64 `protobuf:"varint,10,opt,name=internal_metadata,json=internalMetadata,proto3" json:"internal_metadata,omitempty"`
}

func (x *OSDStatsSum_StatFs) Reset() {
	*x = OSDStatsSum_StatFs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDStatsSum_StatFs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDStatsSum_StatFs) ProtoMessage() {}

func (x *OSDStatsSum_StatFs) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDStatsSum_StatFs.ProtoReflect.Descriptor instead.
func (*OSDStatsSum_StatFs) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{31, 0}
}

func (x *OSDStatsSum_StatFs) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OSDStatsSum_StatFs) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *OSDStatsSum_StatFs) GetInternallyReserved() int64 {
	if x != nil {
		return x.InternallyReserved
	}
	return 0
}

func (x *OSDStatsSum_StatFs) GetAllocated() int64 {
	if x != nil {
		return x.Allocated
	}
	return 0
}

func (x *OSDStatsSum_StatFs) GetDataStored() int64 {
	if x != nil {
		return x.DataStored
	}
	return 0
}

func (x *OSDStatsSum_StatFs) GetDataCompressed() int64 {
	if x != nil {
		return x.DataCompressed
	}
	return 0
}

func (x *OSDStatsSum_StatFs) GetDataCompressedAllocated() int64 {
	if x != nil {
		return x.DataCompressedAllocated
	}
	return 0
}

func (x *OSDStatsSum_StatFs) GetDataCompressedOriginal() int64 {
	if x != nil {
		return x.DataCompressedOriginal
	}
	return 0
}

func (x *OSDStatsSum_StatFs) GetOmapAllocated() int64 {
	if x != nil {
		return x.OmapAllocated
	}
	return 0
}

func (x *OSDStatsSum_StatFs) GetInternalMetadata() int64 {
	if x != nil {
		return x.InternalMetadata
	}
	return 0
}

type OSDStatsSum_OpQueueAgeHist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Histogram  []int64 `protobuf:"varint,1,rep,packed,name=histogram,proto3" json:"histogram,omitempty"`
	UpperBound int64   `protobuf:"varint,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (x *OSDStatsSum_OpQueueAgeHist) Reset() {
	*x = OSDStatsSum_OpQueueAgeHist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDStatsSum_OpQueueAgeHist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDStatsSum_OpQueueAgeHist) ProtoMessage() {}

func (x *OSDStatsSum_OpQueueAgeHist) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDStatsSum_OpQueueAgeHist.ProtoReflect.Descriptor instead.
func (*OSDStatsSum_OpQueueAgeHist) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{31, 1}
}

func (x *OSDStatsSum_OpQueueAgeHist) GetHistogram() []int64 {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *OSDStatsSum_OpQueueAgeHist) GetUpperBound() int64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

type OSDStatsSum_PerfStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitLatencyMs int64 `protobuf:"varint,1,opt,name=commit_latency_ms,json=commitLatencyMs,proto3" json:"commit_latency_ms,omitempty"`
	ApplyLatencyMs  int64 `protobuf:"varint,2,opt,name=apply_latency_ms,json=applyLatencyMs,proto3" json:"apply_latency_ms,omitempty"`
	CommitLatencyNs int64 `protobuf:"varint,3,opt,name=commit_latency_ns,json=commitLatencyNs,proto3" json:"commit_latency_ns,omitempty"`
	ApplyLatencyNs  int64 `protobuf:"varint,4,opt,name=apply_latency_ns,json=applyLatencyNs,proto3" json:"apply_latency_ns,omitempty"`
}

func (x *OSDStatsSum_PerfStat) Reset() {
	*x = OSDStatsSum_PerfStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDStatsSum_PerfStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDStatsSum_PerfStat) ProtoMessage() {}

func (x *OSDStatsSum_PerfStat) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDStatsSum_PerfStat.ProtoReflect.Descriptor instead.
func (*OSDStatsSum_PerfStat) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{31, 2}
}

func (x *OSDStatsSum_PerfStat) GetCommitLatencyMs() int64 {
	if x != nil {
		return x.CommitLatencyMs
	}
	return 0
}

func (x *OSDStatsSum_PerfStat) GetApplyLatencyMs() int64 {
	if x != nil {
		return x.ApplyLatencyMs
	}
	return 0
}

func (x *OSDStatsSum_PerfStat) GetCommitLatencyNs() int64 {
	if x != nil {
		return x.CommitLatencyNs
	}
	return 0
}

func (x *OSDStatsSum_PerfStat) GetApplyLatencyNs() int64 {
	if x != nil {
		return x.ApplyLatencyNs
	}
	return 0
}

type OSDStatsSum_NetworkPingTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Osd        int64                                    `protobuf:"varint,1,opt,name=osd,proto3" json:"osd,omitempty"`
	LastUpdate *timestamppb.Timestamp                   `protobuf:"bytes,2,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Interfaces []*OSDStatsSum_NetworkPingTime_Interface `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *OSDStatsSum_NetworkPingTime) Reset() {
	*x = OSDStatsSum_NetworkPingTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDStatsSum_NetworkPingTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDStatsSum_NetworkPingTime) ProtoMessage() {}

func (x *OSDStatsSum_NetworkPingTime) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDStatsSum_NetworkPingTime.ProtoReflect.Descriptor instead.
func (*OSDStatsSum_NetworkPingTime) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{31, 3}
}

func (x *OSDStatsSum_NetworkPingTime) GetOsd() int64 {
	if x != nil {
		return x.Osd
	}
	return 0
}

func (x *OSDStatsSum_NetworkPingTime) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *OSDStatsSum_NetworkPingTime) GetInterfaces() []*OSDStatsSum_NetworkPingTime_Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type OSDStatsSum_NetworkPingTime_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string                                         `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Average       *OSDStatsSum_NetworkPingTime_Interface_Average `protobuf:"bytes,2,opt,name=average,proto3" json:"average,omitempty"`
	Min           *OSDStatsSum_NetworkPingTime_Interface_Min     `protobuf:"bytes,3,opt,name=min,proto3" json:"min,omitempty"`
	Max           *OSDStatsSum_NetworkPingTime_Interface_Max     `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	Last          float64                                        `protobuf:"fixed64,5,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *OSDStatsSum_NetworkPingTime_Interface) Reset() {
	*x = OSDStatsSum_NetworkPingTime_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDStatsSum_NetworkPingTime_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDStatsSum_NetworkPingTime_Interface) ProtoMessage() {}

func (x *OSDStatsSum_NetworkPingTime_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDStatsSum_NetworkPingTime_Interface.ProtoReflect.Descriptor instead.
func (*OSDStatsSum_NetworkPingTime_Interface) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{31, 3, 0}
}

func (x *OSDStatsSum_NetworkPingTime_Interface) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *OSDStatsSum_NetworkPingTime_Interface) GetAverage() *OSDStatsSum_NetworkPingTime_Interface_Average {
	if x != nil {
		return x.Average
	}
	return nil
}

func (x *OSDStatsSum_NetworkPingTime_Interface) GetMin() *OSDStatsSum_NetworkPingTime_Interface_Min {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OSDStatsSum_NetworkPingTime_Interface) GetMax() *OSDStatsSum_NetworkPingTime_Interface_Max {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OSDStatsSum_NetworkPingTime_Interface) GetLast() float64 {
	if x != nil {
		return x.Last
	}
	return 0
}

type OSDStatsSum_NetworkPingTime_Interface_Average struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min1  float64 `protobuf:"fixed64,1,opt,name=min1,proto3" json:"min1,omitempty"`
	Min5  float64 `protobuf:"fixed64,2,opt,name=min5,proto3" json:"min5,omitempty"`
	Min15 float64 `protobuf:"fixed64,3,opt,name=min15,proto3" json:"min15,omitempty"`
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Average) Reset() {
	*x = OSDStatsSum_NetworkPingTime_Interface_Average{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Average) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDStatsSum_NetworkPingTime_Interface_Average) ProtoMessage() {}

func (x *OSDStatsSum_NetworkPingTime_Interface_Average) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDStatsSum_NetworkPingTime_Interface_Average.ProtoReflect.Descriptor instead.
func (*OSDStatsSum_NetworkPingTime_Interface_Average) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{31, 3, 0, 0}
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Average) GetMin1() float64 {
	if x != nil {
		return x.Min1
	}
	return 0
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Average) GetMin5() float64 {
	if x != nil {
		return x.Min5
	}
	return 0
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Average) GetMin15() float64 {
	if x != nil {
		return x.Min15
	}
	return 0
}

type OSDStatsSum_NetworkPingTime_Interface_Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min1  float64 `protobuf:"fixed64,1,opt,name=min1,proto3" json:"min1,omitempty"`
	Min5  float64 `protobuf:"fixed64,2,opt,name=min5,proto3" json:"min5,omitempty"`
	Min15 float64 `protobuf:"fixed64,3,opt,name=min15,proto3" json:"min15,omitempty"`
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Min) Reset() {
	*x = OSDStatsSum_NetworkPingTime_Interface_Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDStatsSum_NetworkPingTime_Interface_Min) ProtoMessage() {}

func (x *OSDStatsSum_NetworkPingTime_Interface_Min) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDStatsSum_NetworkPingTime_Interface_Min.ProtoReflect.Descriptor instead.
func (*OSDStatsSum_NetworkPingTime_Interface_Min) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{31, 3, 0, 1}
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Min) GetMin1() float64 {
	if x != nil {
		return x.Min1
	}
	return 0
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Min) GetMin5() float64 {
	if x != nil {
		return x.Min5
	}
	return 0
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Min) GetMin15() float64 {
	if x != nil {
		return x.Min15
	}
	return 0
}

type OSDStatsSum_NetworkPingTime_Interface_Max struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min1  float64 `protobuf:"fixed64,1,opt,name=min1,proto3" json:"min1,omitempty"`
	Min5  float64 `protobuf:"fixed64,2,opt,name=min5,proto3" json:"min5,omitempty"`
	Min15 float64 `protobuf:"fixed64,3,opt,name=min15,proto3" json:"min15,omitempty"`
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Max) Reset() {
	*x = OSDStatsSum_NetworkPingTime_Interface_Max{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Max) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDStatsSum_NetworkPingTime_Interface_Max) ProtoMessage() {}

func (x *OSDStatsSum_NetworkPingTime_Interface_Max) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDStatsSum_NetworkPingTime_Interface_Max.ProtoReflect.Descriptor instead.
func (*OSDStatsSum_NetworkPingTime_Interface_Max) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{31, 3, 0, 2}
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Max) GetMin1() float64 {
	if x != nil {
		return x.Min1
	}
	return 0
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Max) GetMin5() float64 {
	if x != nil {
		return x.Min5
	}
	return 0
}

func (x *OSDStatsSum_NetworkPingTime_Interface_Max) GetMin15() float64 {
	if x != nil {
		return x.Min15
	}
	return 0
}

type PGStatsDelta_PGStatsDelta_StatSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumBytes                   int64 `protobuf:"varint,1,opt,name=num_bytes,json=numBytes,proto3" json:"num_bytes,omitempty"`
	NumObjects                 int64 `protobuf:"varint,2,opt,name=num_objects,json=numObjects,proto3" json:"num_objects,omitempty"`
	NumObjectClones            int64 `protobuf:"varint,3,opt,name=num_object_clones,json=numObjectClones,proto3" json:"num_object_clones,omitempty"`
	NumObjectCopies            int64 `protobuf:"varint,4,opt,name=num_object_copies,json=numObjectCopies,proto3" json:"num_object_copies,omitempty"`
	NumObjectsMissingOnPrimary int64 `protobuf:"varint,5,opt,name=num_objects_missing_on_primary,json=numObjectsMissingOnPrimary,proto3" json:"num_objects_missing_on_primary,omitempty"`
	NumObjectsMissing          int64 `protobuf:"varint,6,opt,name=num_objects_missing,json=numObjectsMissing,proto3" json:"num_objects_missing,omitempty"`
	NumObjectsDegraded         int64 `protobuf:"varint,7,opt,name=num_objects_degraded,json=numObjectsDegraded,proto3" json:"num_objects_degraded,omitempty"`
	NumObjectsMisplaced        int64 `protobuf:"varint,8,opt,name=num_objects_misplaced,json=numObjectsMisplaced,proto3" json:"num_objects_misplaced,omitempty"`
	NumObjectsUnfound          int64 `protobuf:"varint,9,opt,name=num_objects_unfound,json=numObjectsUnfound,proto3" json:"num_objects_unfound,omitempty"`
	NumObjectsDirty            int64 `protobuf:"varint,10,opt,name=num_objects_dirty,json=numObjectsDirty,proto3" json:"num_objects_dirty,omitempty"`
	NumWhiteouts               int64 `protobuf:"varint,11,opt,name=num_whiteouts,json=numWhiteouts,proto3" json:"num_whiteouts,omitempty"`
	NumRead                    int64 `protobuf:"varint,12,opt,name=num_read,json=numRead,proto3" json:"num_read,omitempty"`
	NumReadKb                  int64 `protobuf:"varint,13,opt,name=num_read_kb,json=numReadKb,proto3" json:"num_read_kb,omitempty"`
	NumWrite                   int64 `protobuf:"varint,14,opt,name=num_write,json=numWrite,proto3" json:"num_write,omitempty"`
	NumWriteKb                 int64 `protobuf:"varint,15,opt,name=num_write_kb,json=numWriteKb,proto3" json:"num_write_kb,omitempty"`
	NumScrubErrors             int64 `protobuf:"varint,16,opt,name=num_scrub_errors,json=numScrubErrors,proto3" json:"num_scrub_errors,omitempty"`
	NumShallowScrubErrors      int64 `protobuf:"varint,17,opt,name=num_shallow_scrub_errors,json=numShallowScrubErrors,proto3" json:"num_shallow_scrub_errors,omitempty"`
	NumDeepScrubErrors         int64 `protobuf:"varint,18,opt,name=num_deep_scrub_errors,json=numDeepScrubErrors,proto3" json:"num_deep_scrub_errors,omitempty"`
	NumObjectsRecovered        int64 `protobuf:"varint,19,opt,name=num_objects_recovered,json=numObjectsRecovered,proto3" json:"num_objects_recovered,omitempty"`
	NumBytesRecovered          int64 `protobuf:"varint,20,opt,name=num_bytes_recovered,json=numBytesRecovered,proto3" json:"num_bytes_recovered,omitempty"`
	NumKeysRecovered           int64 `protobuf:"varint,21,opt,name=num_keys_recovered,json=numKeysRecovered,proto3" json:"num_keys_recovered,omitempty"`
	NumObjectsOmap             int64 `protobuf:"varint,22,opt,name=num_objects_omap,json=numObjectsOmap,proto3" json:"num_objects_omap,omitempty"`
	NumObjectsHitSetArchive    int64 `protobuf:"varint,23,opt,name=num_objects_hit_set_archive,json=numObjectsHitSetArchive,proto3" json:"num_objects_hit_set_archive,omitempty"`
	NumBytesHitSetArchive      int64 `protobuf:"varint,24,opt,name=num_bytes_hit_set_archive,json=numBytesHitSetArchive,proto3" json:"num_bytes_hit_set_archive,omitempty"`
	NumFlush                   int64 `protobuf:"varint,25,opt,name=num_flush,json=numFlush,proto3" json:"num_flush,omitempty"`
	NumFlushKb                 int64 `protobuf:"varint,26,opt,name=num_flush_kb,json=numFlushKb,proto3" json:"num_flush_kb,omitempty"`
	NumEvict                   int64 `protobuf:"varint,27,opt,name=num_evict,json=numEvict,proto3" json:"num_evict,omitempty"`
	NumEvictKb                 int64 `protobuf:"varint,28,opt,name=num_evict_kb,json=numEvictKb,proto3" json:"num_evict_kb,omitempty"`
	NumPromote                 int64 `protobuf:"varint,29,opt,name=num_promote,json=numPromote,proto3" json:"num_promote,omitempty"`
	NumFlushModeHigh           int64 `protobuf:"varint,30,opt,name=num_flush_mode_high,json=numFlushModeHigh,proto3" json:"num_flush_mode_high,omitempty"`
	NumFlushModeLow            int64 `protobuf:"varint,31,opt,name=num_flush_mode_low,json=numFlushModeLow,proto3" json:"num_flush_mode_low,omitempty"`
	NumEvictModeSome           int64 `protobuf:"varint,32,opt,name=num_evict_mode_some,json=numEvictModeSome,proto3" json:"num_evict_mode_some,omitempty"`
	NumEvictModeFull           int64 `protobuf:"varint,33,opt,name=num_evict_mode_full,json=numEvictModeFull,proto3" json:"num_evict_mode_full,omitempty"`
	NumObjectsPinned           int64 `protobuf:"varint,34,opt,name=num_objects_pinned,json=numObjectsPinned,proto3" json:"num_objects_pinned,omitempty"`
	NumLegacySnapsets          int64 `protobuf:"varint,35,opt,name=num_legacy_snapsets,json=numLegacySnapsets,proto3" json:"num_legacy_snapsets,omitempty"`
	NumLargeOmapObjects        int64 `protobuf:"varint,36,opt,name=num_large_omap_objects,json=numLargeOmapObjects,proto3" json:"num_large_omap_objects,omitempty"`
	NumObjectsManifest         int64 `protobuf:"varint,37,opt,name=num_objects_manifest,json=numObjectsManifest,proto3" json:"num_objects_manifest,omitempty"`
	NumOmapBytes               int64 `protobuf:"varint,38,opt,name=num_omap_bytes,json=numOmapBytes,proto3" json:"num_omap_bytes,omitempty"`
	NumOmapKeys                int64 `protobuf:"varint,39,opt,name=num_omap_keys,json=numOmapKeys,proto3" json:"num_omap_keys,omitempty"`
	NumObjectsRepaired         int64 `protobuf:"varint,40,opt,name=num_objects_repaired,json=numObjectsRepaired,proto3" json:"num_objects_repaired,omitempty"`
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) Reset() {
	*x = PGStatsDelta_PGStatsDelta_StatSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGStatsDelta_PGStatsDelta_StatSum) ProtoMessage() {}

func (x *PGStatsDelta_PGStatsDelta_StatSum) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGStatsDelta_PGStatsDelta_StatSum.ProtoReflect.Descriptor instead.
func (*PGStatsDelta_PGStatsDelta_StatSum) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{32, 0}
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumBytes() int64 {
	if x != nil {
		return x.NumBytes
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjects() int64 {
	if x != nil {
		return x.NumObjects
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectClones() int64 {
	if x != nil {
		return x.NumObjectClones
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectCopies() int64 {
	if x != nil {
		return x.NumObjectCopies
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsMissingOnPrimary() int64 {
	if x != nil {
		return x.NumObjectsMissingOnPrimary
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsMissing() int64 {
	if x != nil {
		return x.NumObjectsMissing
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsDegraded() int64 {
	if x != nil {
		return x.NumObjectsDegraded
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsMisplaced() int64 {
	if x != nil {
		return x.NumObjectsMisplaced
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsUnfound() int64 {
	if x != nil {
		return x.NumObjectsUnfound
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsDirty() int64 {
	if x != nil {
		return x.NumObjectsDirty
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumWhiteouts() int64 {
	if x != nil {
		return x.NumWhiteouts
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumRead() int64 {
	if x != nil {
		return x.NumRead
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumReadKb() int64 {
	if x != nil {
		return x.NumReadKb
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumWrite() int64 {
	if x != nil {
		return x.NumWrite
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumWriteKb() int64 {
	if x != nil {
		return x.NumWriteKb
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumScrubErrors() int64 {
	if x != nil {
		return x.NumScrubErrors
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumShallowScrubErrors() int64 {
	if x != nil {
		return x.NumShallowScrubErrors
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumDeepScrubErrors() int64 {
	if x != nil {
		return x.NumDeepScrubErrors
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsRecovered() int64 {
	if x != nil {
		return x.NumObjectsRecovered
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumBytesRecovered() int64 {
	if x != nil {
		return x.NumBytesRecovered
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumKeysRecovered() int64 {
	if x != nil {
		return x.NumKeysRecovered
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsOmap() int64 {
	if x != nil {
		return x.NumObjectsOmap
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsHitSetArchive() int64 {
	if x != nil {
		return x.NumObjectsHitSetArchive
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumBytesHitSetArchive() int64 {
	if x != nil {
		return x.NumBytesHitSetArchive
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumFlush() int64 {
	if x != nil {
		return x.NumFlush
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumFlushKb() int64 {
	if x != nil {
		return x.NumFlushKb
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumEvict() int64 {
	if x != nil {
		return x.NumEvict
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumEvictKb() int64 {
	if x != nil {
		return x.NumEvictKb
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumPromote() int64 {
	if x != nil {
		return x.NumPromote
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumFlushModeHigh() int64 {
	if x != nil {
		return x.NumFlushModeHigh
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumFlushModeLow() int64 {
	if x != nil {
		return x.NumFlushModeLow
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumEvictModeSome() int64 {
	if x != nil {
		return x.NumEvictModeSome
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumEvictModeFull() int64 {
	if x != nil {
		return x.NumEvictModeFull
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsPinned() int64 {
	if x != nil {
		return x.NumObjectsPinned
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumLegacySnapsets() int64 {
	if x != nil {
		return x.NumLegacySnapsets
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumLargeOmapObjects() int64 {
	if x != nil {
		return x.NumLargeOmapObjects
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsManifest() int64 {
	if x != nil {
		return x.NumObjectsManifest
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumOmapBytes() int64 {
	if x != nil {
		return x.NumOmapBytes
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumOmapKeys() int64 {
	if x != nil {
		return x.NumOmapKeys
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StatSum) GetNumObjectsRepaired() int64 {
	if x != nil {
		return x.NumObjectsRepaired
	}
	return 0
}

type PGStatsDelta_PGStatsDelta_StoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                   int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available               int64 `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	InternallyReserved      int64 `protobuf:"varint,3,opt,name=internally_reserved,json=internallyReserved,proto3" json:"internally_reserved,omitempty"`
	Allocated               int64 `protobuf:"varint,4,opt,name=allocated,proto3" json:"allocated,omitempty"`
	DataStored              int64 `protobuf:"varint,5,opt,name=data_stored,json=dataStored,proto3" json:"data_stored,omitempty"`
	DataCompressed          int64 `protobuf:"varint,6,opt,name=data_compressed,json=dataCompressed,proto3" json:"data_compressed,omitempty"`
	DataCompressedAllocated int64 `protobuf:"varint,7,opt,name=data_compressed_allocated,json=dataCompressedAllocated,proto3" json:"data_compressed_allocated,omitempty"`
	DataCompressedOriginal  int64 `protobuf:"varint,8,opt,name=data_compressed_original,json=dataCompressedOriginal,proto3" json:"data_compressed_original,omitempty"`
	OmapAllocated           int64 `protobuf:"varint,9,opt,name=omap_allocated,json=omapAllocated,proto3" json:"omap_allocated,omitempty"`
	InternalMetadata        int64 `protobuf:"varint,10,opt,name=internal_metadata,json=internalMetadata,proto3" json:"internal_metadata,omitempty"`
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) Reset() {
	*x = PGStatsDelta_PGStatsDelta_StoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGStatsDelta_PGStatsDelta_StoreStats) ProtoMessage() {}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGStatsDelta_PGStatsDelta_StoreStats.ProtoReflect.Descriptor instead.
func (*PGStatsDelta_PGStatsDelta_StoreStats) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{32, 1}
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) GetInternallyReserved() int64 {
	if x != nil {
		return x.InternallyReserved
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) GetAllocated() int64 {
	if x != nil {
		return x.Allocated
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) GetDataStored() int64 {
	if x != nil {
		return x.DataStored
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) GetDataCompressed() int64 {
	if x != nil {
		return x.DataCompressed
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) GetDataCompressedAllocated() int64 {
	if x != nil {
		return x.DataCompressedAllocated
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) GetDataCompressedOriginal() int64 {
	if x != nil {
		return x.DataCompressedOriginal
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) GetOmapAllocated() int64 {
	if x != nil {
		return x.OmapAllocated
	}
	return 0
}

func (x *PGStatsDelta_PGStatsDelta_StoreStats) GetInternalMetadata() int64 {
	if x != nil {
		return x.InternalMetadata
	}
	return 0
}

type PGStat_PGStat_StatSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumBytes                   int64 `protobuf:"varint,1,opt,name=num_bytes,json=numBytes,proto3" json:"num_bytes,omitempty"`
	NumObjects                 int64 `protobuf:"varint,2,opt,name=num_objects,json=numObjects,proto3" json:"num_objects,omitempty"`
	NumObjectClones            int64 `protobuf:"varint,3,opt,name=num_object_clones,json=numObjectClones,proto3" json:"num_object_clones,omitempty"`
	NumObjectCopies            int64 `protobuf:"varint,4,opt,name=num_object_copies,json=numObjectCopies,proto3" json:"num_object_copies,omitempty"`
	NumObjectsMissingOnPrimary int64 `protobuf:"varint,5,opt,name=num_objects_missing_on_primary,json=numObjectsMissingOnPrimary,proto3" json:"num_objects_missing_on_primary,omitempty"`
	NumObjectsMissing          int64 `protobuf:"varint,6,opt,name=num_objects_missing,json=numObjectsMissing,proto3" json:"num_objects_missing,omitempty"`
	NumObjectsDegraded         int64 `protobuf:"varint,7,opt,name=num_objects_degraded,json=numObjectsDegraded,proto3" json:"num_objects_degraded,omitempty"`
	NumObjectsMisplaced        int64 `protobuf:"varint,8,opt,name=num_objects_misplaced,json=numObjectsMisplaced,proto3" json:"num_objects_misplaced,omitempty"`
	NumObjectsUnfound          int64 `protobuf:"varint,9,opt,name=num_objects_unfound,json=numObjectsUnfound,proto3" json:"num_objects_unfound,omitempty"`
	NumObjectsDirty            int64 `protobuf:"varint,10,opt,name=num_objects_dirty,json=numObjectsDirty,proto3" json:"num_objects_dirty,omitempty"`
	NumWhiteouts               int64 `protobuf:"varint,11,opt,name=num_whiteouts,json=numWhiteouts,proto3" json:"num_whiteouts,omitempty"`
	NumRead                    int64 `protobuf:"varint,12,opt,name=num_read,json=numRead,proto3" json:"num_read,omitempty"`
	NumReadKb                  int64 `protobuf:"varint,13,opt,name=num_read_kb,json=numReadKb,proto3" json:"num_read_kb,omitempty"`
	NumWrite                   int64 `protobuf:"varint,14,opt,name=num_write,json=numWrite,proto3" json:"num_write,omitempty"`
	NumWriteKb                 int64 `protobuf:"varint,15,opt,name=num_write_kb,json=numWriteKb,proto3" json:"num_write_kb,omitempty"`
	NumScrubErrors             int64 `protobuf:"varint,16,opt,name=num_scrub_errors,json=numScrubErrors,proto3" json:"num_scrub_errors,omitempty"`
	NumShallowScrubErrors      int64 `protobuf:"varint,17,opt,name=num_shallow_scrub_errors,json=numShallowScrubErrors,proto3" json:"num_shallow_scrub_errors,omitempty"`
	NumDeepScrubErrors         int64 `protobuf:"varint,18,opt,name=num_deep_scrub_errors,json=numDeepScrubErrors,proto3" json:"num_deep_scrub_errors,omitempty"`
	NumObjectsRecovered        int64 `protobuf:"varint,19,opt,name=num_objects_recovered,json=numObjectsRecovered,proto3" json:"num_objects_recovered,omitempty"`
	NumBytesRecovered          int64 `protobuf:"varint,20,opt,name=num_bytes_recovered,json=numBytesRecovered,proto3" json:"num_bytes_recovered,omitempty"`
	NumKeysRecovered           int64 `protobuf:"varint,21,opt,name=num_keys_recovered,json=numKeysRecovered,proto3" json:"num_keys_recovered,omitempty"`
	NumObjectsOmap             int64 `protobuf:"varint,22,opt,name=num_objects_omap,json=numObjectsOmap,proto3" json:"num_objects_omap,omitempty"`
	NumObjectsHitSetArchive    int64 `protobuf:"varint,23,opt,name=num_objects_hit_set_archive,json=numObjectsHitSetArchive,proto3" json:"num_objects_hit_set_archive,omitempty"`
	NumBytesHitSetArchive      int64 `protobuf:"varint,24,opt,name=num_bytes_hit_set_archive,json=numBytesHitSetArchive,proto3" json:"num_bytes_hit_set_archive,omitempty"`
	NumFlush                   int64 `protobuf:"varint,25,opt,name=num_flush,json=numFlush,proto3" json:"num_flush,omitempty"`
	NumFlushKb                 int64 `protobuf:"varint,26,opt,name=num_flush_kb,json=numFlushKb,proto3" json:"num_flush_kb,omitempty"`
	NumEvict                   int64 `protobuf:"varint,27,opt,name=num_evict,json=numEvict,proto3" json:"num_evict,omitempty"`
	NumEvictKb                 int64 `protobuf:"varint,28,opt,name=num_evict_kb,json=numEvictKb,proto3" json:"num_evict_kb,omitempty"`
	NumPromote                 int64 `protobuf:"varint,29,opt,name=num_promote,json=numPromote,proto3" json:"num_promote,omitempty"`
	NumFlushModeHigh           int64 `protobuf:"varint,30,opt,name=num_flush_mode_high,json=numFlushModeHigh,proto3" json:"num_flush_mode_high,omitempty"`
	NumFlushModeLow            int64 `protobuf:"varint,31,opt,name=num_flush_mode_low,json=numFlushModeLow,proto3" json:"num_flush_mode_low,omitempty"`
	NumEvictModeSome           int64 `protobuf:"varint,32,opt,name=num_evict_mode_some,json=numEvictModeSome,proto3" json:"num_evict_mode_some,omitempty"`
	NumEvictModeFull           int64 `protobuf:"varint,33,opt,name=num_evict_mode_full,json=numEvictModeFull,proto3" json:"num_evict_mode_full,omitempty"`
	NumObjectsPinned           int64 `protobuf:"varint,34,opt,name=num_objects_pinned,json=numObjectsPinned,proto3" json:"num_objects_pinned,omitempty"`
	NumLegacySnapsets          int64 `protobuf:"varint,35,opt,name=num_legacy_snapsets,json=numLegacySnapsets,proto3" json:"num_legacy_snapsets,omitempty"`
	NumLargeOmapObjects        int64 `protobuf:"varint,36,opt,name=num_large_omap_objects,json=numLargeOmapObjects,proto3" json:"num_large_omap_objects,omitempty"`
	NumObjectsManifest         int64 `protobuf:"varint,37,opt,name=num_objects_manifest,json=numObjectsManifest,proto3" json:"num_objects_manifest,omitempty"`
	NumOmapBytes               int64 `protobuf:"varint,38,opt,name=num_omap_bytes,json=numOmapBytes,proto3" json:"num_omap_bytes,omitempty"`
	NumOmapKeys                int64 `protobuf:"varint,39,opt,name=num_omap_keys,json=numOmapKeys,proto3" json:"num_omap_keys,omitempty"`
	NumObjectsRepaired         int64 `protobuf:"varint,40,opt,name=num_objects_repaired,json=numObjectsRepaired,proto3" json:"num_objects_repaired,omitempty"`
}

func (x *PGStat_PGStat_StatSum) Reset() {
	*x = PGStat_PGStat_StatSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PGStat_PGStat_StatSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGStat_PGStat_StatSum) ProtoMessage() {}

func (x *PGStat_PGStat_StatSum) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGStat_PGStat_StatSum.ProtoReflect.Descriptor instead.
func (*PGStat_PGStat_StatSum) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{33, 0}
}

func (x *PGStat_PGStat_StatSum) GetNumBytes() int64 {
	if x != nil {
		return x.NumBytes
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjects() int64 {
	if x != nil {
		return x.NumObjects
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectClones() int64 {
	if x != nil {
		return x.NumObjectClones
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectCopies() int64 {
	if x != nil {
		return x.NumObjectCopies
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsMissingOnPrimary() int64 {
	if x != nil {
		return x.NumObjectsMissingOnPrimary
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsMissing() int64 {
	if x != nil {
		return x.NumObjectsMissing
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsDegraded() int64 {
	if x != nil {
		return x.NumObjectsDegraded
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsMisplaced() int64 {
	if x != nil {
		return x.NumObjectsMisplaced
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsUnfound() int64 {
	if x != nil {
		return x.NumObjectsUnfound
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsDirty() int64 {
	if x != nil {
		return x.NumObjectsDirty
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumWhiteouts() int64 {
	if x != nil {
		return x.NumWhiteouts
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumRead() int64 {
	if x != nil {
		return x.NumRead
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumReadKb() int64 {
	if x != nil {
		return x.NumReadKb
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumWrite() int64 {
	if x != nil {
		return x.NumWrite
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumWriteKb() int64 {
	if x != nil {
		return x.NumWriteKb
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumScrubErrors() int64 {
	if x != nil {
		return x.NumScrubErrors
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumShallowScrubErrors() int64 {
	if x != nil {
		return x.NumShallowScrubErrors
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumDeepScrubErrors() int64 {
	if x != nil {
		return x.NumDeepScrubErrors
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsRecovered() int64 {
	if x != nil {
		return x.NumObjectsRecovered
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumBytesRecovered() int64 {
	if x != nil {
		return x.NumBytesRecovered
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumKeysRecovered() int64 {
	if x != nil {
		return x.NumKeysRecovered
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsOmap() int64 {
	if x != nil {
		return x.NumObjectsOmap
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsHitSetArchive() int64 {
	if x != nil {
		return x.NumObjectsHitSetArchive
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumBytesHitSetArchive() int64 {
	if x != nil {
		return x.NumBytesHitSetArchive
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumFlush() int64 {
	if x != nil {
		return x.NumFlush
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumFlushKb() int64 {
	if x != nil {
		return x.NumFlushKb
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumEvict() int64 {
	if x != nil {
		return x.NumEvict
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumEvictKb() int64 {
	if x != nil {
		return x.NumEvictKb
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumPromote() int64 {
	if x != nil {
		return x.NumPromote
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumFlushModeHigh() int64 {
	if x != nil {
		return x.NumFlushModeHigh
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumFlushModeLow() int64 {
	if x != nil {
		return x.NumFlushModeLow
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumEvictModeSome() int64 {
	if x != nil {
		return x.NumEvictModeSome
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumEvictModeFull() int64 {
	if x != nil {
		return x.NumEvictModeFull
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsPinned() int64 {
	if x != nil {
		return x.NumObjectsPinned
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumLegacySnapsets() int64 {
	if x != nil {
		return x.NumLegacySnapsets
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumLargeOmapObjects() int64 {
	if x != nil {
		return x.NumLargeOmapObjects
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsManifest() int64 {
	if x != nil {
		return x.NumObjectsManifest
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumOmapBytes() int64 {
	if x != nil {
		return x.NumOmapBytes
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumOmapKeys() int64 {
	if x != nil {
		return x.NumOmapKeys
	}
	return 0
}

func (x *PGStat_PGStat_StatSum) GetNumObjectsRepaired() int64 {
	if x != nil {
		return x.NumObjectsRepaired
	}
	return 0
}

type PoolStats_PoolStats_StatSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumBytes                   int64 `protobuf:"varint,1,opt,name=num_bytes,json=numBytes,proto3" json:"num_bytes,omitempty"`
	NumObjects                 int64 `protobuf:"varint,2,opt,name=num_objects,json=numObjects,proto3" json:"num_objects,omitempty"`
	NumObjectClones            int64 `protobuf:"varint,3,opt,name=num_object_clones,json=numObjectClones,proto3" json:"num_object_clones,omitempty"`
	NumObjectCopies            int64 `protobuf:"varint,4,opt,name=num_object_copies,json=numObjectCopies,proto3" json:"num_object_copies,omitempty"`
	NumObjectsMissingOnPrimary int64 `protobuf:"varint,5,opt,name=num_objects_missing_on_primary,json=numObjectsMissingOnPrimary,proto3" json:"num_objects_missing_on_primary,omitempty"`
	NumObjectsMissing          int64 `protobuf:"varint,6,opt,name=num_objects_missing,json=numObjectsMissing,proto3" json:"num_objects_missing,omitempty"`
	NumObjectsDegraded         int64 `protobuf:"varint,7,opt,name=num_objects_degraded,json=numObjectsDegraded,proto3" json:"num_objects_degraded,omitempty"`
	NumObjectsMisplaced        int64 `protobuf:"varint,8,opt,name=num_objects_misplaced,json=numObjectsMisplaced,proto3" json:"num_objects_misplaced,omitempty"`
	NumObjectsUnfound          int64 `protobuf:"varint,9,opt,name=num_objects_unfound,json=numObjectsUnfound,proto3" json:"num_objects_unfound,omitempty"`
	NumObjectsDirty            int64 `protobuf:"varint,10,opt,name=num_objects_dirty,json=numObjectsDirty,proto3" json:"num_objects_dirty,omitempty"`
	NumWhiteouts               int64 `protobuf:"varint,11,opt,name=num_whiteouts,json=numWhiteouts,proto3" json:"num_whiteouts,omitempty"`
	NumRead                    int64 `protobuf:"varint,12,opt,name=num_read,json=numRead,proto3" json:"num_read,omitempty"`
	NumReadKb                  int64 `protobuf:"varint,13,opt,name=num_read_kb,json=numReadKb,proto3" json:"num_read_kb,omitempty"`
	NumWrite                   int64 `protobuf:"varint,14,opt,name=num_write,json=numWrite,proto3" json:"num_write,omitempty"`
	NumWriteKb                 int64 `protobuf:"varint,15,opt,name=num_write_kb,json=numWriteKb,proto3" json:"num_write_kb,omitempty"`
	NumScrubErrors             int64 `protobuf:"varint,16,opt,name=num_scrub_errors,json=numScrubErrors,proto3" json:"num_scrub_errors,omitempty"`
	NumShallowScrubErrors      int64 `protobuf:"varint,17,opt,name=num_shallow_scrub_errors,json=numShallowScrubErrors,proto3" json:"num_shallow_scrub_errors,omitempty"`
	NumDeepScrubErrors         int64 `protobuf:"varint,18,opt,name=num_deep_scrub_errors,json=numDeepScrubErrors,proto3" json:"num_deep_scrub_errors,omitempty"`
	NumObjectsRecovered        int64 `protobuf:"varint,19,opt,name=num_objects_recovered,json=numObjectsRecovered,proto3" json:"num_objects_recovered,omitempty"`
	NumBytesRecovered          int64 `protobuf:"varint,20,opt,name=num_bytes_recovered,json=numBytesRecovered,proto3" json:"num_bytes_recovered,omitempty"`
	NumKeysRecovered           int64 `protobuf:"varint,21,opt,name=num_keys_recovered,json=numKeysRecovered,proto3" json:"num_keys_recovered,omitempty"`
	NumObjectsOmap             int64 `protobuf:"varint,22,opt,name=num_objects_omap,json=numObjectsOmap,proto3" json:"num_objects_omap,omitempty"`
	NumObjectsHitSetArchive    int64 `protobuf:"varint,23,opt,name=num_objects_hit_set_archive,json=numObjectsHitSetArchive,proto3" json:"num_objects_hit_set_archive,omitempty"`
	NumBytesHitSetArchive      int64 `protobuf:"varint,24,opt,name=num_bytes_hit_set_archive,json=numBytesHitSetArchive,proto3" json:"num_bytes_hit_set_archive,omitempty"`
	NumFlush                   int64 `protobuf:"varint,25,opt,name=num_flush,json=numFlush,proto3" json:"num_flush,omitempty"`
	NumFlushKb                 int64 `protobuf:"varint,26,opt,name=num_flush_kb,json=numFlushKb,proto3" json:"num_flush_kb,omitempty"`
	NumEvict                   int64 `protobuf:"varint,27,opt,name=num_evict,json=numEvict,proto3" json:"num_evict,omitempty"`
	NumEvictKb                 int64 `protobuf:"varint,28,opt,name=num_evict_kb,json=numEvictKb,proto3" json:"num_evict_kb,omitempty"`
	NumPromote                 int64 `protobuf:"varint,29,opt,name=num_promote,json=numPromote,proto3" json:"num_promote,omitempty"`
	NumFlushModeHigh           int64 `protobuf:"varint,30,opt,name=num_flush_mode_high,json=numFlushModeHigh,proto3" json:"num_flush_mode_high,omitempty"`
	NumFlushModeLow            int64 `protobuf:"varint,31,opt,name=num_flush_mode_low,json=numFlushModeLow,proto3" json:"num_flush_mode_low,omitempty"`
	NumEvictModeSome           int64 `protobuf:"varint,32,opt,name=num_evict_mode_some,json=numEvictModeSome,proto3" json:"num_evict_mode_some,omitempty"`
	NumEvictModeFull           int64 `protobuf:"varint,33,opt,name=num_evict_mode_full,json=numEvictModeFull,proto3" json:"num_evict_mode_full,omitempty"`
	NumObjectsPinned           int64 `protobuf:"varint,34,opt,name=num_objects_pinned,json=numObjectsPinned,proto3" json:"num_objects_pinned,omitempty"`
	NumLegacySnapsets          int64 `protobuf:"varint,35,opt,name=num_legacy_snapsets,json=numLegacySnapsets,proto3" json:"num_legacy_snapsets,omitempty"`
	NumLargeOmapObjects        int64 `protobuf:"varint,36,opt,name=num_large_omap_objects,json=numLargeOmapObjects,proto3" json:"num_large_omap_objects,omitempty"`
	NumObjectsManifest         int64 `protobuf:"varint,37,opt,name=num_objects_manifest,json=numObjectsManifest,proto3" json:"num_objects_manifest,omitempty"`
	NumOmapBytes               int64 `protobuf:"varint,38,opt,name=num_omap_bytes,json=numOmapBytes,proto3" json:"num_omap_bytes,omitempty"`
	NumOmapKeys                int64 `protobuf:"varint,39,opt,name=num_omap_keys,json=numOmapKeys,proto3" json:"num_omap_keys,omitempty"`
	NumObjectsRepaired         int64 `protobuf:"varint,40,opt,name=num_objects_repaired,json=numObjectsRepaired,proto3" json:"num_objects_repaired,omitempty"`
}

func (x *PoolStats_PoolStats_StatSum) Reset() {
	*x = PoolStats_PoolStats_StatSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolStats_PoolStats_StatSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStats_PoolStats_StatSum) ProtoMessage() {}

func (x *PoolStats_PoolStats_StatSum) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStats_PoolStats_StatSum.ProtoReflect.Descriptor instead.
func (*PoolStats_PoolStats_StatSum) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{34, 0}
}

func (x *PoolStats_PoolStats_StatSum) GetNumBytes() int64 {
	if x != nil {
		return x.NumBytes
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjects() int64 {
	if x != nil {
		return x.NumObjects
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectClones() int64 {
	if x != nil {
		return x.NumObjectClones
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectCopies() int64 {
	if x != nil {
		return x.NumObjectCopies
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsMissingOnPrimary() int64 {
	if x != nil {
		return x.NumObjectsMissingOnPrimary
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsMissing() int64 {
	if x != nil {
		return x.NumObjectsMissing
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsDegraded() int64 {
	if x != nil {
		return x.NumObjectsDegraded
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsMisplaced() int64 {
	if x != nil {
		return x.NumObjectsMisplaced
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsUnfound() int64 {
	if x != nil {
		return x.NumObjectsUnfound
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsDirty() int64 {
	if x != nil {
		return x.NumObjectsDirty
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumWhiteouts() int64 {
	if x != nil {
		return x.NumWhiteouts
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumRead() int64 {
	if x != nil {
		return x.NumRead
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumReadKb() int64 {
	if x != nil {
		return x.NumReadKb
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumWrite() int64 {
	if x != nil {
		return x.NumWrite
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumWriteKb() int64 {
	if x != nil {
		return x.NumWriteKb
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumScrubErrors() int64 {
	if x != nil {
		return x.NumScrubErrors
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumShallowScrubErrors() int64 {
	if x != nil {
		return x.NumShallowScrubErrors
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumDeepScrubErrors() int64 {
	if x != nil {
		return x.NumDeepScrubErrors
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsRecovered() int64 {
	if x != nil {
		return x.NumObjectsRecovered
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumBytesRecovered() int64 {
	if x != nil {
		return x.NumBytesRecovered
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumKeysRecovered() int64 {
	if x != nil {
		return x.NumKeysRecovered
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsOmap() int64 {
	if x != nil {
		return x.NumObjectsOmap
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsHitSetArchive() int64 {
	if x != nil {
		return x.NumObjectsHitSetArchive
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumBytesHitSetArchive() int64 {
	if x != nil {
		return x.NumBytesHitSetArchive
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumFlush() int64 {
	if x != nil {
		return x.NumFlush
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumFlushKb() int64 {
	if x != nil {
		return x.NumFlushKb
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumEvict() int64 {
	if x != nil {
		return x.NumEvict
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumEvictKb() int64 {
	if x != nil {
		return x.NumEvictKb
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumPromote() int64 {
	if x != nil {
		return x.NumPromote
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumFlushModeHigh() int64 {
	if x != nil {
		return x.NumFlushModeHigh
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumFlushModeLow() int64 {
	if x != nil {
		return x.NumFlushModeLow
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumEvictModeSome() int64 {
	if x != nil {
		return x.NumEvictModeSome
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumEvictModeFull() int64 {
	if x != nil {
		return x.NumEvictModeFull
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsPinned() int64 {
	if x != nil {
		return x.NumObjectsPinned
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumLegacySnapsets() int64 {
	if x != nil {
		return x.NumLegacySnapsets
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumLargeOmapObjects() int64 {
	if x != nil {
		return x.NumLargeOmapObjects
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsManifest() int64 {
	if x != nil {
		return x.NumObjectsManifest
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumOmapBytes() int64 {
	if x != nil {
		return x.NumOmapBytes
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumOmapKeys() int64 {
	if x != nil {
		return x.NumOmapKeys
	}
	return 0
}

func (x *PoolStats_PoolStats_StatSum) GetNumObjectsRepaired() int64 {
	if x != nil {
		return x.NumObjectsRepaired
	}
	return 0
}

type PoolStats_PoolStats_StoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                   int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available               int64 `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	InternallyReserved      int64 `protobuf:"varint,3,opt,name=internally_reserved,json=internallyReserved,proto3" json:"internally_reserved,omitempty"`
	Allocated               int64 `protobuf:"varint,4,opt,name=allocated,proto3" json:"allocated,omitempty"`
	DataStored              int64 `protobuf:"varint,5,opt,name=data_stored,json=dataStored,proto3" json:"data_stored,omitempty"`
	DataCompressed          int64 `protobuf:"varint,6,opt,name=data_compressed,json=dataCompressed,proto3" json:"data_compressed,omitempty"`
	DataCompressedAllocated int64 `protobuf:"varint,7,opt,name=data_compressed_allocated,json=dataCompressedAllocated,proto3" json:"data_compressed_allocated,omitempty"`
	DataCompressedOriginal  int64 `protobuf:"varint,8,opt,name=data_compressed_original,json=dataCompressedOriginal,proto3" json:"data_compressed_original,omitempty"`
	OmapAllocated           int64 `protobuf:"varint,9,opt,name=omap_allocated,json=omapAllocated,proto3" json:"omap_allocated,omitempty"`
	InternalMetadata        int64 `protobuf:"varint,10,opt,name=internal_metadata,json=internalMetadata,proto3" json:"internal_metadata,omitempty"`
}

func (x *PoolStats_PoolStats_StoreStats) Reset() {
	*x = PoolStats_PoolStats_StoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolStats_PoolStats_StoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStats_PoolStats_StoreStats) ProtoMessage() {}

func (x *PoolStats_PoolStats_StoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStats_PoolStats_StoreStats.ProtoReflect.Descriptor instead.
func (*PoolStats_PoolStats_StoreStats) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{34, 1}
}

func (x *PoolStats_PoolStats_StoreStats) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PoolStats_PoolStats_StoreStats) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *PoolStats_PoolStats_StoreStats) GetInternallyReserved() int64 {
	if x != nil {
		return x.InternallyReserved
	}
	return 0
}

func (x *PoolStats_PoolStats_StoreStats) GetAllocated() int64 {
	if x != nil {
		return x.Allocated
	}
	return 0
}

func (x *PoolStats_PoolStats_StoreStats) GetDataStored() int64 {
	if x != nil {
		return x.DataStored
	}
	return 0
}

func (x *PoolStats_PoolStats_StoreStats) GetDataCompressed() int64 {
	if x != nil {
		return x.DataCompressed
	}
	return 0
}

func (x *PoolStats_PoolStats_StoreStats) GetDataCompressedAllocated() int64 {
	if x != nil {
		return x.DataCompressedAllocated
	}
	return 0
}

func (x *PoolStats_PoolStats_StoreStats) GetDataCompressedOriginal() int64 {
	if x != nil {
		return x.DataCompressedOriginal
	}
	return 0
}

func (x *PoolStats_PoolStats_StoreStats) GetOmapAllocated() int64 {
	if x != nil {
		return x.OmapAllocated
	}
	return 0
}

func (x *PoolStats_PoolStats_StoreStats) GetInternalMetadata() int64 {
	if x != nil {
		return x.InternalMetadata
	}
	return 0
}

type OsdStats_StatFs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                   int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available               int64 `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	InternallyReserved      int64 `protobuf:"varint,3,opt,name=internally_reserved,json=internallyReserved,proto3" json:"internally_reserved,omitempty"`
	Allocated               int64 `protobuf:"varint,4,opt,name=allocated,proto3" json:"allocated,omitempty"`
	DataStored              int64 `protobuf:"varint,5,opt,name=data_stored,json=dataStored,proto3" json:"data_stored,omitempty"`
	DataCompressed          int64 `protobuf:"varint,6,opt,name=data_compressed,json=dataCompressed,proto3" json:"data_compressed,omitempty"`
	DataCompressedAllocated int64 `protobuf:"varint,7,opt,name=data_compressed_allocated,json=dataCompressedAllocated,proto3" json:"data_compressed_allocated,omitempty"`
	DataCompressedOriginal  int64 `protobuf:"varint,8,opt,name=data_compressed_original,json=dataCompressedOriginal,proto3" json:"data_compressed_original,omitempty"`
	OmapAllocated           int64 `protobuf:"varint,9,opt,name=omap_allocated,json=omapAllocated,proto3" json:"omap_allocated,omitempty"`
	InternalMetadata        int64 `protobuf:"varint,10,opt,name=internal_metadata,json=internalMetadata,proto3" json:"internal_metadata,omitempty"`
}

func (x *OsdStats_StatFs) Reset() {
	*x = OsdStats_StatFs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStats_StatFs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStats_StatFs) ProtoMessage() {}

func (x *OsdStats_StatFs) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStats_StatFs.ProtoReflect.Descriptor instead.
func (*OsdStats_StatFs) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{35, 0}
}

func (x *OsdStats_StatFs) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OsdStats_StatFs) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *OsdStats_StatFs) GetInternallyReserved() int64 {
	if x != nil {
		return x.InternallyReserved
	}
	return 0
}

func (x *OsdStats_StatFs) GetAllocated() int64 {
	if x != nil {
		return x.Allocated
	}
	return 0
}

func (x *OsdStats_StatFs) GetDataStored() int64 {
	if x != nil {
		return x.DataStored
	}
	return 0
}

func (x *OsdStats_StatFs) GetDataCompressed() int64 {
	if x != nil {
		return x.DataCompressed
	}
	return 0
}

func (x *OsdStats_StatFs) GetDataCompressedAllocated() int64 {
	if x != nil {
		return x.DataCompressedAllocated
	}
	return 0
}

func (x *OsdStats_StatFs) GetDataCompressedOriginal() int64 {
	if x != nil {
		return x.DataCompressedOriginal
	}
	return 0
}

func (x *OsdStats_StatFs) GetOmapAllocated() int64 {
	if x != nil {
		return x.OmapAllocated
	}
	return 0
}

func (x *OsdStats_StatFs) GetInternalMetadata() int64 {
	if x != nil {
		return x.InternalMetadata
	}
	return 0
}

type OsdStats_OpQueueAgeHist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Histogram  []int64 `protobuf:"varint,1,rep,packed,name=histogram,proto3" json:"histogram,omitempty"`
	UpperBound int64   `protobuf:"varint,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (x *OsdStats_OpQueueAgeHist) Reset() {
	*x = OsdStats_OpQueueAgeHist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStats_OpQueueAgeHist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStats_OpQueueAgeHist) ProtoMessage() {}

func (x *OsdStats_OpQueueAgeHist) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStats_OpQueueAgeHist.ProtoReflect.Descriptor instead.
func (*OsdStats_OpQueueAgeHist) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{35, 1}
}

func (x *OsdStats_OpQueueAgeHist) GetHistogram() []int64 {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *OsdStats_OpQueueAgeHist) GetUpperBound() int64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

type OsdStats_PerfStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitLatencyMs int64 `protobuf:"varint,1,opt,name=commit_latency_ms,json=commitLatencyMs,proto3" json:"commit_latency_ms,omitempty"`
	ApplyLatencyMs  int64 `protobuf:"varint,2,opt,name=apply_latency_ms,json=applyLatencyMs,proto3" json:"apply_latency_ms,omitempty"`
	CommitLatencyNs int64 `protobuf:"varint,3,opt,name=commit_latency_ns,json=commitLatencyNs,proto3" json:"commit_latency_ns,omitempty"`
	ApplyLatencyNs  int64 `protobuf:"varint,4,opt,name=apply_latency_ns,json=applyLatencyNs,proto3" json:"apply_latency_ns,omitempty"`
}

func (x *OsdStats_PerfStat) Reset() {
	*x = OsdStats_PerfStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStats_PerfStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStats_PerfStat) ProtoMessage() {}

func (x *OsdStats_PerfStat) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStats_PerfStat.ProtoReflect.Descriptor instead.
func (*OsdStats_PerfStat) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{35, 2}
}

func (x *OsdStats_PerfStat) GetCommitLatencyMs() int64 {
	if x != nil {
		return x.CommitLatencyMs
	}
	return 0
}

func (x *OsdStats_PerfStat) GetApplyLatencyMs() int64 {
	if x != nil {
		return x.ApplyLatencyMs
	}
	return 0
}

func (x *OsdStats_PerfStat) GetCommitLatencyNs() int64 {
	if x != nil {
		return x.CommitLatencyNs
	}
	return 0
}

func (x *OsdStats_PerfStat) GetApplyLatencyNs() int64 {
	if x != nil {
		return x.ApplyLatencyNs
	}
	return 0
}

type OsdStats_NetworkPingTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Osd        int64                                 `protobuf:"varint,1,opt,name=osd,proto3" json:"osd,omitempty"`
	LastUpdate string                                `protobuf:"bytes,2,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Interfaces []*OsdStats_NetworkPingTime_Interface `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *OsdStats_NetworkPingTime) Reset() {
	*x = OsdStats_NetworkPingTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStats_NetworkPingTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStats_NetworkPingTime) ProtoMessage() {}

func (x *OsdStats_NetworkPingTime) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStats_NetworkPingTime.ProtoReflect.Descriptor instead.
func (*OsdStats_NetworkPingTime) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{35, 3}
}

func (x *OsdStats_NetworkPingTime) GetOsd() int64 {
	if x != nil {
		return x.Osd
	}
	return 0
}

func (x *OsdStats_NetworkPingTime) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *OsdStats_NetworkPingTime) GetInterfaces() []*OsdStats_NetworkPingTime_Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type OsdStats_NetworkPingTime_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string                                      `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Average       *OsdStats_NetworkPingTime_Interface_Average `protobuf:"bytes,2,opt,name=average,proto3" json:"average,omitempty"`
	Min           *OsdStats_NetworkPingTime_Interface_Min     `protobuf:"bytes,3,opt,name=min,proto3" json:"min,omitempty"`
	Max           *OsdStats_NetworkPingTime_Interface_Max     `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	Last          float64                                     `protobuf:"fixed64,5,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *OsdStats_NetworkPingTime_Interface) Reset() {
	*x = OsdStats_NetworkPingTime_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStats_NetworkPingTime_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStats_NetworkPingTime_Interface) ProtoMessage() {}

func (x *OsdStats_NetworkPingTime_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStats_NetworkPingTime_Interface.ProtoReflect.Descriptor instead.
func (*OsdStats_NetworkPingTime_Interface) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{35, 3, 0}
}

func (x *OsdStats_NetworkPingTime_Interface) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *OsdStats_NetworkPingTime_Interface) GetAverage() *OsdStats_NetworkPingTime_Interface_Average {
	if x != nil {
		return x.Average
	}
	return nil
}

func (x *OsdStats_NetworkPingTime_Interface) GetMin() *OsdStats_NetworkPingTime_Interface_Min {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OsdStats_NetworkPingTime_Interface) GetMax() *OsdStats_NetworkPingTime_Interface_Max {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OsdStats_NetworkPingTime_Interface) GetLast() float64 {
	if x != nil {
		return x.Last
	}
	return 0
}

type OsdStats_NetworkPingTime_Interface_Average struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min1  float64 `protobuf:"fixed64,1,opt,name=min1,proto3" json:"min1,omitempty"`
	Min5  float64 `protobuf:"fixed64,2,opt,name=min5,proto3" json:"min5,omitempty"`
	Min15 float64 `protobuf:"fixed64,3,opt,name=min15,proto3" json:"min15,omitempty"`
}

func (x *OsdStats_NetworkPingTime_Interface_Average) Reset() {
	*x = OsdStats_NetworkPingTime_Interface_Average{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStats_NetworkPingTime_Interface_Average) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStats_NetworkPingTime_Interface_Average) ProtoMessage() {}

func (x *OsdStats_NetworkPingTime_Interface_Average) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStats_NetworkPingTime_Interface_Average.ProtoReflect.Descriptor instead.
func (*OsdStats_NetworkPingTime_Interface_Average) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{35, 3, 0, 0}
}

func (x *OsdStats_NetworkPingTime_Interface_Average) GetMin1() float64 {
	if x != nil {
		return x.Min1
	}
	return 0
}

func (x *OsdStats_NetworkPingTime_Interface_Average) GetMin5() float64 {
	if x != nil {
		return x.Min5
	}
	return 0
}

func (x *OsdStats_NetworkPingTime_Interface_Average) GetMin15() float64 {
	if x != nil {
		return x.Min15
	}
	return 0
}

type OsdStats_NetworkPingTime_Interface_Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min1  float64 `protobuf:"fixed64,1,opt,name=min1,proto3" json:"min1,omitempty"`
	Min5  float64 `protobuf:"fixed64,2,opt,name=min5,proto3" json:"min5,omitempty"`
	Min15 float64 `protobuf:"fixed64,3,opt,name=min15,proto3" json:"min15,omitempty"`
}

func (x *OsdStats_NetworkPingTime_Interface_Min) Reset() {
	*x = OsdStats_NetworkPingTime_Interface_Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStats_NetworkPingTime_Interface_Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStats_NetworkPingTime_Interface_Min) ProtoMessage() {}

func (x *OsdStats_NetworkPingTime_Interface_Min) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStats_NetworkPingTime_Interface_Min.ProtoReflect.Descriptor instead.
func (*OsdStats_NetworkPingTime_Interface_Min) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{35, 3, 0, 1}
}

func (x *OsdStats_NetworkPingTime_Interface_Min) GetMin1() float64 {
	if x != nil {
		return x.Min1
	}
	return 0
}

func (x *OsdStats_NetworkPingTime_Interface_Min) GetMin5() float64 {
	if x != nil {
		return x.Min5
	}
	return 0
}

func (x *OsdStats_NetworkPingTime_Interface_Min) GetMin15() float64 {
	if x != nil {
		return x.Min15
	}
	return 0
}

type OsdStats_NetworkPingTime_Interface_Max struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min1  float64 `protobuf:"fixed64,1,opt,name=min1,proto3" json:"min1,omitempty"`
	Min5  float64 `protobuf:"fixed64,2,opt,name=min5,proto3" json:"min5,omitempty"`
	Min15 float64 `protobuf:"fixed64,3,opt,name=min15,proto3" json:"min15,omitempty"`
}

func (x *OsdStats_NetworkPingTime_Interface_Max) Reset() {
	*x = OsdStats_NetworkPingTime_Interface_Max{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStats_NetworkPingTime_Interface_Max) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStats_NetworkPingTime_Interface_Max) ProtoMessage() {}

func (x *OsdStats_NetworkPingTime_Interface_Max) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStats_NetworkPingTime_Interface_Max.ProtoReflect.Descriptor instead.
func (*OsdStats_NetworkPingTime_Interface_Max) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{35, 3, 0, 2}
}

func (x *OsdStats_NetworkPingTime_Interface_Max) GetMin1() float64 {
	if x != nil {
		return x.Min1
	}
	return 0
}

func (x *OsdStats_NetworkPingTime_Interface_Max) GetMin5() float64 {
	if x != nil {
		return x.Min5
	}
	return 0
}

func (x *OsdStats_NetworkPingTime_Interface_Max) GetMin15() float64 {
	if x != nil {
		return x.Min15
	}
	return 0
}

var File_status_proto protoreflect.FileDescriptor

var file_status_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x63, 0x65, 0x70, 0x68, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc4, 0x04, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x73, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x41, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x6d, 0x61, 0x70, 0x12,
	0x2e, 0x0a, 0x06, 0x6f, 0x73, 0x64, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4f, 0x53, 0x44, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x6f, 0x73, 0x64, 0x6d, 0x61, 0x70, 0x12,
	0x2b, 0x0a, 0x05, 0x70, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x47, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x70, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x05,
	0x66, 0x73, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65,
	0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x53, 0x4d,
	0x61, 0x70, 0x52, 0x05, 0x66, 0x73, 0x6d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x67, 0x72,
	0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x70, 0x68,
	0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x67, 0x72, 0x4d, 0x61,
	0x70, 0x52, 0x06, 0x6d, 0x67, 0x72, 0x6d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xce, 0x04, 0x0a, 0x13, 0x43, 0x65, 0x70, 0x68,
	0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x73, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44,
	0x75, 0x6d, 0x70, 0x4d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6d, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x22, 0x51, 0x0a, 0x13, 0x43, 0x65, 0x70, 0x68,
	0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x89, 0x02, 0x0a, 0x12,
	0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44,
	0x75, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x72, 0x56, 0x65, 0x63, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x75, 0x73, 0x68, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x65, 0x70, 0x68, 0x4d,
	0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x72, 0x56, 0x65, 0x63, 0x12, 0x32, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x76, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x76, 0x65,
	0x63, 0x22, 0x52, 0x0a, 0x12, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x74, 0x0a, 0x10, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69,
	0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x75, 0x6d, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x4d, 0x6f, 0x6e, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x70, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x53, 0x44, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x4f, 0x73, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x55, 0x70, 0x4f, 0x73, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x6f, 0x73, 0x64, 0x5f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x73, 0x64, 0x55, 0x70, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x4f, 0x73, 0x64, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x6f, 0x73, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x73, 0x64, 0x49, 0x6e, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x70, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x52,
	0x65, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x50, 0x67, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x43,
	0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x47, 0x4d, 0x61, 0x70, 0x12, 0x39,
	0x0a, 0x0c, 0x70, 0x67, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70,
	0x67, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d,
	0x5f, 0x70, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x50,
	0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x48, 0x0a, 0x11, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x47,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x0f, 0x43, 0x65,
	0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x53, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x79,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x62, 0x79, 0x22, 0xec, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x67, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x67, 0x72, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x14, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x43, 0x65,
	0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x52, 0x0a, 0x0c, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x10,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x73,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x53, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x75,
	0x73, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66,
	0x75, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x66, 0x75,
	0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x61, 0x72, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x6e, 0x65, 0x61, 0x72, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6f, 0x6f,
	0x6c, 0x4d, 0x61, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x73, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4f, 0x73, 0x64, 0x12, 0x39, 0x0a,
	0x19, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x6f, 0x73, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x73, 0x64, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72,
	0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x72, 0x69, 0x6d, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e,
	0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x4f,
	0x73, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6f, 0x73, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x09,
	0x6f, 0x73, 0x64, 0x5f, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x4f, 0x73,
	0x64, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6f, 0x73, 0x64, 0x58, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x31, 0x0a, 0x08, 0x70, 0x67, 0x5f, 0x75, 0x70, 0x6d, 0x61, 0x70, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x67, 0x55, 0x70,
	0x6d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x67, 0x5f, 0x75, 0x70, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x67, 0x55, 0x70, 0x6d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x44, 0x0a, 0x12, 0x70, 0x67, 0x5f, 0x75, 0x70, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x67, 0x55, 0x70, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x67, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x70, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x65, 0x70, 0x68, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x15, 0x65, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x4f, 0x73,
	0x64, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x65, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x13, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x75, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x72, 0x75,
	0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x72,
	0x75, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x12,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x70, 0x68,
	0x2e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x1a, 0x58, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x67, 0x0a, 0x18, 0x45, 0x72,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f,
	0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x45, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc3, 0x15, 0x0a, 0x0b, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x75, 0x73, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x72, 0x75, 0x73, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x75, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x75, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x70, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x75, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x25, 0x70, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x72, 0x75, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x67,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x67, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x67, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x67, 0x4e, 0x75, 0x6d, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x67, 0x4e, 0x75,
	0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x67, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x44,
	0x75, 0x6d, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x52,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x65, 0x6e, 0x61, 0x75, 0x74, 0x69, 0x6c, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x50, 0x72, 0x65, 0x6e, 0x61, 0x75, 0x74, 0x69, 0x6c, 0x75, 0x73, 0x12, 0x46, 0x0a,
	0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x6f, 0x75,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x6c, 0x75, 0x6d,
	0x69, 0x6e, 0x6f, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6e, 0x61,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x6e, 0x61, 0x70, 0x53, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x35, 0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x6f,
	0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72, 0x4f, 0x66, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x72, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x12, 0x4b, 0x0a, 0x23, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x72, 0x74, 0x79, 0x48, 0x69, 0x67, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x6e, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x41, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x6e, 0x45, 0x76, 0x69, 0x63, 0x74,
	0x41, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x65, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x48, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x68, 0x69, 0x74, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x68, 0x69, 0x74, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x68, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x68, 0x69, 0x74, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x6d, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73,
	0x65, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x47, 0x6d, 0x74,
	0x48, 0x69, 0x74, 0x73, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6d,
	0x69, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x68, 0x69, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x68, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x63, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x15, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x68, 0x69, 0x74, 0x53, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x30,
	0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x31, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4a, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d,
	0x70, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x16, 0x4f, 0x73,
	0x64, 0x44, 0x75, 0x6d, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x67, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x13,
	0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x48, 0x69, 0x74, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x12, 0x4f, 0x73, 0x64, 0x44,
	0x75, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x77,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72,
	0x61, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a,
	0x19, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x21, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x22, 0xa6,
	0x06, 0x0a, 0x0e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x4f, 0x73, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x73, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6f, 0x73, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x70,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x75, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x70, 0x54, 0x68, 0x72, 0x75, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x44,
	0x75, 0x6d, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x0b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d,
	0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x70, 0x68,
	0x2e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x70, 0x68,
	0x2e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x13, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x2e, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x44, 0x0a, 0x12, 0x4f, 0x73, 0x64, 0x44, 0x75,
	0x6d, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x76, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x56, 0x65, 0x63, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x76, 0x65, 0x63, 0x22, 0x45, 0x0a,
	0x13, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x76, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64,
	0x44, 0x75, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x72, 0x56, 0x65, 0x63, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x76, 0x65, 0x63, 0x22, 0x47, 0x0a, 0x15, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x76, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x56, 0x65, 0x63, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x76, 0x65, 0x63, 0x22, 0x4e, 0x0a,
	0x0e, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x72, 0x56, 0x65, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xdf, 0x02,
	0x0a, 0x0f, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x4f, 0x73, 0x64, 0x58, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x73, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6f, 0x73, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b,
	0x0a, 0x11, 0x6c, 0x61, 0x67, 0x67, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x61, 0x67, 0x67, 0x79,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x61, 0x67, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x67, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x51, 0x0a,
	0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x61, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22,
	0x6d, 0x0a, 0x19, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x45, 0x72, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x01,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6b, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x94,
	0x02, 0x0a, 0x12, 0x4f, 0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x72, 0x65, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x56, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68,
	0x50, 0x67, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x70, 0x67, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x67, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x65, 0x70, 0x68,
	0x2e, 0x50, 0x47, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x70, 0x67, 0x4d, 0x61, 0x70, 0x22, 0xff, 0x03,
	0x0a, 0x05, 0x50, 0x47, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x73, 0x64, 0x6d,
	0x61, 0x70, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x4f, 0x73, 0x64, 0x6d, 0x61, 0x70, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x67, 0x53, 0x63, 0x61,
	0x6e, 0x12, 0x32, 0x0a, 0x0c, 0x70, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x50,
	0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x52, 0x0a, 0x70, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x0d, 0x6f, 0x73, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x65, 0x70, 0x68, 0x2e, 0x4f, 0x53, 0x44, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x52,
	0x0b, 0x6f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x0e,
	0x70, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x50, 0x47, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x08, 0x70, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e,
	0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x70, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x09, 0x6f, 0x73, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x08, 0x6f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0b,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x66, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x46, 0x73, 0x52, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x66, 0x73, 0x22,
	0xbf, 0x13, 0x0a, 0x0a, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x3e,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53,
	0x75, 0x6d, 0x2e, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x5f, 0x53, 0x74,
	0x61, 0x74, 0x53, 0x75, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x47,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x50, 0x47, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x53, 0x75, 0x6d, 0x2e, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d,
	0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6e, 0x64,
	0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xe3, 0x0d, 0x0a, 0x12, 0x50,
	0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x53, 0x75,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1a, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x4f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6e,
	0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x5f, 0x75, 0x6e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x55, 0x6e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x69, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6f, 0x75,
	0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x62, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4b, 0x62, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6e, 0x75, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75,
	0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4b, 0x62, 0x12, 0x28, 0x0a, 0x10,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x53, 0x68, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x75,
	0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x6e, 0x75, 0x6d, 0x44, 0x65, 0x65, 0x70, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4f, 0x6d, 0x61, 0x70, 0x12, 0x3c,
	0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x68, 0x69,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48,
	0x69, 0x74, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x19,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x69, 0x74, 0x53, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x6b, 0x62, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x4b, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69,
	0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69,
	0x63, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f,
	0x6b, 0x62, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69,
	0x63, 0x74, 0x4b, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x48, 0x69, 0x67, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x77, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e,
	0x75, 0x6d, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x6d, 0x61, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6d, 0x61, 0x70,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75,
	0x6d, 0x4f, 0x6d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4f, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64,
	0x1a, 0xae, 0x03, 0x0a, 0x15, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x5f,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6d, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x89, 0x11, 0x0a, 0x0b, 0x4f, 0x53, 0x44, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x50, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x73, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x4f, 0x73, 0x64, 0x73,
	0x12, 0x29, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d,
	0x50, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x73, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x16, 0x6e,
	0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x6d, 0x61, 0x70,
	0x5f, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d,
	0x50, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x6d, 0x61, 0x70, 0x4f, 0x73, 0x64, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x6b, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6b, 0x62, 0x12,
	0x17, 0x0a, 0x07, 0x6b, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6b, 0x62, 0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6b, 0x62, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6b, 0x62, 0x55, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x6b, 0x62,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6b, 0x62, 0x55, 0x73, 0x65, 0x64, 0x4f, 0x6d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0c,
	0x6b, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6b, 0x62, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x62, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6b, 0x62, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x66, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x70, 0x68,
	0x2e, 0x4f, 0x53, 0x44, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x46, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x66, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x68,
	0x62, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x74,
	0x72, 0x69, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x54, 0x72, 0x69, 0x6d, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x54, 0x72, 0x69, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x6e, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x67,
	0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x65, 0x70, 0x68, 0x2e, 0x4f, 0x53, 0x44, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x2e,
	0x4f, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x52, 0x0e,
	0x6f, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x53, 0x44, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x53, 0x75, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74, 0x52, 0x08, 0x70,
	0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12,
	0x4f, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65,
	0x70, 0x68, 0x2e, 0x4f, 0x53, 0x44, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x1a, 0x9f, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x46, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6d, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x4f, 0x0a, 0x0e, 0x4f, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x67, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x1a, 0xb6, 0x01, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x4e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x73, 0x1a, 0x9e, 0x05, 0x0a,
	0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x73, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f,
	0x73, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x4b, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x53, 0x44, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0xee, 0x03, 0x0a,
	0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x53, 0x44, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x53, 0x75, 0x6d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x41, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x53, 0x44, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x6d,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x53, 0x44, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x53, 0x75, 0x6d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61,
	0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x1a, 0x47, 0x0a, 0x07, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e,
	0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x35, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x69, 0x6e, 0x31, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x69,
	0x6e, 0x31, 0x35, 0x1a, 0x43, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69,
	0x6e, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x31, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69,
	0x6e, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x31, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x31, 0x35, 0x1a, 0x43, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d,
	0x69, 0x6e, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x31, 0x35,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x31, 0x35, 0x22, 0xee, 0x13,
	0x0a, 0x0c, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x42,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x2e, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x53,
	0x75, 0x6d, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x50,
	0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x50, 0x47, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75,
	0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x1a, 0xe5, 0x0d, 0x0a, 0x14, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x70, 0x69,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x4d, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x55, 0x6e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x44, 0x69, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6e, 0x75, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e,
	0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4b, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4b, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x63, 0x72, 0x75, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75,
	0x6d, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x44, 0x65,
	0x65, 0x70, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6f,
	0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x4f, 0x6d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x1b, 0x6e, 0x75, 0x6d,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17,
	0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x69, 0x74, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x48, 0x69, 0x74, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x20,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x62, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4b, 0x62,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x6b, 0x62, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x62, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12,
	0x2b, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x13,
	0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x6f, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x45, 0x76,
	0x69, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6e,
	0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69,
	0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x4f, 0x6d, 0x61, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x6d, 0x61, 0x70,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6d, 0x61,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x4f, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x1a, 0xb0, 0x03, 0x0a, 0x17,
	0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6d,
	0x61, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6d, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc8,
	0x20, 0x0a, 0x06, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x67, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x67, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x63,
	0x61, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x48,
	0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x63, 0x61,
	0x6d, 0x65, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6e, 0x64,
	0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42,
	0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x75,
	0x62, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72,
	0x75, 0x62, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x65, 0x70, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x12, 0x4d, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x63,
	0x72, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x44, 0x65, 0x65, 0x70, 0x53, 0x63, 0x72, 0x75, 0x62, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x4f, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x63,
	0x72, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x29, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x75,
	0x62, 0x62, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x53, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x75,
	0x70, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x44, 0x75, 0x70, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x72, 0x74, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x69, 0x74, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x69, 0x74, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x68, 0x69, 0x74, 0x73, 0x65,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x69, 0x74,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x70, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x74, 0x72,
	0x69, 0x6d, 0x71, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x6e, 0x61, 0x70, 0x74, 0x72, 0x69, 0x6d, 0x71, 0x4c, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x72, 0x75, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x75,
	0x62, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x54, 0x72, 0x69, 0x6d, 0x6d,
	0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73,
	0x6e, 0x61, 0x70, 0x74, 0x72, 0x69, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x2e,
	0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x2e, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x02, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x30, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x4e, 0x6f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x32, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x67,
	0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x1a, 0xdf, 0x0d, 0x0a, 0x0e, 0x50, 0x47, 0x53, 0x74,
	0x61, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75,
	0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e,
	0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73,
	0x12, 0x42, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x65,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x4d, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x55, 0x6e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x44, 0x69, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e,
	0x75, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6b, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x61, 0x64, 0x4b, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x6b, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4b, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x72,
	0x75, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x37, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72,
	0x75, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f,
	0x64, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x65, 0x70,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e,
	0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75,
	0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6f, 0x6d, 0x61,
	0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x4f, 0x6d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6e, 0x75,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x69, 0x74, 0x53, 0x65, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x48, 0x69, 0x74, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0c,
	0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6b, 0x62, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4b, 0x62, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6e,
	0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x6b, 0x62, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x62, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x2d,
	0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x2b, 0x0a,
	0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x6f, 0x77, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75,
	0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x6d,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69, 0x63,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d,
	0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x74, 0x73, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x65, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x4f, 0x6d, 0x61, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e,
	0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x6d, 0x61, 0x70, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4f,
	0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x22, 0xe7, 0x13, 0x0a, 0x09, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6e, 0x75, 0x6d, 0x50, 0x67, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x73,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e,
	0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x74, 0x53, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x70, 0x68,
	0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x75, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xe2,
	0x0d, 0x0a, 0x11, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x53, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e,
	0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x70,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x30,
	0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f,
	0x6d, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x55, 0x6e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x69, 0x72, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6f, 0x75, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x62, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4b, 0x62,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4b, 0x62, 0x12,
	0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d,
	0x53, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x73,
	0x63, 0x72, 0x75, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x65, 0x70, 0x53, 0x63, 0x72, 0x75, 0x62, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4f, 0x6d, 0x61,
	0x70, 0x12, 0x3c, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x48, 0x69, 0x74, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x38, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d,
	0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x5f, 0x6b, 0x62, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4b, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f,
	0x65, 0x76, 0x69, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d,
	0x45, 0x76, 0x69, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69,
	0x63, 0x74, 0x5f, 0x6b, 0x62, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x4c, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x6f, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x75,
	0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x65, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e,
	0x75, 0x6d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x6d,
	0x61, 0x70, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x6d, 0x61, 0x70, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f,
	0x6d, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x6d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4f, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x65, 0x64, 0x1a, 0xad, 0x03, 0x0a, 0x14, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6d, 0x61, 0x70, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xe4, 0x10, 0x0a, 0x08, 0x4f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x73, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f,
	0x73, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x50, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x73,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x4f, 0x73, 0x64,
	0x73, 0x12, 0x29, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75,
	0x6d, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x73, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x16,
	0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x6d, 0x61,
	0x70, 0x5f, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75,
	0x6d, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x6d, 0x61, 0x70, 0x4f, 0x73, 0x64, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x6b, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6b, 0x62,
	0x12, 0x17, 0x0a, 0x07, 0x6b, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6b, 0x62, 0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6b, 0x62, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6b, 0x62, 0x55, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x6b,
	0x62, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6b, 0x62, 0x55, 0x73, 0x65, 0x64, 0x4f, 0x6d, 0x61, 0x70, 0x12, 0x20, 0x0a,
	0x0c, 0x6b, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6b, 0x62, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x62, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6b, 0x62, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x66, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x70,
	0x68, 0x2e, 0x4f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x46,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x66, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x62, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x68, 0x62, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x74, 0x72, 0x69,
	0x6d, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x54, 0x72, 0x69, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4c, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x5f,
	0x74, 0x72, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6e, 0x75, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x54, 0x72, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75,
	0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x48, 0x0a, 0x11, 0x6f, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x70,
	0x68, 0x2e, 0x4f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4f, 0x70, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x6f, 0x70, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x52, 0x08, 0x70, 0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x1a, 0x9f, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x46, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x6c, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x19, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6d, 0x61,
	0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4f, 0x0a, 0x0e, 0x4f, 0x70, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0xb6, 0x01, 0x0a, 0x08, 0x50, 0x65, 0x72,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4e,
	0x73, 0x1a, 0xf6, 0x04, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x73, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6f, 0x73, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x1a, 0xe5, 0x03, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e,
	0x4f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x4f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x1a, 0x47, 0x0a, 0x07, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6d, 0x69, 0x6e, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x35, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69,
	0x6e, 0x31, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x31, 0x35,
	0x1a, 0x43, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x69, 0x6e, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x35, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x31, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x6d, 0x69, 0x6e, 0x31, 0x35, 0x1a, 0x43, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x69, 0x6e, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x31,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6d, 0x69, 0x6e, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x31, 0x35, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x31, 0x35, 0x22, 0xcd, 0x03, 0x0a, 0x0a, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x46, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x73, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6f, 0x73, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x3a, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6d, 0x61, 0x70, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6f, 0x6d, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0xed, 0x02, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b,
	0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43,
	0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x4f,
	0x73, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c,
	0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x4f, 0x73, 0x64,
	0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x50, 0x67, 0x44, 0x75, 0x6d, 0x70, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x50, 0x67, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70,
	0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x79, 0x73, 0x6f, 0x2f, 0x63,
	0x65, 0x70, 0x68, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x70, 0x68,
	0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_status_proto_rawDescOnce sync.Once
	file_status_proto_rawDescData = file_status_proto_rawDesc
)

func file_status_proto_rawDescGZIP() []byte {
	file_status_proto_rawDescOnce.Do(func() {
		file_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_status_proto_rawDescData)
	})
	return file_status_proto_rawDescData
}

var file_status_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_status_proto_goTypes = []interface{}{
	(*GetCephStatusResponse)(nil),                 // 0: ceph.GetCephStatusResponse
	(*CephMonDumpResponse)(nil),                   // 1: ceph.CephMonDumpResponse
	(*CephMonDumpFeatures)(nil),                   // 2: ceph.CephMonDumpFeatures
	(*CephMonDumpMonInfo)(nil),                    // 3: ceph.CephMonDumpMonInfo
	(*CephMonDumpAddrVec)(nil),                    // 4: ceph.CephMonDumpAddrVec
	(*CephMonDumpAddress)(nil),                    // 5: ceph.CephMonDumpAddress
	(*CephStatusHealth)(nil),                      // 6: ceph.CephStatusHealth
	(*CephStatusMonMap)(nil),                      // 7: ceph.CephStatusMonMap
	(*CephStatusOSDMap)(nil),                      // 8: ceph.CephStatusOSDMap
	(*CephStatusPGMap)(nil),                       // 9: ceph.CephStatusPGMap
	(*CephStatusPGState)(nil),                     // 10: ceph.CephStatusPGState
	(*CephStatusFSMap)(nil),                       // 11: ceph.CephStatusFSMap
	(*CephStatusMgrMap)(nil),                      // 12: ceph.CephStatusMgrMap
	(*CephStatusServiceMap)(nil),                  // 13: ceph.CephStatusServiceMap
	(*CephStatusService)(nil),                     // 14: ceph.CephStatusService
	(*GetCephOsdDumpResponse)(nil),                // 15: ceph.GetCephOsdDumpResponse
	(*OsdDumpPool)(nil),                           // 16: ceph.OsdDumpPool
	(*OsdDumpLastPgMergeMeta)(nil),                // 17: ceph.OsdDumpLastPgMergeMeta
	(*OsdDumpHitSetParams)(nil),                   // 18: ceph.OsdDumpHitSetParams
	(*OsdDumpReadBalance)(nil),                    // 19: ceph.OsdDumpReadBalance
	(*OsdDumpOsdInfo)(nil),                        // 20: ceph.OsdDumpOsdInfo
	(*OsdDumpPublicAddrs)(nil),                    // 21: ceph.OsdDumpPublicAddrs
	(*OsdDumpClusterAddrs)(nil),                   // 22: ceph.OsdDumpClusterAddrs
	(*OsdDumpHeartbeatAddrs)(nil),                 // 23: ceph.OsdDumpHeartbeatAddrs
	(*OsdDumpAddrVec)(nil),                        // 24: ceph.OsdDumpAddrVec
	(*OsdDumpOsdXInfo)(nil),                       // 25: ceph.OsdDumpOsdXInfo
	(*OsdDumpErasureCodeProfile)(nil),             // 26: ceph.OsdDumpErasureCodeProfile
	(*OsdDumpStretchMode)(nil),                    // 27: ceph.OsdDumpStretchMode
	(*GetCephPgDumpResponse)(nil),                 // 28: ceph.GetCephPgDumpResponse
	(*PGMap)(nil),                                 // 29: ceph.PGMap
	(*PGStatsSum)(nil),                            // 30: ceph.PGStatsSum
	(*OSDStatsSum)(nil),                           // 31: ceph.OSDStatsSum
	(*PGStatsDelta)(nil),                          // 32: ceph.PGStatsDelta
	(*PGStat)(nil),                                // 33: ceph.PGStat
	(*PoolStats)(nil),                             // 34: ceph.PoolStats
	(*OsdStats)(nil),                              // 35: ceph.OsdStats
	(*PoolStatFs)(nil),                            // 36: ceph.PoolStatFs
	nil,                                           // 37: ceph.CephStatusHealth.ChecksEntry
	nil,                                           // 38: ceph.CephStatusMgrMap.ServicesEntry
	nil,                                           // 39: ceph.CephStatusServiceMap.ServicesEntry
	nil,                                           // 40: ceph.CephStatusService.DaemonsEntry
	nil,                                           // 41: ceph.GetCephOsdDumpResponse.BlocklistEntry
	nil,                                           // 42: ceph.GetCephOsdDumpResponse.ErasureCodeProfilesEntry
	(*PGStatsSum_PGStatsSum_StatSum)(nil),         // 43: ceph.PGStatsSum.PGStatsSum_StatSum
	(*PGStatsSum_PGStatsSum_StoreStats)(nil),      // 44: ceph.PGStatsSum.PGStatsSum_StoreStats
	(*OSDStatsSum_StatFs)(nil),                    // 45: ceph.OSDStatsSum.StatFs
	(*OSDStatsSum_OpQueueAgeHist)(nil),            // 46: ceph.OSDStatsSum.OpQueueAgeHist
	(*OSDStatsSum_PerfStat)(nil),                  // 47: ceph.OSDStatsSum.PerfStat
	(*OSDStatsSum_NetworkPingTime)(nil),           // 48: ceph.OSDStatsSum.NetworkPingTime
	(*OSDStatsSum_NetworkPingTime_Interface)(nil), // 49: ceph.OSDStatsSum.NetworkPingTime.Interface
	(*OSDStatsSum_NetworkPingTime_Interface_Average)(nil), // 50: ceph.OSDStatsSum.NetworkPingTime.Interface.Average
	(*OSDStatsSum_NetworkPingTime_Interface_Min)(nil),     // 51: ceph.OSDStatsSum.NetworkPingTime.Interface.Min
	(*OSDStatsSum_NetworkPingTime_Interface_Max)(nil),     // 52: ceph.OSDStatsSum.NetworkPingTime.Interface.Max
	(*PGStatsDelta_PGStatsDelta_StatSum)(nil),             // 53: ceph.PGStatsDelta.PGStatsDelta_StatSum
	(*PGStatsDelta_PGStatsDelta_StoreStats)(nil),          // 54: ceph.PGStatsDelta.PGStatsDelta_StoreStats
	(*PGStat_PGStat_StatSum)(nil),                         // 55: ceph.PGStat.PGStat_StatSum
	(*PoolStats_PoolStats_StatSum)(nil),                   // 56: ceph.PoolStats.PoolStats_StatSum
	(*PoolStats_PoolStats_StoreStats)(nil),                // 57: ceph.PoolStats.PoolStats_StoreStats
	(*OsdStats_StatFs)(nil),                               // 58: ceph.OsdStats.StatFs
	(*OsdStats_OpQueueAgeHist)(nil),                       // 59: ceph.OsdStats.OpQueueAgeHist
	(*OsdStats_PerfStat)(nil),                             // 60: ceph.OsdStats.PerfStat
	(*OsdStats_NetworkPingTime)(nil),                      // 61: ceph.OsdStats.NetworkPingTime
	(*OsdStats_NetworkPingTime_Interface)(nil),            // 62: ceph.OsdStats.NetworkPingTime.Interface
	(*OsdStats_NetworkPingTime_Interface_Average)(nil),    // 63: ceph.OsdStats.NetworkPingTime.Interface.Average
	(*OsdStats_NetworkPingTime_Interface_Min)(nil),        // 64: ceph.OsdStats.NetworkPingTime.Interface.Min
	(*OsdStats_NetworkPingTime_Interface_Max)(nil),        // 65: ceph.OsdStats.NetworkPingTime.Interface.Max
	(*structpb.Struct)(nil),                               // 66: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                         // 67: google.protobuf.Timestamp
	(*structpb.Value)(nil),                                // 68: google.protobuf.Value
	(*emptypb.Empty)(nil),                                 // 69: google.protobuf.Empty
}
var file_status_proto_depIdxs = []int32{
	6,   // 0: ceph.GetCephStatusResponse.health:type_name -> ceph.CephStatusHealth
	7,   // 1: ceph.GetCephStatusResponse.monmap:type_name -> ceph.CephStatusMonMap
	8,   // 2: ceph.GetCephStatusResponse.osdmap:type_name -> ceph.CephStatusOSDMap
	9,   // 3: ceph.GetCephStatusResponse.pgmap:type_name -> ceph.CephStatusPGMap
	11,  // 4: ceph.GetCephStatusResponse.fsmap:type_name -> ceph.CephStatusFSMap
	12,  // 5: ceph.GetCephStatusResponse.mgrmap:type_name -> ceph.CephStatusMgrMap
	13,  // 6: ceph.GetCephStatusResponse.servicemap:type_name -> ceph.CephStatusServiceMap
	66,  // 7: ceph.GetCephStatusResponse.progress_events:type_name -> google.protobuf.Struct
	67,  // 8: ceph.CephMonDumpResponse.modified:type_name -> google.protobuf.Timestamp
	67,  // 9: ceph.CephMonDumpResponse.created:type_name -> google.protobuf.Timestamp
	2,   // 10: ceph.CephMonDumpResponse.features:type_name -> ceph.CephMonDumpFeatures
	3,   // 11: ceph.CephMonDumpResponse.mons:type_name -> ceph.CephMonDumpMonInfo
	4,   // 12: ceph.CephMonDumpMonInfo.public_addrs:type_name -> ceph.CephMonDumpAddrVec
	5,   // 13: ceph.CephMonDumpAddrVec.addrvec:type_name -> ceph.CephMonDumpAddress
	37,  // 14: ceph.CephStatusHealth.checks:type_name -> ceph.CephStatusHealth.ChecksEntry
	68,  // 15: ceph.CephStatusHealth.mutes:type_name -> google.protobuf.Value
	10,  // 16: ceph.CephStatusPGMap.pgs_by_state:type_name -> ceph.CephStatusPGState
	68,  // 17: ceph.CephStatusFSMap.by_rank:type_name -> google.protobuf.Value
	38,  // 18: ceph.CephStatusMgrMap.services:type_name -> ceph.CephStatusMgrMap.ServicesEntry
	39,  // 19: ceph.CephStatusServiceMap.services:type_name -> ceph.CephStatusServiceMap.ServicesEntry
	40,  // 20: ceph.CephStatusService.daemons:type_name -> ceph.CephStatusService.DaemonsEntry
	67,  // 21: ceph.GetCephOsdDumpResponse.created:type_name -> google.protobuf.Timestamp
	67,  // 22: ceph.GetCephOsdDumpResponse.modified:type_name -> google.protobuf.Timestamp
	67,  // 23: ceph.GetCephOsdDumpResponse.last_up_change:type_name -> google.protobuf.Timestamp
	67,  // 24: ceph.GetCephOsdDumpResponse.last_in_change:type_name -> google.protobuf.Timestamp
	16,  // 25: ceph.GetCephOsdDumpResponse.pools:type_name -> ceph.OsdDumpPool
	20,  // 26: ceph.GetCephOsdDumpResponse.osds:type_name -> ceph.OsdDumpOsdInfo
	25,  // 27: ceph.GetCephOsdDumpResponse.osd_xinfo:type_name -> ceph.OsdDumpOsdXInfo
	68,  // 28: ceph.GetCephOsdDumpResponse.pg_upmap:type_name -> google.protobuf.Value
	68,  // 29: ceph.GetCephOsdDumpResponse.pg_upmap_items:type_name -> google.protobuf.Value
	68,  // 30: ceph.GetCephOsdDumpResponse.pg_upmap_primaries:type_name -> google.protobuf.Value
	68,  // 31: ceph.GetCephOsdDumpResponse.pg_temp:type_name -> google.protobuf.Value
	68,  // 32: ceph.GetCephOsdDumpResponse.primary_temp:type_name -> google.protobuf.Value
	41,  // 33: ceph.GetCephOsdDumpResponse.blocklist:type_name -> ceph.GetCephOsdDumpResponse.BlocklistEntry
	66,  // 34: ceph.GetCephOsdDumpResponse.range_blocklist:type_name -> google.protobuf.Struct
	42,  // 35: ceph.GetCephOsdDumpResponse.erasure_code_profiles:type_name -> ceph.GetCephOsdDumpResponse.ErasureCodeProfilesEntry
	68,  // 36: ceph.GetCephOsdDumpResponse.removed_snaps_queue:type_name -> google.protobuf.Value
	68,  // 37: ceph.GetCephOsdDumpResponse.new_removed_snaps:type_name -> google.protobuf.Value
	68,  // 38: ceph.GetCephOsdDumpResponse.new_purged_snaps:type_name -> google.protobuf.Value
	66,  // 39: ceph.GetCephOsdDumpResponse.crush_node_flags:type_name -> google.protobuf.Struct
	66,  // 40: ceph.GetCephOsdDumpResponse.device_class_flags:type_name -> google.protobuf.Struct
	27,  // 41: ceph.GetCephOsdDumpResponse.stretch_mode:type_name -> ceph.OsdDumpStretchMode
	67,  // 42: ceph.OsdDumpPool.create_time:type_name -> google.protobuf.Timestamp
	17,  // 43: ceph.OsdDumpPool.last_pg_merge_meta:type_name -> ceph.OsdDumpLastPgMergeMeta
	68,  // 44: ceph.OsdDumpPool.pool_snaps:type_name -> google.protobuf.Value
	18,  // 45: ceph.OsdDumpPool.hit_set_params:type_name -> ceph.OsdDumpHitSetParams
	68,  // 46: ceph.OsdDumpPool.grade_table:type_name -> google.protobuf.Value
	66,  // 47: ceph.OsdDumpPool.options:type_name -> google.protobuf.Struct
	66,  // 48: ceph.OsdDumpPool.application_metadata:type_name -> google.protobuf.Struct
	19,  // 49: ceph.OsdDumpPool.read_balance:type_name -> ceph.OsdDumpReadBalance
	21,  // 50: ceph.OsdDumpOsdInfo.public_addrs:type_name -> ceph.OsdDumpPublicAddrs
	22,  // 51: ceph.OsdDumpOsdInfo.cluster_addrs:type_name -> ceph.OsdDumpClusterAddrs
	23,  // 52: ceph.OsdDumpOsdInfo.heartbeat_back_addrs:type_name -> ceph.OsdDumpHeartbeatAddrs
	23,  // 53: ceph.OsdDumpOsdInfo.heartbeat_front_addrs:type_name -> ceph.OsdDumpHeartbeatAddrs
	24,  // 54: ceph.OsdDumpPublicAddrs.addrvec:type_name -> ceph.OsdDumpAddrVec
	24,  // 55: ceph.OsdDumpClusterAddrs.addrvec:type_name -> ceph.OsdDumpAddrVec
	24,  // 56: ceph.OsdDumpHeartbeatAddrs.addrvec:type_name -> ceph.OsdDumpAddrVec
	67,  // 57: ceph.OsdDumpOsdXInfo.down_stamp:type_name -> google.protobuf.Timestamp
	67,  // 58: ceph.OsdDumpOsdXInfo.last_purged_snaps_scrub:type_name -> google.protobuf.Timestamp
	29,  // 59: ceph.GetCephPgDumpResponse.pg_map:type_name -> ceph.PGMap
	67,  // 60: ceph.PGMap.stamp:type_name -> google.protobuf.Timestamp
	30,  // 61: ceph.PGMap.pg_stats_sum:type_name -> ceph.PGStatsSum
	31,  // 62: ceph.PGMap.osd_stats_sum:type_name -> ceph.OSDStatsSum
	32,  // 63: ceph.PGMap.pg_stats_delta:type_name -> ceph.PGStatsDelta
	33,  // 64: ceph.PGMap.pg_stats:type_name -> ceph.PGStat
	34,  // 65: ceph.PGMap.pool_stats:type_name -> ceph.PoolStats
	35,  // 66: ceph.PGMap.osd_stats:type_name -> ceph.OsdStats
	36,  // 67: ceph.PGMap.pool_statfs:type_name -> ceph.PoolStatFs
	43,  // 68: ceph.PGStatsSum.stat_sum:type_name -> ceph.PGStatsSum.PGStatsSum_StatSum
	44,  // 69: ceph.PGStatsSum.store_stats:type_name -> ceph.PGStatsSum.PGStatsSum_StoreStats
	45,  // 70: ceph.OSDStatsSum.statfs:type_name -> ceph.OSDStatsSum.StatFs
	46,  // 71: ceph.OSDStatsSum.op_queue_age_hist:type_name -> ceph.OSDStatsSum.OpQueueAgeHist
	47,  // 72: ceph.OSDStatsSum.perf_stat:type_name -> ceph.OSDStatsSum.PerfStat
	48,  // 73: ceph.OSDStatsSum.network_ping_times:type_name -> ceph.OSDStatsSum.NetworkPingTime
	53,  // 74: ceph.PGStatsDelta.stat_sum:type_name -> ceph.PGStatsDelta.PGStatsDelta_StatSum
	54,  // 75: ceph.PGStatsDelta.store_stats:type_name -> ceph.PGStatsDelta.PGStatsDelta_StoreStats
	67,  // 76: ceph.PGStat.last_fresh:type_name -> google.protobuf.Timestamp
	67,  // 77: ceph.PGStat.last_change:type_name -> google.protobuf.Timestamp
	67,  // 78: ceph.PGStat.last_active:type_name -> google.protobuf.Timestamp
	67,  // 79: ceph.PGStat.last_peered:type_name -> google.protobuf.Timestamp
	67,  // 80: ceph.PGStat.last_clean:type_name -> google.protobuf.Timestamp
	67,  // 81: ceph.PGStat.last_became_active:type_name -> google.protobuf.Timestamp
	67,  // 82: ceph.PGStat.last_became_peered:type_name -> google.protobuf.Timestamp
	67,  // 83: ceph.PGStat.last_unstale:type_name -> google.protobuf.Timestamp
	67,  // 84: ceph.PGStat.last_undegraded:type_name -> google.protobuf.Timestamp
	67,  // 85: ceph.PGStat.last_fullsized:type_name -> google.protobuf.Timestamp
	67,  // 86: ceph.PGStat.last_scrub_stamp:type_name -> google.protobuf.Timestamp
	67,  // 87: ceph.PGStat.last_deep_scrub_stamp:type_name -> google.protobuf.Timestamp
	67,  // 88: ceph.PGStat.last_clean_scrub_stamp:type_name -> google.protobuf.Timestamp
	55,  // 89: ceph.PGStat.stat_sum:type_name -> ceph.PGStat.PGStat_StatSum
	56,  // 90: ceph.PoolStats.stat_sum:type_name -> ceph.PoolStats.PoolStats_StatSum
	57,  // 91: ceph.PoolStats.store_stats:type_name -> ceph.PoolStats.PoolStats_StoreStats
	58,  // 92: ceph.OsdStats.statfs:type_name -> ceph.OsdStats.StatFs
	59,  // 93: ceph.OsdStats.op_queue_age_hist:type_name -> ceph.OsdStats.OpQueueAgeHist
	60,  // 94: ceph.OsdStats.perf_stat:type_name -> ceph.OsdStats.PerfStat
	61,  // 95: ceph.OsdStats.network_ping_times:type_name -> ceph.OsdStats.NetworkPingTime
	66,  // 96: ceph.CephStatusHealth.ChecksEntry.value:type_name -> google.protobuf.Struct
	14,  // 97: ceph.CephStatusServiceMap.ServicesEntry.value:type_name -> ceph.CephStatusService
	68,  // 98: ceph.CephStatusService.DaemonsEntry.value:type_name -> google.protobuf.Value
	67,  // 99: ceph.GetCephOsdDumpResponse.BlocklistEntry.value:type_name -> google.protobuf.Timestamp
	26,  // 100: ceph.GetCephOsdDumpResponse.ErasureCodeProfilesEntry.value:type_name -> ceph.OsdDumpErasureCodeProfile
	67,  // 101: ceph.OSDStatsSum.NetworkPingTime.last_update:type_name -> google.protobuf.Timestamp
	49,  // 102: ceph.OSDStatsSum.NetworkPingTime.interfaces:type_name -> ceph.OSDStatsSum.NetworkPingTime.Interface
	50,  // 103: ceph.OSDStatsSum.NetworkPingTime.Interface.average:type_name -> ceph.OSDStatsSum.NetworkPingTime.Interface.Average
	51,  // 104: ceph.OSDStatsSum.NetworkPingTime.Interface.min:type_name -> ceph.OSDStatsSum.NetworkPingTime.Interface.Min
	52,  // 105: ceph.OSDStatsSum.NetworkPingTime.Interface.max:type_name -> ceph.OSDStatsSum.NetworkPingTime.Interface.Max
	62,  // 106: ceph.OsdStats.NetworkPingTime.interfaces:type_name -> ceph.OsdStats.NetworkPingTime.Interface
	63,  // 107: ceph.OsdStats.NetworkPingTime.Interface.average:type_name -> ceph.OsdStats.NetworkPingTime.Interface.Average
	64,  // 108: ceph.OsdStats.NetworkPingTime.Interface.min:type_name -> ceph.OsdStats.NetworkPingTime.Interface.Min
	65,  // 109: ceph.OsdStats.NetworkPingTime.Interface.max:type_name -> ceph.OsdStats.NetworkPingTime.Interface.Max
	69,  // 110: ceph.Status.GetCephStatus:input_type -> google.protobuf.Empty
	69,  // 111: ceph.Status.GetCephMonDump:input_type -> google.protobuf.Empty
	69,  // 112: ceph.Status.GetCephOsdDump:input_type -> google.protobuf.Empty
	69,  // 113: ceph.Status.GetCephPgDump:input_type -> google.protobuf.Empty
	69,  // 114: ceph.Status.GetCephReport:input_type -> google.protobuf.Empty
	0,   // 115: ceph.Status.GetCephStatus:output_type -> ceph.GetCephStatusResponse
	1,   // 116: ceph.Status.GetCephMonDump:output_type -> ceph.CephMonDumpResponse
	15,  // 117: ceph.Status.GetCephOsdDump:output_type -> ceph.GetCephOsdDumpResponse
	28,  // 118: ceph.Status.GetCephPgDump:output_type -> ceph.GetCephPgDumpResponse
	66,  // 119: ceph.Status.GetCephReport:output_type -> google.protobuf.Struct
	115, // [115:120] is the sub-list for method output_type
	110, // [110:115] is the sub-list for method input_type
	110, // [110:110] is the sub-list for extension type_name
	110, // [110:110] is the sub-list for extension extendee
	0,   // [0:110] is the sub-list for field type_name
}

func init() { file_status_proto_init() }
func file_status_proto_init() {
	if File_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCephStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephMonDumpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephMonDumpFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephMonDumpMonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephMonDumpAddrVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephMonDumpAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusMonMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusOSDMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusPGMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusPGState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusFSMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusMgrMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusServiceMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCephOsdDumpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpLastPgMergeMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpHitSetParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpReadBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpOsdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpPublicAddrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpClusterAddrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpHeartbeatAddrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpAddrVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpOsdXInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpErasureCodeProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdDumpStretchMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCephPgDumpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PGMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PGStatsSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDStatsSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PGStatsDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PGStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolStatFs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PGStatsSum_PGStatsSum_StatSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PGStatsSum_PGStatsSum_StoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDStatsSum_StatFs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDStatsSum_OpQueueAgeHist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDStatsSum_PerfStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDStatsSum_NetworkPingTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDStatsSum_NetworkPingTime_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDStatsSum_NetworkPingTime_Interface_Average); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDStatsSum_NetworkPingTime_Interface_Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDStatsSum_NetworkPingTime_Interface_Max); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PGStatsDelta_PGStatsDelta_StatSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PGStatsDelta_PGStatsDelta_StoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PGStat_PGStat_StatSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolStats_PoolStats_StatSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolStats_PoolStats_StoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStats_StatFs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStats_OpQueueAgeHist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStats_PerfStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStats_NetworkPingTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStats_NetworkPingTime_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStats_NetworkPingTime_Interface_Average); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStats_NetworkPingTime_Interface_Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStats_NetworkPingTime_Interface_Max); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_status_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_status_proto_goTypes,
		DependencyIndexes: file_status_proto_depIdxs,
		MessageInfos:      file_status_proto_msgTypes,
	}.Build()
	File_status_proto = out.File
	file_status_proto_rawDesc = nil
	file_status_proto_goTypes = nil
	file_status_proto_depIdxs = nil
}
