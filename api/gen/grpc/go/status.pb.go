// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: status.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCephStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fsid           string                `protobuf:"bytes,1,opt,name=fsid,proto3" json:"fsid,omitempty"`
	Health         *CephStatusHealth     `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
	ElectionEpoch  int32                 `protobuf:"varint,3,opt,name=election_epoch,json=electionEpoch,proto3" json:"election_epoch,omitempty"`
	Quorum         []int32               `protobuf:"varint,4,rep,packed,name=quorum,proto3" json:"quorum,omitempty"`
	QuorumNames    []string              `protobuf:"bytes,5,rep,name=quorum_names,json=quorumNames,proto3" json:"quorum_names,omitempty"`
	QuorumAge      int32                 `protobuf:"varint,6,opt,name=quorum_age,json=quorumAge,proto3" json:"quorum_age,omitempty"`
	Monmap         *CephStatusMonMap     `protobuf:"bytes,7,opt,name=monmap,proto3" json:"monmap,omitempty"`
	Osdmap         *CephStatusOSDMap     `protobuf:"bytes,8,opt,name=osdmap,proto3" json:"osdmap,omitempty"`
	Pgmap          *CephStatusPGMap      `protobuf:"bytes,9,opt,name=pgmap,proto3" json:"pgmap,omitempty"`
	Fsmap          *CephStatusFSMap      `protobuf:"bytes,10,opt,name=fsmap,proto3" json:"fsmap,omitempty"`
	Mgrmap         *CephStatusMgrMap     `protobuf:"bytes,11,opt,name=mgrmap,proto3" json:"mgrmap,omitempty"`
	Servicemap     *CephStatusServiceMap `protobuf:"bytes,12,opt,name=servicemap,proto3" json:"servicemap,omitempty"`
	ProgressEvents *structpb.Struct      `protobuf:"bytes,13,opt,name=progress_events,json=progressEvents,proto3" json:"progress_events,omitempty"`
}

func (x *GetCephStatusResponse) Reset() {
	*x = GetCephStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCephStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCephStatusResponse) ProtoMessage() {}

func (x *GetCephStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCephStatusResponse.ProtoReflect.Descriptor instead.
func (*GetCephStatusResponse) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{0}
}

func (x *GetCephStatusResponse) GetFsid() string {
	if x != nil {
		return x.Fsid
	}
	return ""
}

func (x *GetCephStatusResponse) GetHealth() *CephStatusHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *GetCephStatusResponse) GetElectionEpoch() int32 {
	if x != nil {
		return x.ElectionEpoch
	}
	return 0
}

func (x *GetCephStatusResponse) GetQuorum() []int32 {
	if x != nil {
		return x.Quorum
	}
	return nil
}

func (x *GetCephStatusResponse) GetQuorumNames() []string {
	if x != nil {
		return x.QuorumNames
	}
	return nil
}

func (x *GetCephStatusResponse) GetQuorumAge() int32 {
	if x != nil {
		return x.QuorumAge
	}
	return 0
}

func (x *GetCephStatusResponse) GetMonmap() *CephStatusMonMap {
	if x != nil {
		return x.Monmap
	}
	return nil
}

func (x *GetCephStatusResponse) GetOsdmap() *CephStatusOSDMap {
	if x != nil {
		return x.Osdmap
	}
	return nil
}

func (x *GetCephStatusResponse) GetPgmap() *CephStatusPGMap {
	if x != nil {
		return x.Pgmap
	}
	return nil
}

func (x *GetCephStatusResponse) GetFsmap() *CephStatusFSMap {
	if x != nil {
		return x.Fsmap
	}
	return nil
}

func (x *GetCephStatusResponse) GetMgrmap() *CephStatusMgrMap {
	if x != nil {
		return x.Mgrmap
	}
	return nil
}

func (x *GetCephStatusResponse) GetServicemap() *CephStatusServiceMap {
	if x != nil {
		return x.Servicemap
	}
	return nil
}

func (x *GetCephStatusResponse) GetProgressEvents() *structpb.Struct {
	if x != nil {
		return x.ProgressEvents
	}
	return nil
}

type CephMonDumpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             int32                  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Fsid              string                 `protobuf:"bytes,2,opt,name=fsid,proto3" json:"fsid,omitempty"`
	Modified          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=modified,proto3" json:"modified,omitempty"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	MinMonRelease     int32                  `protobuf:"varint,5,opt,name=min_mon_release,json=minMonRelease,proto3" json:"min_mon_release,omitempty"`
	MinMonReleaseName string                 `protobuf:"bytes,6,opt,name=min_mon_release_name,json=minMonReleaseName,proto3" json:"min_mon_release_name,omitempty"`
	ElectionStrategy  int32                  `protobuf:"varint,7,opt,name=election_strategy,json=electionStrategy,proto3" json:"election_strategy,omitempty"`
	DisallowedLeaders string                 `protobuf:"bytes,8,opt,name=disallowed_leaders,json=disallowedLeaders,proto3" json:"disallowed_leaders,omitempty"`
	StretchMode       bool                   `protobuf:"varint,9,opt,name=stretch_mode,json=stretchMode,proto3" json:"stretch_mode,omitempty"`
	TiebreakerMon     string                 `protobuf:"bytes,10,opt,name=tiebreaker_mon,json=tiebreakerMon,proto3" json:"tiebreaker_mon,omitempty"`
	RemovedRanks      string                 `protobuf:"bytes,11,opt,name=removed_ranks,json=removedRanks,proto3" json:"removed_ranks,omitempty"`
	Features          *CephMonDumpFeatures   `protobuf:"bytes,12,opt,name=features,proto3" json:"features,omitempty"`
	Mons              []*CephMonDumpMonInfo  `protobuf:"bytes,13,rep,name=mons,proto3" json:"mons,omitempty"`
	Quorum            []int32                `protobuf:"varint,14,rep,packed,name=quorum,proto3" json:"quorum,omitempty"`
}

func (x *CephMonDumpResponse) Reset() {
	*x = CephMonDumpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephMonDumpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephMonDumpResponse) ProtoMessage() {}

func (x *CephMonDumpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephMonDumpResponse.ProtoReflect.Descriptor instead.
func (*CephMonDumpResponse) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{1}
}

func (x *CephMonDumpResponse) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CephMonDumpResponse) GetFsid() string {
	if x != nil {
		return x.Fsid
	}
	return ""
}

func (x *CephMonDumpResponse) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *CephMonDumpResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CephMonDumpResponse) GetMinMonRelease() int32 {
	if x != nil {
		return x.MinMonRelease
	}
	return 0
}

func (x *CephMonDumpResponse) GetMinMonReleaseName() string {
	if x != nil {
		return x.MinMonReleaseName
	}
	return ""
}

func (x *CephMonDumpResponse) GetElectionStrategy() int32 {
	if x != nil {
		return x.ElectionStrategy
	}
	return 0
}

func (x *CephMonDumpResponse) GetDisallowedLeaders() string {
	if x != nil {
		return x.DisallowedLeaders
	}
	return ""
}

func (x *CephMonDumpResponse) GetStretchMode() bool {
	if x != nil {
		return x.StretchMode
	}
	return false
}

func (x *CephMonDumpResponse) GetTiebreakerMon() string {
	if x != nil {
		return x.TiebreakerMon
	}
	return ""
}

func (x *CephMonDumpResponse) GetRemovedRanks() string {
	if x != nil {
		return x.RemovedRanks
	}
	return ""
}

func (x *CephMonDumpResponse) GetFeatures() *CephMonDumpFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *CephMonDumpResponse) GetMons() []*CephMonDumpMonInfo {
	if x != nil {
		return x.Mons
	}
	return nil
}

func (x *CephMonDumpResponse) GetQuorum() []int32 {
	if x != nil {
		return x.Quorum
	}
	return nil
}

type CephMonDumpFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Persistent []string `protobuf:"bytes,1,rep,name=persistent,proto3" json:"persistent,omitempty"`
	Optional   []string `protobuf:"bytes,2,rep,name=optional,proto3" json:"optional,omitempty"`
}

func (x *CephMonDumpFeatures) Reset() {
	*x = CephMonDumpFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephMonDumpFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephMonDumpFeatures) ProtoMessage() {}

func (x *CephMonDumpFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephMonDumpFeatures.ProtoReflect.Descriptor instead.
func (*CephMonDumpFeatures) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{2}
}

func (x *CephMonDumpFeatures) GetPersistent() []string {
	if x != nil {
		return x.Persistent
	}
	return nil
}

func (x *CephMonDumpFeatures) GetOptional() []string {
	if x != nil {
		return x.Optional
	}
	return nil
}

type CephMonDumpMonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank          int32               `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Name          string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PublicAddrs   *CephMonDumpAddrVec `protobuf:"bytes,3,opt,name=public_addrs,json=publicAddrs,proto3" json:"public_addrs,omitempty"`
	Addr          string              `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
	PublicAddr    string              `protobuf:"bytes,5,opt,name=public_addr,json=publicAddr,proto3" json:"public_addr,omitempty"`
	Priority      int32               `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	Weight        int32               `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	CrushLocation string              `protobuf:"bytes,8,opt,name=crush_location,json=crushLocation,proto3" json:"crush_location,omitempty"`
}

func (x *CephMonDumpMonInfo) Reset() {
	*x = CephMonDumpMonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephMonDumpMonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephMonDumpMonInfo) ProtoMessage() {}

func (x *CephMonDumpMonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephMonDumpMonInfo.ProtoReflect.Descriptor instead.
func (*CephMonDumpMonInfo) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{3}
}

func (x *CephMonDumpMonInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *CephMonDumpMonInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CephMonDumpMonInfo) GetPublicAddrs() *CephMonDumpAddrVec {
	if x != nil {
		return x.PublicAddrs
	}
	return nil
}

func (x *CephMonDumpMonInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *CephMonDumpMonInfo) GetPublicAddr() string {
	if x != nil {
		return x.PublicAddr
	}
	return ""
}

func (x *CephMonDumpMonInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CephMonDumpMonInfo) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *CephMonDumpMonInfo) GetCrushLocation() string {
	if x != nil {
		return x.CrushLocation
	}
	return ""
}

type CephMonDumpAddrVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrvec []*CephMonDumpAddress `protobuf:"bytes,1,rep,name=addrvec,proto3" json:"addrvec,omitempty"`
}

func (x *CephMonDumpAddrVec) Reset() {
	*x = CephMonDumpAddrVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephMonDumpAddrVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephMonDumpAddrVec) ProtoMessage() {}

func (x *CephMonDumpAddrVec) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephMonDumpAddrVec.ProtoReflect.Descriptor instead.
func (*CephMonDumpAddrVec) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{4}
}

func (x *CephMonDumpAddrVec) GetAddrvec() []*CephMonDumpAddress {
	if x != nil {
		return x.Addrvec
	}
	return nil
}

type CephMonDumpAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Nonce int32  `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *CephMonDumpAddress) Reset() {
	*x = CephMonDumpAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephMonDumpAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephMonDumpAddress) ProtoMessage() {}

func (x *CephMonDumpAddress) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephMonDumpAddress.ProtoReflect.Descriptor instead.
func (*CephMonDumpAddress) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{5}
}

func (x *CephMonDumpAddress) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CephMonDumpAddress) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *CephMonDumpAddress) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type CephStatusHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Checks map[string]*structpb.Struct `protobuf:"bytes,2,rep,name=checks,proto3" json:"checks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mutes  []*structpb.Value           `protobuf:"bytes,3,rep,name=mutes,proto3" json:"mutes,omitempty"`
}

func (x *CephStatusHealth) Reset() {
	*x = CephStatusHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusHealth) ProtoMessage() {}

func (x *CephStatusHealth) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusHealth.ProtoReflect.Descriptor instead.
func (*CephStatusHealth) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{6}
}

func (x *CephStatusHealth) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CephStatusHealth) GetChecks() map[string]*structpb.Struct {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *CephStatusHealth) GetMutes() []*structpb.Value {
	if x != nil {
		return x.Mutes
	}
	return nil
}

type CephStatusMonMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             int32  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	MinMonReleaseName string `protobuf:"bytes,2,opt,name=min_mon_release_name,json=minMonReleaseName,proto3" json:"min_mon_release_name,omitempty"`
	NumMons           int32  `protobuf:"varint,3,opt,name=num_mons,json=numMons,proto3" json:"num_mons,omitempty"`
}

func (x *CephStatusMonMap) Reset() {
	*x = CephStatusMonMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusMonMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusMonMap) ProtoMessage() {}

func (x *CephStatusMonMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusMonMap.ProtoReflect.Descriptor instead.
func (*CephStatusMonMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{7}
}

func (x *CephStatusMonMap) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CephStatusMonMap) GetMinMonReleaseName() string {
	if x != nil {
		return x.MinMonReleaseName
	}
	return ""
}

func (x *CephStatusMonMap) GetNumMons() int32 {
	if x != nil {
		return x.NumMons
	}
	return 0
}

type CephStatusOSDMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch          int32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NumOsds        int32 `protobuf:"varint,2,opt,name=num_osds,json=numOsds,proto3" json:"num_osds,omitempty"`
	NumUpOsds      int32 `protobuf:"varint,3,opt,name=num_up_osds,json=numUpOsds,proto3" json:"num_up_osds,omitempty"`
	OsdUpSince     int64 `protobuf:"varint,4,opt,name=osd_up_since,json=osdUpSince,proto3" json:"osd_up_since,omitempty"`
	NumInOsds      int32 `protobuf:"varint,5,opt,name=num_in_osds,json=numInOsds,proto3" json:"num_in_osds,omitempty"`
	OsdInSince     int64 `protobuf:"varint,6,opt,name=osd_in_since,json=osdInSince,proto3" json:"osd_in_since,omitempty"`
	NumRemappedPgs int32 `protobuf:"varint,7,opt,name=num_remapped_pgs,json=numRemappedPgs,proto3" json:"num_remapped_pgs,omitempty"`
}

func (x *CephStatusOSDMap) Reset() {
	*x = CephStatusOSDMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusOSDMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusOSDMap) ProtoMessage() {}

func (x *CephStatusOSDMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusOSDMap.ProtoReflect.Descriptor instead.
func (*CephStatusOSDMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{8}
}

func (x *CephStatusOSDMap) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CephStatusOSDMap) GetNumOsds() int32 {
	if x != nil {
		return x.NumOsds
	}
	return 0
}

func (x *CephStatusOSDMap) GetNumUpOsds() int32 {
	if x != nil {
		return x.NumUpOsds
	}
	return 0
}

func (x *CephStatusOSDMap) GetOsdUpSince() int64 {
	if x != nil {
		return x.OsdUpSince
	}
	return 0
}

func (x *CephStatusOSDMap) GetNumInOsds() int32 {
	if x != nil {
		return x.NumInOsds
	}
	return 0
}

func (x *CephStatusOSDMap) GetOsdInSince() int64 {
	if x != nil {
		return x.OsdInSince
	}
	return 0
}

func (x *CephStatusOSDMap) GetNumRemappedPgs() int32 {
	if x != nil {
		return x.NumRemappedPgs
	}
	return 0
}

type CephStatusPGMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PgsByState []*CephStatusPGState `protobuf:"bytes,1,rep,name=pgs_by_state,json=pgsByState,proto3" json:"pgs_by_state,omitempty"`
	NumPgs     int32                `protobuf:"varint,2,opt,name=num_pgs,json=numPgs,proto3" json:"num_pgs,omitempty"`
	NumPools   int32                `protobuf:"varint,3,opt,name=num_pools,json=numPools,proto3" json:"num_pools,omitempty"`
	NumObjects int32                `protobuf:"varint,4,opt,name=num_objects,json=numObjects,proto3" json:"num_objects,omitempty"`
	DataBytes  int64                `protobuf:"varint,5,opt,name=data_bytes,json=dataBytes,proto3" json:"data_bytes,omitempty"`
	BytesUsed  int64                `protobuf:"varint,6,opt,name=bytes_used,json=bytesUsed,proto3" json:"bytes_used,omitempty"`
	BytesAvail int64                `protobuf:"varint,7,opt,name=bytes_avail,json=bytesAvail,proto3" json:"bytes_avail,omitempty"`
	BytesTotal int64                `protobuf:"varint,8,opt,name=bytes_total,json=bytesTotal,proto3" json:"bytes_total,omitempty"`
}

func (x *CephStatusPGMap) Reset() {
	*x = CephStatusPGMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusPGMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusPGMap) ProtoMessage() {}

func (x *CephStatusPGMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusPGMap.ProtoReflect.Descriptor instead.
func (*CephStatusPGMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{9}
}

func (x *CephStatusPGMap) GetPgsByState() []*CephStatusPGState {
	if x != nil {
		return x.PgsByState
	}
	return nil
}

func (x *CephStatusPGMap) GetNumPgs() int32 {
	if x != nil {
		return x.NumPgs
	}
	return 0
}

func (x *CephStatusPGMap) GetNumPools() int32 {
	if x != nil {
		return x.NumPools
	}
	return 0
}

func (x *CephStatusPGMap) GetNumObjects() int32 {
	if x != nil {
		return x.NumObjects
	}
	return 0
}

func (x *CephStatusPGMap) GetDataBytes() int64 {
	if x != nil {
		return x.DataBytes
	}
	return 0
}

func (x *CephStatusPGMap) GetBytesUsed() int64 {
	if x != nil {
		return x.BytesUsed
	}
	return 0
}

func (x *CephStatusPGMap) GetBytesAvail() int64 {
	if x != nil {
		return x.BytesAvail
	}
	return 0
}

func (x *CephStatusPGMap) GetBytesTotal() int64 {
	if x != nil {
		return x.BytesTotal
	}
	return 0
}

type CephStatusPGState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateName string `protobuf:"bytes,1,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
	Count     int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CephStatusPGState) Reset() {
	*x = CephStatusPGState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusPGState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusPGState) ProtoMessage() {}

func (x *CephStatusPGState) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusPGState.ProtoReflect.Descriptor instead.
func (*CephStatusPGState) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{10}
}

func (x *CephStatusPGState) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *CephStatusPGState) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CephStatusFSMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     int32             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ByRank    []*structpb.Value `protobuf:"bytes,2,rep,name=by_rank,json=byRank,proto3" json:"by_rank,omitempty"`
	UpStandby int32             `protobuf:"varint,3,opt,name=up_standby,json=upStandby,proto3" json:"up_standby,omitempty"`
}

func (x *CephStatusFSMap) Reset() {
	*x = CephStatusFSMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusFSMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusFSMap) ProtoMessage() {}

func (x *CephStatusFSMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusFSMap.ProtoReflect.Descriptor instead.
func (*CephStatusFSMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{11}
}

func (x *CephStatusFSMap) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CephStatusFSMap) GetByRank() []*structpb.Value {
	if x != nil {
		return x.ByRank
	}
	return nil
}

func (x *CephStatusFSMap) GetUpStandby() int32 {
	if x != nil {
		return x.UpStandby
	}
	return 0
}

type CephStatusMgrMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available   bool              `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	NumStandbys int32             `protobuf:"varint,2,opt,name=num_standbys,json=numStandbys,proto3" json:"num_standbys,omitempty"`
	Modules     []string          `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
	Services    map[string]string `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CephStatusMgrMap) Reset() {
	*x = CephStatusMgrMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusMgrMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusMgrMap) ProtoMessage() {}

func (x *CephStatusMgrMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusMgrMap.ProtoReflect.Descriptor instead.
func (*CephStatusMgrMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{12}
}

func (x *CephStatusMgrMap) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CephStatusMgrMap) GetNumStandbys() int32 {
	if x != nil {
		return x.NumStandbys
	}
	return 0
}

func (x *CephStatusMgrMap) GetModules() []string {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *CephStatusMgrMap) GetServices() map[string]string {
	if x != nil {
		return x.Services
	}
	return nil
}

type CephStatusServiceMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    int32                         `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Modified string                        `protobuf:"bytes,2,opt,name=modified,proto3" json:"modified,omitempty"`
	Services map[string]*CephStatusService `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CephStatusServiceMap) Reset() {
	*x = CephStatusServiceMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusServiceMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusServiceMap) ProtoMessage() {}

func (x *CephStatusServiceMap) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusServiceMap.ProtoReflect.Descriptor instead.
func (*CephStatusServiceMap) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{13}
}

func (x *CephStatusServiceMap) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CephStatusServiceMap) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *CephStatusServiceMap) GetServices() map[string]*CephStatusService {
	if x != nil {
		return x.Services
	}
	return nil
}

type CephStatusService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Daemons map[string]*structpb.Value `protobuf:"bytes,1,rep,name=daemons,proto3" json:"daemons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Summary string                     `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *CephStatusService) Reset() {
	*x = CephStatusService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CephStatusService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CephStatusService) ProtoMessage() {}

func (x *CephStatusService) ProtoReflect() protoreflect.Message {
	mi := &file_status_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CephStatusService.ProtoReflect.Descriptor instead.
func (*CephStatusService) Descriptor() ([]byte, []int) {
	return file_status_proto_rawDescGZIP(), []int{14}
}

func (x *CephStatusService) GetDaemons() map[string]*structpb.Value {
	if x != nil {
		return x.Daemons
	}
	return nil
}

func (x *CephStatusService) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

var File_status_proto protoreflect.FileDescriptor

var file_status_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x63, 0x65, 0x70, 0x68, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc4, 0x04, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x73, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x41, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x6d, 0x61, 0x70, 0x12,
	0x2e, 0x0a, 0x06, 0x6f, 0x73, 0x64, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4f, 0x53, 0x44, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x6f, 0x73, 0x64, 0x6d, 0x61, 0x70, 0x12,
	0x2b, 0x0a, 0x05, 0x70, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x47, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x70, 0x67, 0x6d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x05,
	0x66, 0x73, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65,
	0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x53, 0x4d,
	0x61, 0x70, 0x52, 0x05, 0x66, 0x73, 0x6d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x67, 0x72,
	0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x70, 0x68,
	0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x67, 0x72, 0x4d, 0x61,
	0x70, 0x52, 0x06, 0x6d, 0x67, 0x72, 0x6d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xce, 0x04, 0x0a, 0x13, 0x43, 0x65, 0x70, 0x68,
	0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x73, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44,
	0x75, 0x6d, 0x70, 0x4d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6d, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x22, 0x51, 0x0a, 0x13, 0x43, 0x65, 0x70, 0x68,
	0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x89, 0x02, 0x0a, 0x12,
	0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44,
	0x75, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x72, 0x56, 0x65, 0x63, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x75, 0x73, 0x68, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x65, 0x70, 0x68, 0x4d,
	0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x72, 0x56, 0x65, 0x63, 0x12, 0x32, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x76, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x76, 0x65,
	0x63, 0x22, 0x52, 0x0a, 0x12, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x74, 0x0a, 0x10, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69,
	0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x75, 0x6d, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x4d, 0x6f, 0x6e, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x70, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x53, 0x44, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x4f, 0x73, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x55, 0x70, 0x4f, 0x73, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x6f, 0x73, 0x64, 0x5f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x73, 0x64, 0x55, 0x70, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x73, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x4f, 0x73, 0x64, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x6f, 0x73, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x73, 0x64, 0x49, 0x6e, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x70, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x52,
	0x65, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x50, 0x67, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x43,
	0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x47, 0x4d, 0x61, 0x70, 0x12, 0x39,
	0x0a, 0x0c, 0x70, 0x67, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x47, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70,
	0x67, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d,
	0x5f, 0x70, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x50,
	0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x48, 0x0a, 0x11, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x47,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x0f, 0x43, 0x65,
	0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x53, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x79,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x62, 0x79, 0x22, 0xec, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x67, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x67, 0x72, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x14, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x43, 0x65,
	0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x52, 0x0a, 0x0c, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x97, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43,
	0x65, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1b, 0x2e, 0x63, 0x65, 0x70, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75,
	0x6d, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x70,
	0x68, 0x2e, 0x43, 0x65, 0x70, 0x68, 0x4d, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x79, 0x73, 0x6f, 0x2f, 0x63, 0x65, 0x70, 0x68,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x70, 0x68, 0x3b, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_status_proto_rawDescOnce sync.Once
	file_status_proto_rawDescData = file_status_proto_rawDesc
)

func file_status_proto_rawDescGZIP() []byte {
	file_status_proto_rawDescOnce.Do(func() {
		file_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_status_proto_rawDescData)
	})
	return file_status_proto_rawDescData
}

var file_status_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_status_proto_goTypes = []interface{}{
	(*GetCephStatusResponse)(nil), // 0: ceph.GetCephStatusResponse
	(*CephMonDumpResponse)(nil),   // 1: ceph.CephMonDumpResponse
	(*CephMonDumpFeatures)(nil),   // 2: ceph.CephMonDumpFeatures
	(*CephMonDumpMonInfo)(nil),    // 3: ceph.CephMonDumpMonInfo
	(*CephMonDumpAddrVec)(nil),    // 4: ceph.CephMonDumpAddrVec
	(*CephMonDumpAddress)(nil),    // 5: ceph.CephMonDumpAddress
	(*CephStatusHealth)(nil),      // 6: ceph.CephStatusHealth
	(*CephStatusMonMap)(nil),      // 7: ceph.CephStatusMonMap
	(*CephStatusOSDMap)(nil),      // 8: ceph.CephStatusOSDMap
	(*CephStatusPGMap)(nil),       // 9: ceph.CephStatusPGMap
	(*CephStatusPGState)(nil),     // 10: ceph.CephStatusPGState
	(*CephStatusFSMap)(nil),       // 11: ceph.CephStatusFSMap
	(*CephStatusMgrMap)(nil),      // 12: ceph.CephStatusMgrMap
	(*CephStatusServiceMap)(nil),  // 13: ceph.CephStatusServiceMap
	(*CephStatusService)(nil),     // 14: ceph.CephStatusService
	nil,                           // 15: ceph.CephStatusHealth.ChecksEntry
	nil,                           // 16: ceph.CephStatusMgrMap.ServicesEntry
	nil,                           // 17: ceph.CephStatusServiceMap.ServicesEntry
	nil,                           // 18: ceph.CephStatusService.DaemonsEntry
	(*structpb.Struct)(nil),       // 19: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil), // 20: google.protobuf.Timestamp
	(*structpb.Value)(nil),        // 21: google.protobuf.Value
	(*emptypb.Empty)(nil),         // 22: google.protobuf.Empty
}
var file_status_proto_depIdxs = []int32{
	6,  // 0: ceph.GetCephStatusResponse.health:type_name -> ceph.CephStatusHealth
	7,  // 1: ceph.GetCephStatusResponse.monmap:type_name -> ceph.CephStatusMonMap
	8,  // 2: ceph.GetCephStatusResponse.osdmap:type_name -> ceph.CephStatusOSDMap
	9,  // 3: ceph.GetCephStatusResponse.pgmap:type_name -> ceph.CephStatusPGMap
	11, // 4: ceph.GetCephStatusResponse.fsmap:type_name -> ceph.CephStatusFSMap
	12, // 5: ceph.GetCephStatusResponse.mgrmap:type_name -> ceph.CephStatusMgrMap
	13, // 6: ceph.GetCephStatusResponse.servicemap:type_name -> ceph.CephStatusServiceMap
	19, // 7: ceph.GetCephStatusResponse.progress_events:type_name -> google.protobuf.Struct
	20, // 8: ceph.CephMonDumpResponse.modified:type_name -> google.protobuf.Timestamp
	20, // 9: ceph.CephMonDumpResponse.created:type_name -> google.protobuf.Timestamp
	2,  // 10: ceph.CephMonDumpResponse.features:type_name -> ceph.CephMonDumpFeatures
	3,  // 11: ceph.CephMonDumpResponse.mons:type_name -> ceph.CephMonDumpMonInfo
	4,  // 12: ceph.CephMonDumpMonInfo.public_addrs:type_name -> ceph.CephMonDumpAddrVec
	5,  // 13: ceph.CephMonDumpAddrVec.addrvec:type_name -> ceph.CephMonDumpAddress
	15, // 14: ceph.CephStatusHealth.checks:type_name -> ceph.CephStatusHealth.ChecksEntry
	21, // 15: ceph.CephStatusHealth.mutes:type_name -> google.protobuf.Value
	10, // 16: ceph.CephStatusPGMap.pgs_by_state:type_name -> ceph.CephStatusPGState
	21, // 17: ceph.CephStatusFSMap.by_rank:type_name -> google.protobuf.Value
	16, // 18: ceph.CephStatusMgrMap.services:type_name -> ceph.CephStatusMgrMap.ServicesEntry
	17, // 19: ceph.CephStatusServiceMap.services:type_name -> ceph.CephStatusServiceMap.ServicesEntry
	18, // 20: ceph.CephStatusService.daemons:type_name -> ceph.CephStatusService.DaemonsEntry
	19, // 21: ceph.CephStatusHealth.ChecksEntry.value:type_name -> google.protobuf.Struct
	14, // 22: ceph.CephStatusServiceMap.ServicesEntry.value:type_name -> ceph.CephStatusService
	21, // 23: ceph.CephStatusService.DaemonsEntry.value:type_name -> google.protobuf.Value
	22, // 24: ceph.Status.GetCephStatus:input_type -> google.protobuf.Empty
	22, // 25: ceph.Status.GetCephMonDump:input_type -> google.protobuf.Empty
	0,  // 26: ceph.Status.GetCephStatus:output_type -> ceph.GetCephStatusResponse
	1,  // 27: ceph.Status.GetCephMonDump:output_type -> ceph.CephMonDumpResponse
	26, // [26:28] is the sub-list for method output_type
	24, // [24:26] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_status_proto_init() }
func file_status_proto_init() {
	if File_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCephStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephMonDumpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephMonDumpFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephMonDumpMonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephMonDumpAddrVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephMonDumpAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusMonMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusOSDMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusPGMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusPGState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusFSMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusMgrMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusServiceMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CephStatusService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_status_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_status_proto_goTypes,
		DependencyIndexes: file_status_proto_depIdxs,
		MessageInfos:      file_status_proto_msgTypes,
	}.Build()
	File_status_proto = out.File
	file_status_proto_rawDesc = nil
	file_status_proto_goTypes = nil
	file_status_proto_depIdxs = nil
}
